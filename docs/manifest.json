{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.4", "generated_at": "2023-12-27T23:10:39.562836Z", "invocation_id": "ca597ab0-a880-419e-99e8-203102a96885", "env": {}, "project_name": "sports_sims", "project_id": "03f8c6e5ade1b9abeae6a7bc17e1660e", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "duckdb"}, "nodes": {"model.sports_sims.reg_season_end": {"database": "mdsbox", "schema": "main", "name": "reg_season_end", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/reg_season_end.sql", "original_file_path": "models/nba/analysis/reg_season_end.sql", "unique_id": "model.sports_sims.reg_season_end", "fqn": ["sports_sims", "nba", "analysis", "reg_season_end"], "alias": "reg_season_end", "checksum": {"name": "sha256", "checksum": "9c29f02fcae971b91d27e48d28ab8334d83815893f68f71cab4315d1bd82bbbd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/reg_season_end.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711283.413687, "relation_name": "\"mdsbox\".\"main\".\"reg_season_end\"", "raw_code": "WITH cte_wins AS (\n    SELECT\n        S.scenario_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_conf\n            ELSE S.visiting_conf\n        END AS conf,\n    /*    CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n        COUNT(*) AS wins\n    FROM {{ ref( 'reg_season_simulator' ) }} S\n    GROUP BY ALL\n),\n\ncte_ranked_wins AS (\n    SELECT\n        *,\n        --no tiebreaker, so however row number handles order ties will need to be dealt with\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, conf ORDER BY wins DESC, winning_team DESC ) AS season_rank\n    FROM cte_wins\n\n),\n\ncte_made_playoffs AS (\n    SELECT\n        *,\n        CASE\n            WHEN season_rank <= 10 THEN 1\n            ELSE 0\n        END AS made_playoffs,\n        CASE\n            WHEN season_rank BETWEEN 7 AND 10 THEN 1\n            ELSE 0\n        END AS made_play_in,\n        conf || '-' || season_rank::text AS seed\n    FROM cte_ranked_wins\n)\n\nSELECT \n    MP.*,\n    LE.elo_rating,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_made_playoffs MP\nLEFT JOIN {{ ref( 'nba_latest_elo' ) }} LE ON LE.team = MP.winning_team", "language": "sql", "refs": [{"name": "reg_season_simulator", "package": null, "version": null}, {"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_simulator", "model.sports_sims.nba_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/reg_season_end.sql", "compiled": true, "compiled_code": "WITH cte_wins AS (\n    SELECT\n        S.scenario_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_conf\n            ELSE S.visiting_conf\n        END AS conf,\n    /*    CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n        COUNT(*) AS wins\n    FROM \"mdsbox\".\"main\".\"reg_season_simulator\" S\n    GROUP BY ALL\n),\n\ncte_ranked_wins AS (\n    SELECT\n        *,\n        --no tiebreaker, so however row number handles order ties will need to be dealt with\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, conf ORDER BY wins DESC, winning_team DESC ) AS season_rank\n    FROM cte_wins\n\n),\n\ncte_made_playoffs AS (\n    SELECT\n        *,\n        CASE\n            WHEN season_rank <= 10 THEN 1\n            ELSE 0\n        END AS made_playoffs,\n        CASE\n            WHEN season_rank BETWEEN 7 AND 10 THEN 1\n            ELSE 0\n        END AS made_play_in,\n        conf || '-' || season_rank::text AS seed\n    FROM cte_ranked_wins\n)\n\nSELECT \n    MP.*,\n    LE.elo_rating,\n    0 AS sim_start_game_id\nFROM cte_made_playoffs MP\nLEFT JOIN \"mdsbox\".\"main\".\"nba_latest_elo\" LE ON LE.team = MP.winning_team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.season_summary": {"database": "mdsbox", "schema": "main", "name": "season_summary", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/season_summary.sql", "original_file_path": "models/nba/analysis/season_summary.sql", "unique_id": "model.sports_sims.season_summary", "fqn": ["sports_sims", "nba", "analysis", "season_summary"], "alias": "season_summary", "checksum": {"name": "sha256", "checksum": "423bf7ec51d828c9d1f73ec00e7a0983c206a1e0e1257d5328b71289fe54090f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/season_summary.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "external"}, "created_at": 1703711283.4927454, "relation_name": "\"mdsbox\".\"main\".\"season_summary\"", "raw_code": "{{\n    config(\n        materialized='external'\n    )\n}}\n\nSELECT\n    ROUND(ratings.elo_rating,0)::int || ' (' || CASE WHEN original_rating < elo_rating THEN '+' ELSE '' END || (elo_rating-original_rating)::int || ')' AS elo_rating,\n    R.*,\n    P.made_playoffs,\n    P.made_conf_semis,\n    P.made_conf_finals,\n    P.made_finals,\n    P.won_finals\nFROM {{ ref( 'reg_season_summary' ) }} R\nLEFT JOIN {{ ref( 'playoff_summary' ) }} P ON P.team = R.team\nLEFT JOIN {{ ref( 'nba_ratings' ) }} ratings ON ratings.team = R.team", "language": "sql", "refs": [{"name": "reg_season_summary", "package": null, "version": null}, {"name": "playoff_summary", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_summary", "model.sports_sims.playoff_summary", "model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/season_summary.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    ROUND(ratings.elo_rating,0)::int || ' (' || CASE WHEN original_rating < elo_rating THEN '+' ELSE '' END || (elo_rating-original_rating)::int || ')' AS elo_rating,\n    R.*,\n    P.made_playoffs,\n    P.made_conf_semis,\n    P.made_conf_finals,\n    P.made_finals,\n    P.won_finals\nFROM \"mdsbox\".\"main\".\"reg_season_summary\" R\nLEFT JOIN \"mdsbox\".\"main\".\"playoff_summary\" P ON P.team = R.team\nLEFT JOIN \"mdsbox\".\"main\".\"nba_ratings\" ratings ON ratings.team = R.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.reg_season_actuals_enriched": {"database": "mdsbox", "schema": "main", "name": "reg_season_actuals_enriched", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/reg_season_actuals_enriched.sql", "original_file_path": "models/nba/analysis/reg_season_actuals_enriched.sql", "unique_id": "model.sports_sims.reg_season_actuals_enriched", "fqn": ["sports_sims", "nba", "analysis", "reg_season_actuals_enriched"], "alias": "reg_season_actuals_enriched", "checksum": {"name": "sha256", "checksum": "92991de6f67f5abbc99399a2d22eec566d7ce2ac871b22231cc4045db53c11af"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/reg_season_actuals_enriched.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "external"}, "created_at": 1703711283.4952343, "relation_name": "\"mdsbox\".\"main\".\"reg_season_actuals_enriched\"", "raw_code": "{{\n    config(\n        materialized='external'\n    )\n}}\n\nWITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'nba_latest_results' ) }}\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'nba_latest_results' ) }}\n    GROUP BY ALL\n),\n\n\ncte_favored_wins AS (\n    SELECT \n        LR.winning_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'nba_latest_results' ) }} LR\n    INNER JOIN {{ ref( 'nba_results_log' ) }} R ON R.game_id = LR.game_id\n        AND R.favored_team = LR.winning_team\n    GROUP BY ALL\n),\n\ncte_favored_losses AS (\n    SELECT \n        LR.losing_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'nba_latest_results' ) }} LR\n    INNER JOIN {{ ref( 'nba_results_log' ) }} R ON R.game_id = LR.game_id\n        AND R.favored_team = LR.losing_team\n    GROUP BY ALL\n),\n\ncte_avg_opponent_wins AS (\n    SELECT \n        LR.winning_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'nba_latest_results' ) }} LR\n    INNER JOIN {{ ref( 'nba_results_log' ) }} R ON R.game_id = LR.game_id\n        AND ( (LR.winning_team = R.home_team AND R.visiting_team_above_avg = 1)\n            OR (LR.winning_team = R.visiting_team AND R.home_team_above_avg = 1) )\n    GROUP BY ALL\n),\n\ncte_avg_opponent_losses AS (\n    SELECT \n        LR.losing_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'nba_latest_results' ) }} LR\n    INNER JOIN {{ ref( 'nba_results_log' ) }} R ON R.game_id = LR.game_id\n        AND ( (LR.losing_team = R.visiting_team AND R.home_team_above_avg = 1)\n            OR (LR.losing_team = R.home_team AND R.visiting_team_above_avg = 1) )\n    GROUP BY ALL\n),\n\ncte_home_wins AS (\n    SELECT \n        LR.home_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'nba_latest_results' ) }} LR\n    WHERE LR.home_team = LR.winning_team\n    GROUP BY ALL   \n),\n\ncte_home_losses AS (\n    SELECT \n        LR.home_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'nba_latest_results' ) }} LR\n    WHERE LR.home_team = LR.losing_team  \n    GROUP BY ALL  \n)\n\nSELECT\n    T.team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses,\n    COALESCE(FW.wins, 0) AS wins_as_favorite,\n    COALESCE(FL.losses, 0) AS losses_as_favorite,\n    COALESCE(W.wins, 0) - COALESCE(FW.wins, 0) AS wins_as_underdog,\n    COALESCE(L.losses, 0) - COALESCE(FL.losses, 0) AS losses_as_underdog,\n    COALESCE(AW.wins,0) AS wins_vs_good_teams,\n    COALESCE(AL.losses,0) AS losses_vs_good_teams,\n    COALESCE(W.wins, 0) - COALESCE(AW.wins, 0) AS wins_vs_bad_teams,\n    COALESCE(L.losses, 0) - COALESCE(AL.losses, 0) AS losses_vs_bad_teams,\n    COALESCE(HW.wins,0) AS home_wins,\n    COALESCE(HL.losses,0) AS home_losses,\n    COALESCE(W.wins, 0) - COALESCE(HW.wins, 0) AS away_wins,\n    COALESCE(L.losses, 0) - COALESCE(HL.losses, 0) AS away_losses\nFROM {{ ref( 'nba_teams' ) }} T\nLEFT JOIN cte_wins W ON W.winning_team = T.team_long\nLEFT JOIN cte_losses L ON L.losing_team = T.Team_long\nLEFT JOIN cte_favored_wins FW ON FW.winning_team = T.Team_long\nLEFT JOIN cte_favored_losses FL ON FL.losing_team = T.Team_long\nLEFT JOIN cte_avg_opponent_wins AW ON AW.winning_team = T.Team_long\nLEFT JOIN cte_avg_opponent_losses AL ON AL.losing_team = T.Team_long\nLEFT JOIN cte_home_wins HW ON HW.home_team = T.Team_long\nLEFT JOIN cte_home_losses HL ON HL.home_team = T.Team_long", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_results_log", "model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/reg_season_actuals_enriched.sql", "compiled": true, "compiled_code": "\n\nWITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM \"mdsbox\".\"main\".\"nba_latest_results\"\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM \"mdsbox\".\"main\".\"nba_latest_results\"\n    GROUP BY ALL\n),\n\n\ncte_favored_wins AS (\n    SELECT \n        LR.winning_team,\n        COUNT(*) as wins\n    FROM \"mdsbox\".\"main\".\"nba_latest_results\" LR\n    INNER JOIN \"mdsbox\".\"main\".\"nba_results_log\" R ON R.game_id = LR.game_id\n        AND R.favored_team = LR.winning_team\n    GROUP BY ALL\n),\n\ncte_favored_losses AS (\n    SELECT \n        LR.losing_team,\n        COUNT(*) as losses\n    FROM \"mdsbox\".\"main\".\"nba_latest_results\" LR\n    INNER JOIN \"mdsbox\".\"main\".\"nba_results_log\" R ON R.game_id = LR.game_id\n        AND R.favored_team = LR.losing_team\n    GROUP BY ALL\n),\n\ncte_avg_opponent_wins AS (\n    SELECT \n        LR.winning_team,\n        COUNT(*) as wins\n    FROM \"mdsbox\".\"main\".\"nba_latest_results\" LR\n    INNER JOIN \"mdsbox\".\"main\".\"nba_results_log\" R ON R.game_id = LR.game_id\n        AND ( (LR.winning_team = R.home_team AND R.visiting_team_above_avg = 1)\n            OR (LR.winning_team = R.visiting_team AND R.home_team_above_avg = 1) )\n    GROUP BY ALL\n),\n\ncte_avg_opponent_losses AS (\n    SELECT \n        LR.losing_team,\n        COUNT(*) as losses\n    FROM \"mdsbox\".\"main\".\"nba_latest_results\" LR\n    INNER JOIN \"mdsbox\".\"main\".\"nba_results_log\" R ON R.game_id = LR.game_id\n        AND ( (LR.losing_team = R.visiting_team AND R.home_team_above_avg = 1)\n            OR (LR.losing_team = R.home_team AND R.visiting_team_above_avg = 1) )\n    GROUP BY ALL\n),\n\ncte_home_wins AS (\n    SELECT \n        LR.home_team,\n        COUNT(*) as wins\n    FROM \"mdsbox\".\"main\".\"nba_latest_results\" LR\n    WHERE LR.home_team = LR.winning_team\n    GROUP BY ALL   \n),\n\ncte_home_losses AS (\n    SELECT \n        LR.home_team,\n        COUNT(*) as losses\n    FROM \"mdsbox\".\"main\".\"nba_latest_results\" LR\n    WHERE LR.home_team = LR.losing_team  \n    GROUP BY ALL  \n)\n\nSELECT\n    T.team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses,\n    COALESCE(FW.wins, 0) AS wins_as_favorite,\n    COALESCE(FL.losses, 0) AS losses_as_favorite,\n    COALESCE(W.wins, 0) - COALESCE(FW.wins, 0) AS wins_as_underdog,\n    COALESCE(L.losses, 0) - COALESCE(FL.losses, 0) AS losses_as_underdog,\n    COALESCE(AW.wins,0) AS wins_vs_good_teams,\n    COALESCE(AL.losses,0) AS losses_vs_good_teams,\n    COALESCE(W.wins, 0) - COALESCE(AW.wins, 0) AS wins_vs_bad_teams,\n    COALESCE(L.losses, 0) - COALESCE(AL.losses, 0) AS losses_vs_bad_teams,\n    COALESCE(HW.wins,0) AS home_wins,\n    COALESCE(HL.losses,0) AS home_losses,\n    COALESCE(W.wins, 0) - COALESCE(HW.wins, 0) AS away_wins,\n    COALESCE(L.losses, 0) - COALESCE(HL.losses, 0) AS away_losses\nFROM \"mdsbox\".\"main\".\"nba_teams\" T\nLEFT JOIN cte_wins W ON W.winning_team = T.team_long\nLEFT JOIN cte_losses L ON L.losing_team = T.Team_long\nLEFT JOIN cte_favored_wins FW ON FW.winning_team = T.Team_long\nLEFT JOIN cte_favored_losses FL ON FL.losing_team = T.Team_long\nLEFT JOIN cte_avg_opponent_wins AW ON AW.winning_team = T.Team_long\nLEFT JOIN cte_avg_opponent_losses AL ON AL.losing_team = T.Team_long\nLEFT JOIN cte_home_wins HW ON HW.home_team = T.Team_long\nLEFT JOIN cte_home_losses HL ON HL.home_team = T.Team_long", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.reg_season_predictions": {"database": "mdsbox", "schema": "main", "name": "reg_season_predictions", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/reg_season_predictions.sql", "original_file_path": "models/nba/analysis/reg_season_predictions.sql", "unique_id": "model.sports_sims.reg_season_predictions", "fqn": ["sports_sims", "nba", "analysis", "reg_season_predictions"], "alias": "reg_season_predictions", "checksum": {"name": "sha256", "checksum": "9ec6fb88113b2ed161f1199f7ff937c86823a2abe7ffd6fc3223ad3b5d729154"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/reg_season_predictions.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711283.4977841, "relation_name": "\"mdsbox\".\"main\".\"reg_season_predictions\"", "raw_code": "with cte_team_scores AS (\n    from {{ ref( 'nba_results_by_team') }}\n    SELECT\n        team,\n        avg(score) as pts\n    group by all\n),\ncte_interim_calcs AS (\nSELECT \n    game_id,\n    date,\n    home_team,\n    home_team_elo_rating,\n    visiting_team,\n    visiting_team_elo_rating,\n    home_team_win_probability,\n    winning_team,\n    include_actuals,\n    COUNT(*) AS occurances,\n    {{ american_odds( 'home_team_win_probability/10000' ) }} AS american_odds,\n    type,\n    actual_home_team_score,\n    actual_visiting_team_score,\n    CASE WHEN actual_home_team_score > actual_visiting_team_score \n        THEN actual_margin*-1 ELSE actual_margin END AS actual_margin,\n    (H.pts + V.pts) / 2.0 AS avg_score,\n    ROUND( CASE\n        WHEN home_team_win_probability/10000 >= 0.50 THEN ROUND( -30.564 * home_team_win_probability/10000 + 14.763, 1 )\n        ELSE ROUND( -30.564 * home_team_win_probability/10000 + 15.801, 1 )\n    END * 2, 0 ) / 2.0 AS implied_line\nFROM {{ ref( 'reg_season_simulator' ) }} S\nLEFT JOIN cte_team_scores H ON H.team = S.home_team\nLEFT JOIN cte_team_scores V ON V.team = S.visiting_team\nGROUP BY ALL\n),\ncte_final AS (\nSELECT\n    *,\n    ROUND(avg_score - (implied_line / 2.0),0) AS home_score,\n    ROUND(avg_score + (implied_line / 2.0),0) AS visiting_score\nFROM cte_interim_calcs\n)\nSELECT *,\n    home_team || ' ' || home_score::int || ' - ' || visiting_score::int || ' ' || visiting_team AS predicted_score\nFROM cte_final", "language": "sql", "refs": [{"name": "nba_results_by_team", "package": null, "version": null}, {"name": "reg_season_simulator", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.american_odds"], "nodes": ["model.sports_sims.nba_results_by_team", "model.sports_sims.reg_season_simulator"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/reg_season_predictions.sql", "compiled": true, "compiled_code": "with cte_team_scores AS (\n    from \"mdsbox\".\"main\".\"nba_results_by_team\"\n    SELECT\n        team,\n        avg(score) as pts\n    group by all\n),\ncte_interim_calcs AS (\nSELECT \n    game_id,\n    date,\n    home_team,\n    home_team_elo_rating,\n    visiting_team,\n    visiting_team_elo_rating,\n    home_team_win_probability,\n    winning_team,\n    include_actuals,\n    COUNT(*) AS occurances,\n    CASE WHEN home_team_win_probability/10000 >= 0.5 \n        THEN '-' || ROUND( home_team_win_probability/10000 / ( 1.0 - home_team_win_probability/10000 ) * 100 )::int\n        ELSE '+' || ((( 1.0 - home_team_win_probability/10000 ) / (home_team_win_probability/10000::real ) * 100)::int)\n    END AS american_odds,\n    type,\n    actual_home_team_score,\n    actual_visiting_team_score,\n    CASE WHEN actual_home_team_score > actual_visiting_team_score \n        THEN actual_margin*-1 ELSE actual_margin END AS actual_margin,\n    (H.pts + V.pts) / 2.0 AS avg_score,\n    ROUND( CASE\n        WHEN home_team_win_probability/10000 >= 0.50 THEN ROUND( -30.564 * home_team_win_probability/10000 + 14.763, 1 )\n        ELSE ROUND( -30.564 * home_team_win_probability/10000 + 15.801, 1 )\n    END * 2, 0 ) / 2.0 AS implied_line\nFROM \"mdsbox\".\"main\".\"reg_season_simulator\" S\nLEFT JOIN cte_team_scores H ON H.team = S.home_team\nLEFT JOIN cte_team_scores V ON V.team = S.visiting_team\nGROUP BY ALL\n),\ncte_final AS (\nSELECT\n    *,\n    ROUND(avg_score - (implied_line / 2.0),0) AS home_score,\n    ROUND(avg_score + (implied_line / 2.0),0) AS visiting_score\nFROM cte_interim_calcs\n)\nSELECT *,\n    home_team || ' ' || home_score::int || ' - ' || visiting_score::int || ' ' || visiting_team AS predicted_score\nFROM cte_final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playoff_summary": {"database": "mdsbox", "schema": "main", "name": "playoff_summary", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/playoff_summary.sql", "original_file_path": "models/nba/analysis/playoff_summary.sql", "unique_id": "model.sports_sims.playoff_summary", "fqn": ["sports_sims", "nba", "analysis", "playoff_summary"], "alias": "playoff_summary", "checksum": {"name": "sha256", "checksum": "ec683b9b1fa3adabb82f68ccd11c2c04d42436a0a6ca64c601a93366bc13db70"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/playoff_summary.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711283.5038295, "relation_name": "\"mdsbox\".\"main\".\"playoff_summary\"", "raw_code": "WITH cte_playoffs_r1 AS (\n    SELECT\n        winning_team,\n        COUNT(*) AS made_playoffs\n    FROM {{ ref( 'initialize_seeding' ) }}\n    GROUP BY ALL\n),\n\ncte_playoffs_r2 AS (\n    SELECT\n        winning_team,\n        COUNT(*) AS made_conf_semis\n    FROM {{ ref( 'playoff_sim_r1' ) }}\n    GROUP BY ALL\n),\n\ncte_playoffs_r3 AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS made_conf_finals\n    FROM {{ ref( 'playoff_sim_r2' ) }}\n    GROUP BY ALL\n),\n\ncte_playoffs_r4 AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS made_finals\n    FROM {{ ref( 'playoff_sim_r3' ) }}\n    GROUP BY ALL\n),\n\ncte_playoffs_finals AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS won_finals\n    FROM {{ ref( 'playoff_sim_r4' ) }}\n    GROUP BY ALL\n)\n\nSELECT\n    T.team,\n    R1.made_playoffs,\n    R2.made_conf_semis,\n    R3.made_conf_finals,\n    R4.made_finals,\n    F.won_finals\nFROM {{ ref( 'nba_teams' ) }} T\nLEFT JOIN cte_playoffs_r1 R1 ON R1.winning_team = T.team\nLEFT JOIN cte_playoffs_r2 R2 ON R2.winning_team = T.team\nLEFT JOIN cte_playoffs_r3 R3 ON R3.winning_team = T.team\nLEFT JOIN cte_playoffs_r4 R4 ON R4.winning_team = T.team\nLEFT JOIN cte_playoffs_finals F ON F.winning_team = T.team", "language": "sql", "refs": [{"name": "initialize_seeding", "package": null, "version": null}, {"name": "playoff_sim_r1", "package": null, "version": null}, {"name": "playoff_sim_r2", "package": null, "version": null}, {"name": "playoff_sim_r3", "package": null, "version": null}, {"name": "playoff_sim_r4", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.initialize_seeding", "model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4", "model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/playoff_summary.sql", "compiled": true, "compiled_code": "WITH cte_playoffs_r1 AS (\n    SELECT\n        winning_team,\n        COUNT(*) AS made_playoffs\n    FROM \"mdsbox\".\"main\".\"initialize_seeding\"\n    GROUP BY ALL\n),\n\ncte_playoffs_r2 AS (\n    SELECT\n        winning_team,\n        COUNT(*) AS made_conf_semis\n    FROM \"mdsbox\".\"main\".\"playoff_sim_r1\"\n    GROUP BY ALL\n),\n\ncte_playoffs_r3 AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS made_conf_finals\n    FROM \"mdsbox\".\"main\".\"playoff_sim_r2\"\n    GROUP BY ALL\n),\n\ncte_playoffs_r4 AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS made_finals\n    FROM \"mdsbox\".\"main\".\"playoff_sim_r3\"\n    GROUP BY ALL\n),\n\ncte_playoffs_finals AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS won_finals\n    FROM \"mdsbox\".\"main\".\"playoff_sim_r4\"\n    GROUP BY ALL\n)\n\nSELECT\n    T.team,\n    R1.made_playoffs,\n    R2.made_conf_semis,\n    R3.made_conf_finals,\n    R4.made_finals,\n    F.won_finals\nFROM \"mdsbox\".\"main\".\"nba_teams\" T\nLEFT JOIN cte_playoffs_r1 R1 ON R1.winning_team = T.team\nLEFT JOIN cte_playoffs_r2 R2 ON R2.winning_team = T.team\nLEFT JOIN cte_playoffs_r3 R3 ON R3.winning_team = T.team\nLEFT JOIN cte_playoffs_r4 R4 ON R4.winning_team = T.team\nLEFT JOIN cte_playoffs_finals F ON F.winning_team = T.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.tournament_end": {"database": "mdsbox", "schema": "main", "name": "tournament_end", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/tournament_end.sql", "original_file_path": "models/nba/analysis/tournament_end.sql", "unique_id": "model.sports_sims.tournament_end", "fqn": ["sports_sims", "nba", "analysis", "tournament_end"], "alias": "tournament_end", "checksum": {"name": "sha256", "checksum": "42d420535e3d56a94961602bb42baba839665b25b90d701c4501addc35cccb0d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/tournament_end.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711283.5062387, "relation_name": "\"mdsbox\".\"main\".\"tournament_end\"", "raw_code": "WITH cte_wins AS (\n    SELECT\n        S.scenario_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_conf\n            ELSE S.visiting_conf\n        END AS conf,\n        COUNT(*) AS wins,\n        SUM( CASE WHEN include_actuals = true THEN 1 ELSE 0 END) AS actual_wins\n    FROM {{ ref( 'reg_season_simulator' ) }} S\n    WHERE S.type = 'tournament'\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT\n        S.scenario_id,\n        CASE WHEN S.home_team = S.winning_team \n            THEN S.visiting_team ELSE S.home_team\n        END AS losing_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_conf\n            ELSE S.home_conf\n        END AS conf,\n        COUNT(*) AS losses,\n        SUM( CASE WHEN include_actuals = true THEN 1 ELSE 0 END) AS actual_losses\n    FROM {{ ref( 'reg_season_simulator' ) }} S\n    WHERE S.type = 'tournament'\n    GROUP BY ALL\n),\n\ncte_results_with_group AS (\n    SELECT \n        scenarios.scenario_id,\n        T.team as winning_team,\n        T.conf,\n        COALESCE(W.wins,0) AS wins,\n        COALESCE(L.losses,0) as losses,\n        T.tournament_group,\n        COALESCE(W.actual_wins,0) AS actual_wins,\n        COALESCE(L.actual_losses,0) as actual_losses\n    FROM {{ ref( 'nba_teams') }} T \n    LEFT JOIN ( \n        SELECT I.generate_series AS scenario_id\n        FROM generate_series(1, {{ var( 'scenarios' ) }} ) AS I) AS scenarios ON 1=1\n    LEFT JOIN cte_wins W ON T.team = W.winning_team AND scenarios.scenario_id = W.scenario_id\n    LEFT JOIN cte_losses L ON T.team = L.losing_team AND scenarios.scenario_id = L.scenario_id\n),\n\ncte_home_margin AS (\n    SELECT\n        T.Team,\n        COALESCE(SUM(COALESCE(-H.actual_margin,-H.implied_line)),0) AS home_pt_diff\n    FROM {{ ref( 'nba_teams') }} T \n    LEFT JOIN {{ ref( 'reg_season_predictions' ) }} H ON H.home_team = T.team AND H.type = 'tournament' \n        -- conditional join on reg season predictions\n        AND CASE WHEN H.actual_margin IS NULL THEN H.winning_team = H.home_team ELSE 1=1 END\n    GROUP BY ALL\n),\n\ncte_visitor_margin AS (\n    SELECT\n        T.Team,\n        COALESCE(SUM(COALESCE(V.actual_margin,V.implied_line)),0) AS visitor_pt_diff\n    FROM {{ ref( 'nba_teams') }} T \n    LEFT JOIN {{ ref( 'reg_season_predictions' ) }} V ON V.visiting_team = T.team AND V.type = 'tournament'\n        -- conditional join on reg season predictions\n        AND CASE WHEN V.actual_margin IS NULL THEN V.winning_team = V.home_team ELSE 1=1 END\n    GROUP BY ALL\n),\n\ncte_head_to_head AS (\n    SELECT\n        g.scenario_id,\n        g.winning_team,\n        CASE\n            WHEN g.winning_team = g.home_team THEN g.visiting_team\n            ELSE g.home_team\n        END AS losing_team\n    FROM {{ ref( 'reg_season_simulator' ) }} g\n    WHERE type = 'tournament'\n),\n\ncte_head_to_head_wins AS (\n    SELECT\n        h.scenario_id,\n        h.winning_team AS team,\n        COUNT(*) AS h2h_wins\n    FROM cte_head_to_head h\n    INNER JOIN cte_wins w ON h.winning_team = w.winning_team AND h.scenario_id = w.scenario_id\n        AND h.losing_team IN (\n            SELECT winning_team \n            FROM cte_wins \n            WHERE wins = w.wins AND winning_team != w.winning_team\n                AND scenario_id = w.scenario_id\n        )\n    GROUP BY ALL\n),\n\ncte_fuzz AS (\n    SELECT\n        R.scenario_id,\n        R.winning_team,\n        ((R.wins-R.actual_wins) * floor(random() * 5)) + ((R.losses-R.actual_losses) * floor(random() * -5)) AS fuzz\n    FROM cte_results_with_group R\n),\n\n/* tiebreaking criteria: https://www.nba.com/news/in-season-tournament-101\n\n  \u2022 Head-to-head record in the Group Stage;\n  \u2022 Point differential in the Group Stage;\n  \u2022 Total points scored in the Group Stage;\n  \u2022 Regular season record from the 2022-23 NBA regular season; and\n  \u2022 Random drawing (in the unlikely scenario that two or more teams are still tied following the previous tiebreakers).\n\n*/\n\ncte_ranked_wins AS (\n    SELECT\n        R.*,\n        H2H.h2h_wins,\n        -- fuzzing pt diff by scenario via brute force (7 pt swing either way)\n        home_pt_diff + visitor_pt_diff + F.fuzz AS pt_diff,\n        --no tiebreaker, so however row number handles order ties will need to be dealt with\n        ROW_NUMBER() OVER (PARTITION BY R.scenario_id, tournament_group ORDER BY wins DESC, h2h_wins DESC, pt_diff DESC ) AS group_rank\n    FROM cte_results_with_group R\n    LEFT JOIN cte_home_margin H ON H.team = R.winning_team\n    LEFT JOIN cte_visitor_margin V ON V.team = R.winning_team\n    LEFT JOIN cte_head_to_head_wins H2H ON H2H.team = R.winning_team AND H2H.scenario_id = R.scenario_id\n    LEFT JOIN cte_fuzz F ON F.scenario_id = R.scenario_id AND F.winning_team = R.winning_team\n),\n\ncte_wildcard AS (\n    SELECT\n        scenario_id,\n        winning_team,\n        conf,\n        wins,\n        pt_diff,\n        group_rank,\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, conf ORDER BY wins DESC, pt_diff DESC, random() ) AS wildcard_rank\n    FROM cte_ranked_wins R\n    WHERE group_rank = 2\n),\n\ncte_made_tournament AS (\n    SELECT\n        W.*,\n        CASE\n            WHEN W.group_rank = 1 THEN 1\n            ELSE 0\n        END AS made_tournament,\n        CASE\n            WHEN WC.wildcard_rank = 1 AND WC.wildcard_rank IS NOT NULL THEN 1\n            ELSE 0\n        END AS made_wildcard,\n        W.tournament_group || '-' || W.group_rank::text AS seed\n    FROM cte_ranked_wins W\n    LEFT JOIN cte_wildcard WC ON WC.winning_team = W.winning_team and WC.scenario_id = W.scenario_id\n)\n\nSELECT \n    MP.*,\n    LE.elo_rating,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_made_tournament MP\nLEFT JOIN {{ ref( 'nba_latest_elo' ) }} LE ON LE.team = MP.winning_team", "language": "sql", "refs": [{"name": "reg_season_simulator", "package": null, "version": null}, {"name": "reg_season_simulator", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "reg_season_predictions", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "reg_season_predictions", "package": null, "version": null}, {"name": "reg_season_simulator", "package": null, "version": null}, {"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_simulator", "model.sports_sims.nba_teams", "model.sports_sims.reg_season_predictions", "model.sports_sims.nba_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/tournament_end.sql", "compiled": true, "compiled_code": "WITH cte_wins AS (\n    SELECT\n        S.scenario_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_conf\n            ELSE S.visiting_conf\n        END AS conf,\n        COUNT(*) AS wins,\n        SUM( CASE WHEN include_actuals = true THEN 1 ELSE 0 END) AS actual_wins\n    FROM \"mdsbox\".\"main\".\"reg_season_simulator\" S\n    WHERE S.type = 'tournament'\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT\n        S.scenario_id,\n        CASE WHEN S.home_team = S.winning_team \n            THEN S.visiting_team ELSE S.home_team\n        END AS losing_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_conf\n            ELSE S.home_conf\n        END AS conf,\n        COUNT(*) AS losses,\n        SUM( CASE WHEN include_actuals = true THEN 1 ELSE 0 END) AS actual_losses\n    FROM \"mdsbox\".\"main\".\"reg_season_simulator\" S\n    WHERE S.type = 'tournament'\n    GROUP BY ALL\n),\n\ncte_results_with_group AS (\n    SELECT \n        scenarios.scenario_id,\n        T.team as winning_team,\n        T.conf,\n        COALESCE(W.wins,0) AS wins,\n        COALESCE(L.losses,0) as losses,\n        T.tournament_group,\n        COALESCE(W.actual_wins,0) AS actual_wins,\n        COALESCE(L.actual_losses,0) as actual_losses\n    FROM \"mdsbox\".\"main\".\"nba_teams\" T \n    LEFT JOIN ( \n        SELECT I.generate_series AS scenario_id\n        FROM generate_series(1, 10000 ) AS I) AS scenarios ON 1=1\n    LEFT JOIN cte_wins W ON T.team = W.winning_team AND scenarios.scenario_id = W.scenario_id\n    LEFT JOIN cte_losses L ON T.team = L.losing_team AND scenarios.scenario_id = L.scenario_id\n),\n\ncte_home_margin AS (\n    SELECT\n        T.Team,\n        COALESCE(SUM(COALESCE(-H.actual_margin,-H.implied_line)),0) AS home_pt_diff\n    FROM \"mdsbox\".\"main\".\"nba_teams\" T \n    LEFT JOIN \"mdsbox\".\"main\".\"reg_season_predictions\" H ON H.home_team = T.team AND H.type = 'tournament' \n        -- conditional join on reg season predictions\n        AND CASE WHEN H.actual_margin IS NULL THEN H.winning_team = H.home_team ELSE 1=1 END\n    GROUP BY ALL\n),\n\ncte_visitor_margin AS (\n    SELECT\n        T.Team,\n        COALESCE(SUM(COALESCE(V.actual_margin,V.implied_line)),0) AS visitor_pt_diff\n    FROM \"mdsbox\".\"main\".\"nba_teams\" T \n    LEFT JOIN \"mdsbox\".\"main\".\"reg_season_predictions\" V ON V.visiting_team = T.team AND V.type = 'tournament'\n        -- conditional join on reg season predictions\n        AND CASE WHEN V.actual_margin IS NULL THEN V.winning_team = V.home_team ELSE 1=1 END\n    GROUP BY ALL\n),\n\ncte_head_to_head AS (\n    SELECT\n        g.scenario_id,\n        g.winning_team,\n        CASE\n            WHEN g.winning_team = g.home_team THEN g.visiting_team\n            ELSE g.home_team\n        END AS losing_team\n    FROM \"mdsbox\".\"main\".\"reg_season_simulator\" g\n    WHERE type = 'tournament'\n),\n\ncte_head_to_head_wins AS (\n    SELECT\n        h.scenario_id,\n        h.winning_team AS team,\n        COUNT(*) AS h2h_wins\n    FROM cte_head_to_head h\n    INNER JOIN cte_wins w ON h.winning_team = w.winning_team AND h.scenario_id = w.scenario_id\n        AND h.losing_team IN (\n            SELECT winning_team \n            FROM cte_wins \n            WHERE wins = w.wins AND winning_team != w.winning_team\n                AND scenario_id = w.scenario_id\n        )\n    GROUP BY ALL\n),\n\ncte_fuzz AS (\n    SELECT\n        R.scenario_id,\n        R.winning_team,\n        ((R.wins-R.actual_wins) * floor(random() * 5)) + ((R.losses-R.actual_losses) * floor(random() * -5)) AS fuzz\n    FROM cte_results_with_group R\n),\n\n/* tiebreaking criteria: https://www.nba.com/news/in-season-tournament-101\n\n  \u2022 Head-to-head record in the Group Stage;\n  \u2022 Point differential in the Group Stage;\n  \u2022 Total points scored in the Group Stage;\n  \u2022 Regular season record from the 2022-23 NBA regular season; and\n  \u2022 Random drawing (in the unlikely scenario that two or more teams are still tied following the previous tiebreakers).\n\n*/\n\ncte_ranked_wins AS (\n    SELECT\n        R.*,\n        H2H.h2h_wins,\n        -- fuzzing pt diff by scenario via brute force (7 pt swing either way)\n        home_pt_diff + visitor_pt_diff + F.fuzz AS pt_diff,\n        --no tiebreaker, so however row number handles order ties will need to be dealt with\n        ROW_NUMBER() OVER (PARTITION BY R.scenario_id, tournament_group ORDER BY wins DESC, h2h_wins DESC, pt_diff DESC ) AS group_rank\n    FROM cte_results_with_group R\n    LEFT JOIN cte_home_margin H ON H.team = R.winning_team\n    LEFT JOIN cte_visitor_margin V ON V.team = R.winning_team\n    LEFT JOIN cte_head_to_head_wins H2H ON H2H.team = R.winning_team AND H2H.scenario_id = R.scenario_id\n    LEFT JOIN cte_fuzz F ON F.scenario_id = R.scenario_id AND F.winning_team = R.winning_team\n),\n\ncte_wildcard AS (\n    SELECT\n        scenario_id,\n        winning_team,\n        conf,\n        wins,\n        pt_diff,\n        group_rank,\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, conf ORDER BY wins DESC, pt_diff DESC, random() ) AS wildcard_rank\n    FROM cte_ranked_wins R\n    WHERE group_rank = 2\n),\n\ncte_made_tournament AS (\n    SELECT\n        W.*,\n        CASE\n            WHEN W.group_rank = 1 THEN 1\n            ELSE 0\n        END AS made_tournament,\n        CASE\n            WHEN WC.wildcard_rank = 1 AND WC.wildcard_rank IS NOT NULL THEN 1\n            ELSE 0\n        END AS made_wildcard,\n        W.tournament_group || '-' || W.group_rank::text AS seed\n    FROM cte_ranked_wins W\n    LEFT JOIN cte_wildcard WC ON WC.winning_team = W.winning_team and WC.scenario_id = W.scenario_id\n)\n\nSELECT \n    MP.*,\n    LE.elo_rating,\n    0 AS sim_start_game_id\nFROM cte_made_tournament MP\nLEFT JOIN \"mdsbox\".\"main\".\"nba_latest_elo\" LE ON LE.team = MP.winning_team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_raw_results": {"database": "mdsbox", "schema": "main", "name": "nba_raw_results", "resource_type": "model", "package_name": "sports_sims", "path": "nba/raw/nba_raw_results.sql", "original_file_path": "models/nba/raw/nba_raw_results.sql", "unique_id": "model.sports_sims.nba_raw_results", "fqn": ["sports_sims", "nba", "raw", "nba_raw_results"], "alias": "nba_raw_results", "checksum": {"name": "sha256", "checksum": "8b9699655c1c44b9b6b03960f3744fafbe727d4d4716a1d5c984f8e4753e3a8b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/raw/nba_raw_results.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "external", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "created_at": 1703711283.5126905, "relation_name": "\"mdsbox\".\"main\".\"nba_raw_results\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet\"\n    )\n}}\n\nWITH cte_base AS (\n    SELECT * FROM {{ source( 'nba','nba_results' ) }}\n)\n\nSELECT\n    strptime(\"Date\",'%a %b %-d %Y')::date as \"date\",\n    \"Start (ET)\" as \"Start (ET)\",\n    \"Visitor/Neutral\" as \"VisTm\",\n    PTS::int as visiting_team_score,\n    \"Home/Neutral\" as \"HomeTm\",\n    PTS_1::int as home_team_score,\n    \"Attend.\" as \"Attend.\",\n    Arena as Arena,\n    Notes as Notes,\n    CASE WHEN visiting_team_score > home_team_score \n        THEN VisTm\n        ELSE HomeTm\n    END AS Winner,\n    CASE WHEN visiting_team_score > home_team_score \n        THEN HomeTm\n        ELSE VisTm\n    END AS Loser,\n    CASE WHEN visiting_team_score > home_team_score \n        THEN visiting_team_score\n        ELSE home_team_score\n    END AS Winner_Pts,\n    CASE WHEN visiting_team_score > home_team_score \n        THEN home_team_score\n        ELSE visiting_team_score\n    END AS Loser_Pts\nFROM cte_base", "language": "sql", "refs": [], "sources": [["nba", "nba_results"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba.nba_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/raw/nba_raw_results.sql", "compiled": true, "compiled_code": "\n\nWITH cte_base AS (\n    SELECT * FROM '../data/nba/nba_results.csv'\n)\n\nSELECT\n    strptime(\"Date\",'%a %b %-d %Y')::date as \"date\",\n    \"Start (ET)\" as \"Start (ET)\",\n    \"Visitor/Neutral\" as \"VisTm\",\n    PTS::int as visiting_team_score,\n    \"Home/Neutral\" as \"HomeTm\",\n    PTS_1::int as home_team_score,\n    \"Attend.\" as \"Attend.\",\n    Arena as Arena,\n    Notes as Notes,\n    CASE WHEN visiting_team_score > home_team_score \n        THEN VisTm\n        ELSE HomeTm\n    END AS Winner,\n    CASE WHEN visiting_team_score > home_team_score \n        THEN HomeTm\n        ELSE VisTm\n    END AS Loser,\n    CASE WHEN visiting_team_score > home_team_score \n        THEN visiting_team_score\n        ELSE home_team_score\n    END AS Winner_Pts,\n    CASE WHEN visiting_team_score > home_team_score \n        THEN home_team_score\n        ELSE visiting_team_score\n    END AS Loser_Pts\nFROM cte_base", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_raw_xf_series_to_seed": {"database": "mdsbox", "schema": "main", "name": "nba_raw_xf_series_to_seed", "resource_type": "model", "package_name": "sports_sims", "path": "nba/raw/nba_raw_xf_series_to_seed.sql", "original_file_path": "models/nba/raw/nba_raw_xf_series_to_seed.sql", "unique_id": "model.sports_sims.nba_raw_xf_series_to_seed", "fqn": ["sports_sims", "nba", "raw", "nba_raw_xf_series_to_seed"], "alias": "nba_raw_xf_series_to_seed", "checksum": {"name": "sha256", "checksum": "0ec2b962bb2b1b42de84bd0b4208cb1770ad30f4e1c186b2b0d09a310ed96818"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/raw/nba_raw_xf_series_to_seed.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "external", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "created_at": 1703711284.130082, "relation_name": "\"mdsbox\".\"main\".\"nba_raw_xf_series_to_seed\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet\"\n    )\n}}\n\nSELECT *\nFROM {{ source( 'nba', 'xf_series_to_seed' ) }}\nGROUP BY ALL", "language": "sql", "refs": [], "sources": [["nba", "xf_series_to_seed"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba.xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/raw/nba_raw_xf_series_to_seed.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM '../data/nba/xf_series_to_seed.csv'\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_raw_schedule": {"database": "mdsbox", "schema": "main", "name": "nba_raw_schedule", "resource_type": "model", "package_name": "sports_sims", "path": "nba/raw/nba_raw_schedule.sql", "original_file_path": "models/nba/raw/nba_raw_schedule.sql", "unique_id": "model.sports_sims.nba_raw_schedule", "fqn": ["sports_sims", "nba", "raw", "nba_raw_schedule"], "alias": "nba_raw_schedule", "checksum": {"name": "sha256", "checksum": "6c351c82cce8dc76f82eab10bf6a1feac7684af8c6f3bdc09ace0a1c21a5dd95"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/raw/nba_raw_schedule.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "external", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "created_at": 1703711284.1292596, "relation_name": "\"mdsbox\".\"main\".\"nba_raw_schedule\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet\"\n    )\n}}\n\nSELECT \n    id,\n    type,\n    strptime(\"Year\" || \"Date\",'%Y %b %-d')::date AS \"date\",\n    \"Start (ET)\",\n    \"Visitor/Neutral\" as \"VisTm\",\n    \"Home/Neutral\" as \"HomeTm\",\n    \"Attend.\",\n    arena,\n    notes,\n    series_id\nFROM {{ source( 'nba', 'nba_schedule' ) }}", "language": "sql", "refs": [], "sources": [["nba", "nba_schedule"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba.nba_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/raw/nba_raw_schedule.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    id,\n    type,\n    strptime(\"Year\" || \"Date\",'%Y %b %-d')::date AS \"date\",\n    \"Start (ET)\",\n    \"Visitor/Neutral\" as \"VisTm\",\n    \"Home/Neutral\" as \"HomeTm\",\n    \"Attend.\",\n    arena,\n    notes,\n    series_id\nFROM '../data/nba/nba_schedule.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_raw_team_ratings": {"database": "mdsbox", "schema": "main", "name": "nba_raw_team_ratings", "resource_type": "model", "package_name": "sports_sims", "path": "nba/raw/nba_raw_team_ratings.sql", "original_file_path": "models/nba/raw/nba_raw_team_ratings.sql", "unique_id": "model.sports_sims.nba_raw_team_ratings", "fqn": ["sports_sims", "nba", "raw", "nba_raw_team_ratings"], "alias": "nba_raw_team_ratings", "checksum": {"name": "sha256", "checksum": "04cf55fdac5792690329c240e454590409c89692bf7458cc26993b9b2c28ce17"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/raw/nba_raw_team_ratings.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "external", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "created_at": 1703711284.1296668, "relation_name": "\"mdsbox\".\"main\".\"nba_raw_team_ratings\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet\"\n    )\n}}\n\nSELECT *\nFROM {{ source( 'nba', 'nba_team_ratings' ) }}", "language": "sql", "refs": [], "sources": [["nba", "nba_team_ratings"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba.nba_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/raw/nba_raw_team_ratings.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM '../data/nba/nba_team_ratings.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_latest_elo": {"database": "mdsbox", "schema": "main", "name": "nba_latest_elo", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_latest_elo.sql", "original_file_path": "models/nba/prep/nba_latest_elo.sql", "unique_id": "model.sports_sims.nba_latest_elo", "fqn": ["sports_sims", "nba", "prep", "nba_latest_elo"], "alias": "nba_latest_elo", "checksum": {"name": "sha256", "checksum": "e493e32c1d312cc30c16940022b13a55ce25f04c169b0a8f3857e97f7a1ca142"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_latest_elo.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711284.130561, "relation_name": "\"mdsbox\".\"main\".\"nba_latest_elo\"", "raw_code": "WITH home_rating AS (\n    SELECT home_team as team\n    , max(game_id) game_id\n    , max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n    FROM {{ ref('nba_elo_rollforward') }}\n    GROUP BY ALL\n),\nvisiting_rating AS (\n    SELECT visiting_team as team\n    , max(game_id) game_id\n    , max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n    FROM {{ ref('nba_elo_rollforward') }}\n    GROUP BY ALL\n),\nunion_rating AS (\n    SELECT * FROM home_rating\n    UNION ALL\n    SELECT * FROM visiting_rating\n),\nfinal_rating AS (\n    SELECT team, max_by(elo_rating, game_id) AS elo_rating\n    FROM union_rating\n    GROUP BY ALL\n)\nSELECT \n    f.team as team_long,\n    o.team,\n    f.elo_rating AS elo_rating,\n    o.elo_rating AS original_rating,\n    {{ var('latest_ratings') }} AS latest_ratings\nFROM final_rating f\nINNER JOIN {{ ref('nba_raw_team_ratings') }} o ON f.team = o.team_long", "language": "sql", "refs": [{"name": "nba_elo_rollforward", "package": null, "version": null}, {"name": "nba_elo_rollforward", "package": null, "version": null}, {"name": "nba_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_latest_elo.sql", "compiled": true, "compiled_code": "WITH home_rating AS (\n    SELECT home_team as team\n    , max(game_id) game_id\n    , max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n    FROM \"mdsbox\".\"main\".\"nba_elo_rollforward\"\n    GROUP BY ALL\n),\nvisiting_rating AS (\n    SELECT visiting_team as team\n    , max(game_id) game_id\n    , max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n    FROM \"mdsbox\".\"main\".\"nba_elo_rollforward\"\n    GROUP BY ALL\n),\nunion_rating AS (\n    SELECT * FROM home_rating\n    UNION ALL\n    SELECT * FROM visiting_rating\n),\nfinal_rating AS (\n    SELECT team, max_by(elo_rating, game_id) AS elo_rating\n    FROM union_rating\n    GROUP BY ALL\n)\nSELECT \n    f.team as team_long,\n    o.team,\n    f.elo_rating AS elo_rating,\n    o.elo_rating AS original_rating,\n    True AS latest_ratings\nFROM final_rating f\nINNER JOIN \"mdsbox\".\"main\".\"nba_raw_team_ratings\" o ON f.team = o.team_long", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_ratings": {"database": "mdsbox", "schema": "main", "name": "nba_ratings", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_ratings.sql", "original_file_path": "models/nba/prep/nba_ratings.sql", "unique_id": "model.sports_sims.nba_ratings", "fqn": ["sports_sims", "nba", "prep", "nba_ratings"], "alias": "nba_ratings", "checksum": {"name": "sha256", "checksum": "a05c1ac94c3ef033db3dff42ca94e4d9f3b64fdcd27e9672a3b076666ece82ec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conf": {"name": "conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "elo_rating": {"name": "elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_ratings.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711284.1338701, "relation_name": "\"mdsbox\".\"main\".\"nba_ratings\"", "raw_code": "SELECT\n    orig.team,\n    orig.team_long,\n    orig.conf,\n    CASE\n        WHEN latest.latest_ratings = true AND latest.elo_rating IS NOT NULL THEN latest.elo_rating\n        ELSE orig.elo_rating\n    END AS elo_rating,\n    orig.elo_rating AS original_rating,\n    orig.win_total\nFROM {{ ref( 'nba_raw_team_ratings' ) }} orig\nLEFT JOIN {{ ref( 'nba_latest_elo' ) }} latest ON latest.team = orig.team\nGROUP BY ALL", "language": "sql", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}, {"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_team_ratings", "model.sports_sims.nba_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_ratings.sql", "compiled": true, "compiled_code": "SELECT\n    orig.team,\n    orig.team_long,\n    orig.conf,\n    CASE\n        WHEN latest.latest_ratings = true AND latest.elo_rating IS NOT NULL THEN latest.elo_rating\n        ELSE orig.elo_rating\n    END AS elo_rating,\n    orig.elo_rating AS original_rating,\n    orig.win_total\nFROM \"mdsbox\".\"main\".\"nba_raw_team_ratings\" orig\nLEFT JOIN \"mdsbox\".\"main\".\"nba_latest_elo\" latest ON latest.team = orig.team\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_teams": {"database": "mdsbox", "schema": "main", "name": "nba_teams", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_teams.sql", "original_file_path": "models/nba/prep/nba_teams.sql", "unique_id": "model.sports_sims.nba_teams", "fqn": ["sports_sims", "nba", "prep", "nba_teams"], "alias": "nba_teams", "checksum": {"name": "sha256", "checksum": "3aeccd01c0573fa71452e38d07f7bb668bb578b91a6febff81138d8cb9e9dd1c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_teams.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711284.1355236, "relation_name": "\"mdsbox\".\"main\".\"nba_teams\"", "raw_code": "SELECT\n    R.team_long,\n    R.team,\n    tournament_group,\n    conf\nFROM {{ ref( 'nba_raw_team_ratings' ) }} R", "language": "sql", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_teams.sql", "compiled": true, "compiled_code": "SELECT\n    R.team_long,\n    R.team,\n    tournament_group,\n    conf\nFROM \"mdsbox\".\"main\".\"nba_raw_team_ratings\" R", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_random_num_gen": {"database": "mdsbox", "schema": "main", "name": "nba_random_num_gen", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_random_num_gen.sql", "original_file_path": "models/nba/prep/nba_random_num_gen.sql", "unique_id": "model.sports_sims.nba_random_num_gen", "fqn": ["sports_sims", "nba", "prep", "nba_random_num_gen"], "alias": "nba_random_num_gen", "checksum": {"name": "sha256", "checksum": "2918c4f1cf5537e8ed8eeed8769d5abac3cb6a82afc807d46779d5b284fa3805"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_random_num_gen.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711284.1350164, "relation_name": "\"mdsbox\".\"main\".\"nba_random_num_gen\"", "raw_code": "{{ \n    config(\n        materialized='table'\n) }}\n\nWITH cte_scenario_gen AS (\n    SELECT I.generate_series AS scenario_id\n    FROM generate_series(1, {{ var( 'scenarios' ) }} ) AS I\n)\nSELECT\n    i.scenario_id,\n    S.game_id,\n    (random() * 10000)::smallint AS rand_result,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_scenario_gen AS i\nCROSS JOIN {{ ref( 'nba_schedules' ) }} AS S", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_random_num_gen.sql", "compiled": true, "compiled_code": "\n\nWITH cte_scenario_gen AS (\n    SELECT I.generate_series AS scenario_id\n    FROM generate_series(1, 10000 ) AS I\n)\nSELECT\n    i.scenario_id,\n    S.game_id,\n    (random() * 10000)::smallint AS rand_result,\n    0 AS sim_start_game_id\nFROM cte_scenario_gen AS i\nCROSS JOIN \"mdsbox\".\"main\".\"nba_schedules\" AS S", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_latest_results": {"database": "mdsbox", "schema": "main", "name": "nba_latest_results", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_latest_results.sql", "original_file_path": "models/nba/prep/nba_latest_results.sql", "unique_id": "model.sports_sims.nba_latest_results", "fqn": ["sports_sims", "nba", "prep", "nba_latest_results"], "alias": "nba_latest_results", "checksum": {"name": "sha256", "checksum": "a09bd2a635ccbcb9b4fb1d14ff9ee1bdbf76eac39d5392bf8f54b0b9c7a980ce"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_score": {"name": "home_team_score", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team_score": {"name": "visiting_team_score", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "winning_team": {"name": "winning_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "losing_team": {"name": "losing_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_latest_results.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711284.1323042, "relation_name": "\"mdsbox\".\"main\".\"nba_latest_results\"", "raw_code": "with cte_inner as (\n    SELECT\n        S.id as game_id,\n        S.\"date\" as game_date,\n        S.HomeTm AS home_team, \n        CASE\n            WHEN S.HomeTm = R.Winner THEN R.Winner_Pts\n            ELSE R.Loser_Pts \n        END AS home_team_score,\n        S.VisTm AS visiting_team,\n        CASE\n            WHEN S.VisTm = R.Winner THEN R.Winner_Pts\n            ELSE R.Loser_Pts \n        END AS  visiting_team_score,\n        R.Winner AS winning_team,\n        R.Loser AS losing_team,\n        {{ var('include_actuals') }} AS include_actuals\n    FROM {{ ref( 'nba_raw_schedule' ) }} S\n        LEFT JOIN {{ ref( 'nba_raw_results' ) }} R ON R.\"date\" = S.\"date\"\n            AND (S.VisTm = R.Winner OR S.VisTm = R.Loser)\n    WHERE home_team_score IS NOT NULL \n    GROUP BY ALL\n),\ncte_outer AS (\n    SELECT I.*,\n        CASE\n            WHEN visiting_team_score > home_team_score THEN 1\n            WHEN visiting_team_score = home_team_score THEN 0.5\n            ELSE 0\n        END AS game_result,\n        ABS( visiting_team_score - home_team_score ) as margin,\n        W.team AS winning_team_short,\n        L.team AS losing_team_short\n    FROM cte_inner I\n    LEFT JOIN {{ ref( 'nba_teams' ) }} W ON W.team_long = I.winning_team\n    LEFT JOIN {{ ref( 'nba_teams' ) }} L ON L.team_long = I.losing_team\n)\nSELECT *,\n    CASE\n        WHEN margin < 4 AND game_result = 1 THEN 0.581\n        WHEN margin < 4 AND game_result = 0 THEN 0.419\n        WHEN margin < 6 AND game_result = 1 THEN 0.647\n        WHEN margin < 6 AND game_result = 0 THEN 0.353\n        WHEN margin < 9 AND game_result = 1 THEN 0.745\n        WHEN margin < 9 AND game_result = 0 THEN 0.255\n        WHEN margin < 12 AND game_result = 1 THEN 0.876\n        WHEN margin < 12 AND game_result = 0 THEN 0.124\n        ELSE game_result\n    END AS game_result_v2\nFROM cte_outer", "language": "sql", "refs": [{"name": "nba_raw_schedule", "package": null, "version": null}, {"name": "nba_raw_results", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_schedule", "model.sports_sims.nba_raw_results", "model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_latest_results.sql", "compiled": true, "compiled_code": "with cte_inner as (\n    SELECT\n        S.id as game_id,\n        S.\"date\" as game_date,\n        S.HomeTm AS home_team, \n        CASE\n            WHEN S.HomeTm = R.Winner THEN R.Winner_Pts\n            ELSE R.Loser_Pts \n        END AS home_team_score,\n        S.VisTm AS visiting_team,\n        CASE\n            WHEN S.VisTm = R.Winner THEN R.Winner_Pts\n            ELSE R.Loser_Pts \n        END AS  visiting_team_score,\n        R.Winner AS winning_team,\n        R.Loser AS losing_team,\n        True AS include_actuals\n    FROM \"mdsbox\".\"main\".\"nba_raw_schedule\" S\n        LEFT JOIN \"mdsbox\".\"main\".\"nba_raw_results\" R ON R.\"date\" = S.\"date\"\n            AND (S.VisTm = R.Winner OR S.VisTm = R.Loser)\n    WHERE home_team_score IS NOT NULL \n    GROUP BY ALL\n),\ncte_outer AS (\n    SELECT I.*,\n        CASE\n            WHEN visiting_team_score > home_team_score THEN 1\n            WHEN visiting_team_score = home_team_score THEN 0.5\n            ELSE 0\n        END AS game_result,\n        ABS( visiting_team_score - home_team_score ) as margin,\n        W.team AS winning_team_short,\n        L.team AS losing_team_short\n    FROM cte_inner I\n    LEFT JOIN \"mdsbox\".\"main\".\"nba_teams\" W ON W.team_long = I.winning_team\n    LEFT JOIN \"mdsbox\".\"main\".\"nba_teams\" L ON L.team_long = I.losing_team\n)\nSELECT *,\n    CASE\n        WHEN margin < 4 AND game_result = 1 THEN 0.581\n        WHEN margin < 4 AND game_result = 0 THEN 0.419\n        WHEN margin < 6 AND game_result = 1 THEN 0.647\n        WHEN margin < 6 AND game_result = 0 THEN 0.353\n        WHEN margin < 9 AND game_result = 1 THEN 0.745\n        WHEN margin < 9 AND game_result = 0 THEN 0.255\n        WHEN margin < 12 AND game_result = 1 THEN 0.876\n        WHEN margin < 12 AND game_result = 0 THEN 0.124\n        ELSE game_result\n    END AS game_result_v2\nFROM cte_outer", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_reg_season_actuals": {"database": "mdsbox", "schema": "main", "name": "nba_reg_season_actuals", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_reg_season_actuals.sql", "original_file_path": "models/nba/prep/nba_reg_season_actuals.sql", "unique_id": "model.sports_sims.nba_reg_season_actuals", "fqn": ["sports_sims", "nba", "prep", "nba_reg_season_actuals"], "alias": "nba_reg_season_actuals", "checksum": {"name": "sha256", "checksum": "77059752a0e4893e70ffbce29d396e21385df8eef7e1f8f1e1729ebab1163735"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/prep/nba_reg_season_actuals.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711283.5403857, "relation_name": "\"mdsbox\".\"main\".\"nba_reg_season_actuals\"", "raw_code": "WITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'nba_latest_results' ) }}\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'nba_latest_results' ) }}\n    GROUP BY ALL\n)\n\nSELECT\n    T.team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses\nFROM {{ ref( 'nba_teams' ) }} T\nLEFT JOIN cte_wins W ON W.winning_team = T.team_long\nLEFT JOIN cte_losses L ON L.losing_team = T.Team_long", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_reg_season_actuals.sql", "compiled": true, "compiled_code": "WITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM \"mdsbox\".\"main\".\"nba_latest_results\"\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM \"mdsbox\".\"main\".\"nba_latest_results\"\n    GROUP BY ALL\n)\n\nSELECT\n    T.team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses\nFROM \"mdsbox\".\"main\".\"nba_teams\" T\nLEFT JOIN cte_wins W ON W.winning_team = T.team_long\nLEFT JOIN cte_losses L ON L.losing_team = T.Team_long", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_xf_series_to_seed": {"database": "mdsbox", "schema": "main", "name": "nba_xf_series_to_seed", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_xf_series_to_seed.sql", "original_file_path": "models/nba/prep/nba_xf_series_to_seed.sql", "unique_id": "model.sports_sims.nba_xf_series_to_seed", "fqn": ["sports_sims", "nba", "prep", "nba_xf_series_to_seed"], "alias": "nba_xf_series_to_seed", "checksum": {"name": "sha256", "checksum": "2ccd2c36fc7168f5f5d329de69f7c0fb6dc64dd215644e5d7d429c01b018094b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seed": {"name": "seed", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_xf_series_to_seed.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711284.1367478, "relation_name": "\"mdsbox\".\"main\".\"nba_xf_series_to_seed\"", "raw_code": "SELECT\n    series_id,\n    seed\nFROM {{ ref( 'nba_raw_xf_series_to_seed' ) }}", "language": "sql", "refs": [{"name": "nba_raw_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_xf_series_to_seed.sql", "compiled": true, "compiled_code": "SELECT\n    series_id,\n    seed\nFROM \"mdsbox\".\"main\".\"nba_raw_xf_series_to_seed\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_reg_season_schedule": {"database": "mdsbox", "schema": "main", "name": "nba_reg_season_schedule", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_reg_season_schedule.sql", "original_file_path": "models/nba/prep/nba_reg_season_schedule.sql", "unique_id": "model.sports_sims.nba_reg_season_schedule", "fqn": ["sports_sims", "nba", "prep", "nba_reg_season_schedule"], "alias": "nba_reg_season_schedule", "checksum": {"name": "sha256", "checksum": "8384d5735e51d36dc192b5c8c61e743ba4ee578df0c0a557839e194fd425b179"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_reg_season_schedule.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711284.1346438, "relation_name": "\"mdsbox\".\"main\".\"nba_reg_season_schedule\"", "raw_code": "SELECT\n    S.id AS game_id,\n    S.date as date,\n    CASE WHEN s.notes = 'In-Season Tournament' THEN 'tournament' \n        WHEN s.notes = 'Knockout Rounds' THEN 'knockout'\n        ELSE 'reg_season' END \n    AS type,\n    0 as series_id,\n    V.conf AS visiting_conf,\n    V.team AS visiting_team,\n    COALESCE(R.visiting_team_elo_rating,V.elo_rating::int) AS visiting_team_elo_rating,\n    H.conf AS home_conf,\n    H.team AS home_team,\n    COALESCE(R.home_team_elo_rating,H.elo_rating::int) AS home_team_elo_rating\nFROM {{ ref( 'nba_raw_schedule' ) }} AS S\nLEFT JOIN {{ ref( 'nba_ratings' ) }} V ON V.team_long = S.VisTm\nLEFT JOIN {{ ref( 'nba_ratings' ) }} H ON H.team_long = S.HomeTm\nLEFT JOIN {{ ref( 'nba_elo_rollforward' ) }} R ON R.game_id = S.id\nWHERE S.type = 'reg_season' \nGROUP BY ALL", "language": "sql", "refs": [{"name": "nba_raw_schedule", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_elo_rollforward", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_schedule", "model.sports_sims.nba_ratings", "model.sports_sims.nba_elo_rollforward"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_reg_season_schedule.sql", "compiled": true, "compiled_code": "SELECT\n    S.id AS game_id,\n    S.date as date,\n    CASE WHEN s.notes = 'In-Season Tournament' THEN 'tournament' \n        WHEN s.notes = 'Knockout Rounds' THEN 'knockout'\n        ELSE 'reg_season' END \n    AS type,\n    0 as series_id,\n    V.conf AS visiting_conf,\n    V.team AS visiting_team,\n    COALESCE(R.visiting_team_elo_rating,V.elo_rating::int) AS visiting_team_elo_rating,\n    H.conf AS home_conf,\n    H.team AS home_team,\n    COALESCE(R.home_team_elo_rating,H.elo_rating::int) AS home_team_elo_rating\nFROM \"mdsbox\".\"main\".\"nba_raw_schedule\" AS S\nLEFT JOIN \"mdsbox\".\"main\".\"nba_ratings\" V ON V.team_long = S.VisTm\nLEFT JOIN \"mdsbox\".\"main\".\"nba_ratings\" H ON H.team_long = S.HomeTm\nLEFT JOIN \"mdsbox\".\"main\".\"nba_elo_rollforward\" R ON R.game_id = S.id\nWHERE S.type = 'reg_season' \nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_schedules": {"database": "mdsbox", "schema": "main", "name": "nba_schedules", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_schedules.sql", "original_file_path": "models/nba/prep/nba_schedules.sql", "unique_id": "model.sports_sims.nba_schedules", "fqn": ["sports_sims", "nba", "prep", "nba_schedules"], "alias": "nba_schedules", "checksum": {"name": "sha256", "checksum": "20ed4432dc187a9bcd2629626507c6ff7035e1a479fb9f68fc406130d72464d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_conf": {"name": "visiting_conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team_elo_rating": {"name": "visiting_team_elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_conf": {"name": "home_conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_elo_rating": {"name": "home_team_elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_schedules.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711284.1330276, "relation_name": "\"mdsbox\".\"main\".\"nba_schedules\"", "raw_code": "SELECT\n    *\nFROM {{ ref( 'nba_reg_season_schedule' ) }}\nUNION ALL\nSELECT\n    *\nFROM {{ ref( 'nba_post_season_schedule' ) }}", "language": "sql", "refs": [{"name": "nba_reg_season_schedule", "package": null, "version": null}, {"name": "nba_post_season_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_reg_season_schedule", "model.sports_sims.nba_post_season_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_schedules.sql", "compiled": true, "compiled_code": "SELECT\n    *\nFROM \"mdsbox\".\"main\".\"nba_reg_season_schedule\"\nUNION ALL\nSELECT\n    *\nFROM \"mdsbox\".\"main\".\"nba_post_season_schedule\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_vegas_wins": {"database": "mdsbox", "schema": "main", "name": "nba_vegas_wins", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_vegas_wins.sql", "original_file_path": "models/nba/prep/nba_vegas_wins.sql", "unique_id": "model.sports_sims.nba_vegas_wins", "fqn": ["sports_sims", "nba", "prep", "nba_vegas_wins"], "alias": "nba_vegas_wins", "checksum": {"name": "sha256", "checksum": "b4637c4c8ebaba47ef358d89017704e0ac35b9da1e59ff354535b5c706bedbfb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "win_total": {"name": "win_total", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_vegas_wins.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711284.1360106, "relation_name": "\"mdsbox\".\"main\".\"nba_vegas_wins\"", "raw_code": "SELECT\n    team,\n    win_total::double as win_total\nFROM {{ ref( 'nba_ratings' ) }}\nGROUP BY ALL", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_vegas_wins.sql", "compiled": true, "compiled_code": "SELECT\n    team,\n    win_total::double as win_total\nFROM \"mdsbox\".\"main\".\"nba_ratings\"\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_post_season_schedule": {"database": "mdsbox", "schema": "main", "name": "nba_post_season_schedule", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_post_season_schedule.sql", "original_file_path": "models/nba/prep/nba_post_season_schedule.sql", "unique_id": "model.sports_sims.nba_post_season_schedule", "fqn": ["sports_sims", "nba", "prep", "nba_post_season_schedule"], "alias": "nba_post_season_schedule", "checksum": {"name": "sha256", "checksum": "9e4b1d6c9743bb657c84edfcdd9d20a3a3d535f9128c4a264ffd8775455ded32"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_post_season_schedule.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711284.1342535, "relation_name": "\"mdsbox\".\"main\".\"nba_post_season_schedule\"", "raw_code": "SELECT\n    S.id::int AS game_id,\n    S.date,\n    S.type,\n    S.series_id,\n    NULL AS visiting_conf,\n    S.VisTm AS visiting_team,\n    NULL AS visiting_team_elo_rating,\n    NULL AS home_conf,\n    S.HomeTm AS home_team,\n    NULL AS home_team_elo_rating\nFROM {{ ref( 'nba_raw_schedule' ) }} AS S\n--LEFT JOIN {{ ref( 'nba_ratings' ) }} V ON V.team = S.VisTm\n--LEFT JOIN {{ ref( 'nba_ratings' ) }} H ON H.team = S.HomeTm\n--LEFT JOIN {{ ref( 'nba_elo_rollforward' ) }} R ON R.game_id = S.id\nWHERE S.type <> 'reg_season'\nGROUP BY ALL", "language": "sql", "refs": [{"name": "nba_raw_schedule", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_elo_rollforward", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_schedule", "model.sports_sims.nba_ratings", "model.sports_sims.nba_elo_rollforward"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_post_season_schedule.sql", "compiled": true, "compiled_code": "SELECT\n    S.id::int AS game_id,\n    S.date,\n    S.type,\n    S.series_id,\n    NULL AS visiting_conf,\n    S.VisTm AS visiting_team,\n    NULL AS visiting_team_elo_rating,\n    NULL AS home_conf,\n    S.HomeTm AS home_team,\n    NULL AS home_team_elo_rating\nFROM \"mdsbox\".\"main\".\"nba_raw_schedule\" AS S\n--LEFT JOIN \"mdsbox\".\"main\".\"nba_ratings\" V ON V.team = S.VisTm\n--LEFT JOIN \"mdsbox\".\"main\".\"nba_ratings\" H ON H.team = S.HomeTm\n--LEFT JOIN \"mdsbox\".\"main\".\"nba_elo_rollforward\" R ON R.game_id = S.id\nWHERE S.type <> 'reg_season'\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_results_log": {"database": "mdsbox", "schema": "main", "name": "nba_results_log", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_results_log.sql", "original_file_path": "models/nba/prep/nba_results_log.sql", "unique_id": "model.sports_sims.nba_results_log", "fqn": ["sports_sims", "nba", "prep", "nba_results_log"], "alias": "nba_results_log", "checksum": {"name": "sha256", "checksum": "a46107b1d790fe410ca129e51c7b15ec594a4afa943b296cece74155a0a4e945"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/prep/nba_results_log.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711283.5530589, "relation_name": "\"mdsbox\".\"main\".\"nba_results_log\"", "raw_code": "WITH cte_avg_elo AS (\n   SELECT AVG(elo_rating) AS elo_rating\n   FROM {{ ref( 'nba_latest_elo' ) }}\n)\nSELECT \n   RL.*, \n   A.elo_rating as Avg,\n   CASE WHEN RL.visiting_team_elo_rating > RL.home_team_elo_rating \n      THEN RL.visiting_team ELSE RL.home_team END AS favored_team,\n   CASE WHEN RL.visiting_team_elo_rating > A.elo_rating THEN 1 ELSE 0 END AS visiting_team_above_avg,\n   CASE WHEN RL.home_team_elo_rating > A.elo_rating THEN 1 ELSE 0 END AS home_team_above_avg,\n   CASE WHEN RL.winning_team = RL.home_team THEN RL.visiting_team ELSE RL.home_team END AS losing_team,\n   LR.game_date,\n   LR.home_team_score,\n   LR.visiting_team_score,\n   H.team AS hmTm,\n   V.team AS VsTm,\n   S.type\nFROM  {{ ref( 'nba_elo_rollforward' ) }} RL\nLEFT JOIN cte_avg_elo A ON 1=1\nLEFT JOIN {{ ref( 'nba_latest_results' ) }} LR ON LR.game_id = RL.game_id\nLEFT JOIN {{ ref( 'nba_teams' ) }} H ON H.team_long = RL.home_team\nLEFT JOIN {{ ref( 'nba_teams' ) }} V ON V.team_long = RL.visiting_team \nLEFT JOIN {{ ref( 'nba_schedules' ) }} S ON S.game_id = RL.game_id", "language": "sql", "refs": [{"name": "nba_latest_elo", "package": null, "version": null}, {"name": "nba_elo_rollforward", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_latest_elo", "model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_latest_results", "model.sports_sims.nba_teams", "model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_results_log.sql", "compiled": true, "compiled_code": "WITH cte_avg_elo AS (\n   SELECT AVG(elo_rating) AS elo_rating\n   FROM \"mdsbox\".\"main\".\"nba_latest_elo\"\n)\nSELECT \n   RL.*, \n   A.elo_rating as Avg,\n   CASE WHEN RL.visiting_team_elo_rating > RL.home_team_elo_rating \n      THEN RL.visiting_team ELSE RL.home_team END AS favored_team,\n   CASE WHEN RL.visiting_team_elo_rating > A.elo_rating THEN 1 ELSE 0 END AS visiting_team_above_avg,\n   CASE WHEN RL.home_team_elo_rating > A.elo_rating THEN 1 ELSE 0 END AS home_team_above_avg,\n   CASE WHEN RL.winning_team = RL.home_team THEN RL.visiting_team ELSE RL.home_team END AS losing_team,\n   LR.game_date,\n   LR.home_team_score,\n   LR.visiting_team_score,\n   H.team AS hmTm,\n   V.team AS VsTm,\n   S.type\nFROM  \"mdsbox\".\"main\".\"nba_elo_rollforward\" RL\nLEFT JOIN cte_avg_elo A ON 1=1\nLEFT JOIN \"mdsbox\".\"main\".\"nba_latest_results\" LR ON LR.game_id = RL.game_id\nLEFT JOIN \"mdsbox\".\"main\".\"nba_teams\" H ON H.team_long = RL.home_team\nLEFT JOIN \"mdsbox\".\"main\".\"nba_teams\" V ON V.team_long = RL.visiting_team \nLEFT JOIN \"mdsbox\".\"main\".\"nba_schedules\" S ON S.game_id = RL.game_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_results_by_team": {"database": "mdsbox", "schema": "main", "name": "nba_results_by_team", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_results_by_team.sql", "original_file_path": "models/nba/prep/nba_results_by_team.sql", "unique_id": "model.sports_sims.nba_results_by_team", "fqn": ["sports_sims", "nba", "prep", "nba_results_by_team"], "alias": "nba_results_by_team", "checksum": {"name": "sha256", "checksum": "4d02318cf092dfc67a02ab2852b98743015f57e898af10b16ab05b546c238995"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/prep/nba_results_by_team.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711283.5552313, "relation_name": "\"mdsbox\".\"main\".\"nba_results_by_team\"", "raw_code": "FROM {{ ref( 'nba_results_log' ) }}\nSELECT \n    game_id,\n    'home' as team_type,\n    hmTm as team,\n    home_team as team_long,\n    home_team_score as score,\n    CASE WHEN home_team = winning_team THEN 'WIN' ELSE 'LOSS' END AS game_results,\n    home_team_score - visiting_team_score AS margin,\n    type\nUNION ALL\nFROM {{ ref( 'nba_results_log' ) }}\nSELECT \n    game_id,\n    'visitor' as team_type,\n    VsTm as team,\n    visiting_team as team_long,\n    visiting_team_score as score,\n    CASE WHEN visiting_team = winning_team THEN 'WIN' ELSE 'LOSS' END AS game_results,\n    visiting_team_score - home_team_score AS margin,\n    type", "language": "sql", "refs": [{"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_results_log"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_results_by_team.sql", "compiled": true, "compiled_code": "FROM \"mdsbox\".\"main\".\"nba_results_log\"\nSELECT \n    game_id,\n    'home' as team_type,\n    hmTm as team,\n    home_team as team_long,\n    home_team_score as score,\n    CASE WHEN home_team = winning_team THEN 'WIN' ELSE 'LOSS' END AS game_results,\n    home_team_score - visiting_team_score AS margin,\n    type\nUNION ALL\nFROM \"mdsbox\".\"main\".\"nba_results_log\"\nSELECT \n    game_id,\n    'visitor' as team_type,\n    VsTm as team,\n    visiting_team as team_long,\n    visiting_team_score as score,\n    CASE WHEN visiting_team = winning_team THEN 'WIN' ELSE 'LOSS' END AS game_results,\n    visiting_team_score - home_team_score AS margin,\n    type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playin_sim_r1_end": {"database": "mdsbox", "schema": "main", "name": "playin_sim_r1_end", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playin/playin_sim_r1_end.sql", "original_file_path": "models/nba/simulator/playin/playin_sim_r1_end.sql", "unique_id": "model.sports_sims.playin_sim_r1_end", "fqn": ["sports_sims", "nba", "simulator", "playin", "playin_sim_r1_end"], "alias": "playin_sim_r1_end", "checksum": {"name": "sha256", "checksum": "d23d627248df66cb6d0e47473edf190506c20832be05243813ee6db6aeabf7d3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playin/playin_sim_r1_end.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711283.557589, "relation_name": "\"mdsbox\".\"main\".\"playin_sim_r1_end\"", "raw_code": "WITH cte_playin_details AS (\n    SELECT\n        S.scenario_id,\n        S.game_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS winning_team_elo_rating,\n        S.conf AS conf,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_team\n            ELSE S.home_team\n        END AS losing_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_team_elo_rating\n            ELSE S.home_team_elo_rating\n        END AS losing_team_elo_rating,\n        CASE\n            WHEN S.game_id IN (1231, 1234) THEN 'winner advance'\n            WHEN S.game_id IN (1232, 1235) THEN 'loser eliminated'\n        END AS result\n    FROM {{ ref( 'playin_sim_r1' ) }} S\n)\n\nSELECT\n    *,\n    CASE\n        WHEN game_id IN (1231, 1234) THEN losing_team\n        WHEN game_id IN (1232, 1235) THEN winning_team\n    END AS remaining_team\nFROM cte_playin_details", "language": "sql", "refs": [{"name": "playin_sim_r1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.playin_sim_r1"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playin/playin_sim_r1_end.sql", "compiled": true, "compiled_code": "WITH cte_playin_details AS (\n    SELECT\n        S.scenario_id,\n        S.game_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS winning_team_elo_rating,\n        S.conf AS conf,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_team\n            ELSE S.home_team\n        END AS losing_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_team_elo_rating\n            ELSE S.home_team_elo_rating\n        END AS losing_team_elo_rating,\n        CASE\n            WHEN S.game_id IN (1231, 1234) THEN 'winner advance'\n            WHEN S.game_id IN (1232, 1235) THEN 'loser eliminated'\n        END AS result\n    FROM \"mdsbox\".\"main\".\"playin_sim_r1\" S\n)\n\nSELECT\n    *,\n    CASE\n        WHEN game_id IN (1231, 1234) THEN losing_team\n        WHEN game_id IN (1232, 1235) THEN winning_team\n    END AS remaining_team\nFROM cte_playin_details", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playin_sim_r2": {"database": "mdsbox", "schema": "main", "name": "playin_sim_r2", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playin/playin_sim_r2.sql", "original_file_path": "models/nba/simulator/playin/playin_sim_r2.sql", "unique_id": "model.sports_sims.playin_sim_r2", "fqn": ["sports_sims", "nba", "simulator", "playin", "playin_sim_r2"], "alias": "playin_sim_r2", "checksum": {"name": "sha256", "checksum": "d39fca68ca538a84ae89db24fd551a2838e5d530d4cc3de7a71ad5ac1bcc702b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playin/playin_sim_r2.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711283.5601573, "relation_name": "\"mdsbox\".\"main\".\"playin_sim_r2\"", "raw_code": "SELECT \n    R.scenario_id,\n    S.game_id,\n    S.home_team[7:] AS home_team_id,\n    S.visiting_team[8:] AS visiting_team_id,\n    EV.conf AS conf,\n    EV.remaining_team AS visiting_team,\n    EV.winning_team_elo_rating AS visiting_team_elo_rating,\n    EH.remaining_team AS home_team,\n    EH.losing_team_elo_rating AS home_team_elo_rating,\n    {{ elo_calc( 'EH.losing_team_elo_rating', 'EV.winning_team_elo_rating', var('nba_elo_offset') ) }} as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN {{ elo_calc( 'EH.losing_team_elo_rating', 'EV.winning_team_elo_rating', var('nba_elo_offset') ) }} >= R.rand_result THEN EH.remaining_team\n        ELSE EV.remaining_team\n    END AS winning_team \nFROM {{ ref( 'nba_schedules' ) }} S\n    LEFT JOIN {{ ref( 'nba_random_num_gen' ) }} R ON R.game_id = S.game_id\n    LEFT JOIN {{ ref( 'playin_sim_r1_end' ) }} EH ON R.scenario_id = EH.scenario_id AND EH.game_id = S.home_team[7:]\n    LEFT JOIN {{ ref( 'playin_sim_r1_end' ) }} EV ON R.scenario_id = EV.scenario_id AND EV.game_id = S.visiting_team[8:]\nWHERE S.type = 'playin_r2'", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "playin_sim_r1_end", "package": null, "version": null}, {"name": "playin_sim_r1_end", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc"], "nodes": ["model.sports_sims.nba_schedules", "model.sports_sims.nba_random_num_gen", "model.sports_sims.playin_sim_r1_end"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playin/playin_sim_r2.sql", "compiled": true, "compiled_code": "SELECT \n    R.scenario_id,\n    S.game_id,\n    S.home_team[7:] AS home_team_id,\n    S.visiting_team[8:] AS visiting_team_id,\n    EV.conf AS conf,\n    EV.remaining_team AS visiting_team,\n    EV.winning_team_elo_rating AS visiting_team_elo_rating,\n    EH.remaining_team AS home_team,\n    EH.losing_team_elo_rating AS home_team_elo_rating,\n    ( 1 - (1 / (10 ^ (-( EV.winning_team_elo_rating - EH.losing_team_elo_rating - 70)::real/400)+1))) * 10000 as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN ( 1 - (1 / (10 ^ (-( EV.winning_team_elo_rating - EH.losing_team_elo_rating - 70)::real/400)+1))) * 10000 >= R.rand_result THEN EH.remaining_team\n        ELSE EV.remaining_team\n    END AS winning_team \nFROM \"mdsbox\".\"main\".\"nba_schedules\" S\n    LEFT JOIN \"mdsbox\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN \"mdsbox\".\"main\".\"playin_sim_r1_end\" EH ON R.scenario_id = EH.scenario_id AND EH.game_id = S.home_team[7:]\n    LEFT JOIN \"mdsbox\".\"main\".\"playin_sim_r1_end\" EV ON R.scenario_id = EV.scenario_id AND EV.game_id = S.visiting_team[8:]\nWHERE S.type = 'playin_r2'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playin_sim_r1": {"database": "mdsbox", "schema": "main", "name": "playin_sim_r1", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playin/playin_sim_r1.sql", "original_file_path": "models/nba/simulator/playin/playin_sim_r1.sql", "unique_id": "model.sports_sims.playin_sim_r1", "fqn": ["sports_sims", "nba", "simulator", "playin", "playin_sim_r1"], "alias": "playin_sim_r1", "checksum": {"name": "sha256", "checksum": "f0dcead8796f81251a0d0ebc9c51b6d518e0d053a775de15f1147b7aed7950ae"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playin/playin_sim_r1.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711283.570589, "relation_name": "\"mdsbox\".\"main\".\"playin_sim_r1\"", "raw_code": "SELECT\n    R.scenario_id,\n    S.game_id,\n    EV.conf AS conf,\n    EV.winning_team AS visiting_team,\n    EV.elo_rating AS visiting_team_elo_rating,\n    EH.winning_team AS home_team,\n    EH.elo_rating AS home_team_elo_rating,\n    {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating', var('nba_elo_offset') ) }} AS home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating', var('nba_elo_offset') ) }} >= R.rand_result THEN EH.winning_team\n        ELSE EV.winning_team\n    END AS winning_team \nFROM {{ ref( 'nba_schedules' ) }} S\n    LEFT JOIN {{ ref( 'nba_random_num_gen' ) }} R ON R.game_id = S.game_id\n    LEFT JOIN {{ ref( 'reg_season_end' ) }} EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN {{ ref( 'reg_season_end' ) }} EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\nWHERE S.type = 'playin_r1'", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "reg_season_end", "package": null, "version": null}, {"name": "reg_season_end", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc"], "nodes": ["model.sports_sims.nba_schedules", "model.sports_sims.nba_random_num_gen", "model.sports_sims.reg_season_end"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playin/playin_sim_r1.sql", "compiled": true, "compiled_code": "SELECT\n    R.scenario_id,\n    S.game_id,\n    EV.conf AS conf,\n    EV.winning_team AS visiting_team,\n    EV.elo_rating AS visiting_team_elo_rating,\n    EH.winning_team AS home_team,\n    EH.elo_rating AS home_team_elo_rating,\n    ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 AS home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n        ELSE EV.winning_team\n    END AS winning_team \nFROM \"mdsbox\".\"main\".\"nba_schedules\" S\n    LEFT JOIN \"mdsbox\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN \"mdsbox\".\"main\".\"reg_season_end\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN \"mdsbox\".\"main\".\"reg_season_end\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\nWHERE S.type = 'playin_r1'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playin_sim_r2_end": {"database": "mdsbox", "schema": "main", "name": "playin_sim_r2_end", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playin/playin_sim_r2_end.sql", "original_file_path": "models/nba/simulator/playin/playin_sim_r2_end.sql", "unique_id": "model.sports_sims.playin_sim_r2_end", "fqn": ["sports_sims", "nba", "simulator", "playin", "playin_sim_r2_end"], "alias": "playin_sim_r2_end", "checksum": {"name": "sha256", "checksum": "38e41a4627b2274960bb2d366324bc6e227674bb73c732a2a892e0f9968be67f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playin/playin_sim_r2_end.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711283.5772257, "relation_name": "\"mdsbox\".\"main\".\"playin_sim_r2_end\"", "raw_code": "SELECT\n    P1.scenario_id,\n    P1.conf,\n    P1.winning_team,\n    P1.conf || '-7' AS seed,\n    P1.winning_team_elo_rating\nFROM {{ ref( 'playin_sim_r1_end' ) }} P1\nWHERE P1.result = 'winner advance'\nUNION ALL\nSELECT\n    P2.scenario_id,\n    P2.conf AS conf,\n    P2.winning_team,\n    P2.conf || '-8' AS seed,\n    CASE\n        WHEN P2.winning_team = P2.home_team THEN P2.home_team_elo_rating\n        ELSE P2.visiting_team_elo_rating\n    END AS elo_rating\nFROM {{ ref( 'playin_sim_r2' ) }} P2", "language": "sql", "refs": [{"name": "playin_sim_r1_end", "package": null, "version": null}, {"name": "playin_sim_r2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.playin_sim_r1_end", "model.sports_sims.playin_sim_r2"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playin/playin_sim_r2_end.sql", "compiled": true, "compiled_code": "SELECT\n    P1.scenario_id,\n    P1.conf,\n    P1.winning_team,\n    P1.conf || '-7' AS seed,\n    P1.winning_team_elo_rating\nFROM \"mdsbox\".\"main\".\"playin_sim_r1_end\" P1\nWHERE P1.result = 'winner advance'\nUNION ALL\nSELECT\n    P2.scenario_id,\n    P2.conf AS conf,\n    P2.winning_team,\n    P2.conf || '-8' AS seed,\n    CASE\n        WHEN P2.winning_team = P2.home_team THEN P2.home_team_elo_rating\n        ELSE P2.visiting_team_elo_rating\n    END AS elo_rating\nFROM \"mdsbox\".\"main\".\"playin_sim_r2\" P2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.reg_season_simulator": {"database": "mdsbox", "schema": "main", "name": "reg_season_simulator", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/reg_season/reg_season_simulator.sql", "original_file_path": "models/nba/simulator/reg_season/reg_season_simulator.sql", "unique_id": "model.sports_sims.reg_season_simulator", "fqn": ["sports_sims", "nba", "simulator", "reg_season", "reg_season_simulator"], "alias": "reg_season_simulator", "checksum": {"name": "sha256", "checksum": "a92d322b15d7524aa8382db1a1cc54d21a0e50d698af688fdd65404d6a903219"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/reg_season/reg_season_simulator.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1703711283.5800152, "relation_name": "\"mdsbox\".\"main\".\"reg_season_simulator\"", "raw_code": "SELECT \n    R.scenario_id,\n    S.*,\n    {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating', var('nba_elo_offset') ) }} as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN LR.include_actuals = true THEN LR.winning_team_short\n        WHEN {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating', var('nba_elo_offset') ) }}  >= R.rand_result THEN S.home_team\n        ELSE S.visiting_team\n    END AS winning_team,\n    COALESCE(LR.include_actuals, false) AS include_actuals,\n    LR.home_team_score AS actual_home_team_score,\n    LR.visiting_team_score AS actual_visiting_team_score,\n    LR.margin AS actual_margin\nFROM {{ ref( 'nba_schedules' ) }} S\nLEFT JOIN {{ ref( 'nba_random_num_gen' ) }} R ON R.game_id = S.game_id\nLEFT JOIN {{ ref( 'nba_latest_results' ) }} LR ON LR.game_id = S.game_id\nWHERE S.type IN ('reg_season','tournament','knockout')", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc"], "nodes": ["model.sports_sims.nba_schedules", "model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/reg_season/reg_season_simulator.sql", "compiled": true, "compiled_code": "SELECT \n    R.scenario_id,\n    S.*,\n    ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 70)::real/400)+1))) * 10000 as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN LR.include_actuals = true THEN LR.winning_team_short\n        WHEN ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 70)::real/400)+1))) * 10000  >= R.rand_result THEN S.home_team\n        ELSE S.visiting_team\n    END AS winning_team,\n    COALESCE(LR.include_actuals, false) AS include_actuals,\n    LR.home_team_score AS actual_home_team_score,\n    LR.visiting_team_score AS actual_visiting_team_score,\n    LR.margin AS actual_margin\nFROM \"mdsbox\".\"main\".\"nba_schedules\" S\nLEFT JOIN \"mdsbox\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\nLEFT JOIN \"mdsbox\".\"main\".\"nba_latest_results\" LR ON LR.game_id = S.game_id\nWHERE S.type IN ('reg_season','tournament','knockout')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.initialize_seeding": {"database": "mdsbox", "schema": "main", "name": "initialize_seeding", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/initialize_seeding.sql", "original_file_path": "models/nba/simulator/playoffs/initialize_seeding.sql", "unique_id": "model.sports_sims.initialize_seeding", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "initialize_seeding"], "alias": "initialize_seeding", "checksum": {"name": "sha256", "checksum": "ff52d5b393ee0507bc16e9533857316219b510d2cfb15274e9b07e86190a4b37"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/simulator/{{this.name}}.parquet"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playoffs/initialize_seeding.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "external", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/simulator/{{this.name}}.parquet"}, "created_at": 1703711283.5858157, "relation_name": "\"mdsbox\".\"main\".\"initialize_seeding\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/simulator/{{this.name}}.parquet\"\n    )\n}}\nWITH cte_teams AS (\n    SELECT\n        scenario_id,\n        conf,\n        winning_team,\n        seed,\n        elo_rating\n    FROM {{ ref( 'reg_season_end' ) }}\n    WHERE season_rank < 7\n    UNION ALL\n    SELECT *\n    FROM {{ ref('playin_sim_r2_end' ) }}\n)\n\nSELECT\n    T.*,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_teams T", "language": "sql", "refs": [{"name": "reg_season_end", "package": null, "version": null}, {"name": "playin_sim_r2_end", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_end", "model.sports_sims.playin_sim_r2_end"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playoffs/initialize_seeding.sql", "compiled": true, "compiled_code": "\nWITH cte_teams AS (\n    SELECT\n        scenario_id,\n        conf,\n        winning_team,\n        seed,\n        elo_rating\n    FROM \"mdsbox\".\"main\".\"reg_season_end\"\n    WHERE season_rank < 7\n    UNION ALL\n    SELECT *\n    FROM \"mdsbox\".\"main\".\"playin_sim_r2_end\"\n)\n\nSELECT\n    T.*,\n    0 AS sim_start_game_id\nFROM cte_teams T", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playoff_sim_r2": {"database": "mdsbox", "schema": "main", "name": "playoff_sim_r2", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/playoff_sim_r2.sql", "original_file_path": "models/nba/simulator/playoffs/playoff_sim_r2.sql", "unique_id": "model.sports_sims.playoff_sim_r2", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "playoff_sim_r2"], "alias": "playoff_sim_r2", "checksum": {"name": "sha256", "checksum": "715d285a31059670fcd291094463abb6842d7c23a601e1b3f62429d878795043"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "../data/data_catalog/simulator/{{this.name}}.parquet"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playoffs/playoff_sim_r2.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "external", "location": "../data/data_catalog/simulator/{{this.name}}.parquet"}, "created_at": 1703711283.590645, "relation_name": "\"mdsbox\".\"main\".\"playoff_sim_r2\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"../data/data_catalog/simulator/{{this.name}}.parquet\"\n    )\n}}\n\nWITH cte_playoff_sim AS (\n    {{ playoff_sim('playoffs_r2','playoff_sim_r1' ) }}\n)\n\n{{ playoff_sim_end( 'cte_playoff_sim' ) }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "playoff_sim_r1", "package": null, "version": null}, {"name": "playoff_sim_r1", "package": null, "version": null}, {"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.playoff_sim", "macro.sports_sims.playoff_sim_end"], "nodes": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.playoff_sim_r1", "model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playoffs/playoff_sim_r2.sql", "compiled": true, "compiled_code": "\n\nWITH cte_playoff_sim AS (\n    \n-- depends-on: \"mdsbox\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"mdsbox\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"mdsbox\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r1\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r1\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r2'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id\n)\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"mdsbox\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playoff_sim_r3": {"database": "mdsbox", "schema": "main", "name": "playoff_sim_r3", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/playoff_sim_r3.sql", "original_file_path": "models/nba/simulator/playoffs/playoff_sim_r3.sql", "unique_id": "model.sports_sims.playoff_sim_r3", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "playoff_sim_r3"], "alias": "playoff_sim_r3", "checksum": {"name": "sha256", "checksum": "4afaeaa017cabbedb35e383c79c9dc97539fe4bbea07d5104fc2c27dada2c7a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "../data/data_catalog/simulator/{{this.name}}.parquet"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playoffs/playoff_sim_r3.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "external", "location": "../data/data_catalog/simulator/{{this.name}}.parquet"}, "created_at": 1703711283.5992734, "relation_name": "\"mdsbox\".\"main\".\"playoff_sim_r3\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"../data/data_catalog/simulator/{{this.name}}.parquet\"\n    )\n}}\n\nWITH cte_playoff_sim AS (\n    {{ playoff_sim('playoffs_r3','playoff_sim_r2' ) }}\n)\n\n{{ playoff_sim_end( 'cte_playoff_sim' ) }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "playoff_sim_r2", "package": null, "version": null}, {"name": "playoff_sim_r2", "package": null, "version": null}, {"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.playoff_sim", "macro.sports_sims.playoff_sim_end"], "nodes": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.playoff_sim_r2", "model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playoffs/playoff_sim_r3.sql", "compiled": true, "compiled_code": "\n\nWITH cte_playoff_sim AS (\n    \n-- depends-on: \"mdsbox\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"mdsbox\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"mdsbox\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r2\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r2\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r3'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id\n)\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"mdsbox\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playoff_sim_r4": {"database": "mdsbox", "schema": "main", "name": "playoff_sim_r4", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/playoff_sim_r4.sql", "original_file_path": "models/nba/simulator/playoffs/playoff_sim_r4.sql", "unique_id": "model.sports_sims.playoff_sim_r4", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "playoff_sim_r4"], "alias": "playoff_sim_r4", "checksum": {"name": "sha256", "checksum": "df8270557963bc09bd3600f1bd0a212e7841705c4ec711d3f7c2e30ebd643a1f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "../data/data_catalog/simulator/{{this.name}}.parquet"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playoffs/playoff_sim_r4.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "external", "location": "../data/data_catalog/simulator/{{this.name}}.parquet"}, "created_at": 1703711283.6063967, "relation_name": "\"mdsbox\".\"main\".\"playoff_sim_r4\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"../data/data_catalog/simulator/{{this.name}}.parquet\"\n    )\n}}\n\nWITH cte_playoff_sim AS (\n    {{ playoff_sim('playoffs_r4','playoff_sim_r3' ) }}\n)\n\n{{ playoff_sim_end( 'cte_playoff_sim' ) }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "playoff_sim_r3", "package": null, "version": null}, {"name": "playoff_sim_r3", "package": null, "version": null}, {"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.playoff_sim", "macro.sports_sims.playoff_sim_end"], "nodes": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.playoff_sim_r3", "model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playoffs/playoff_sim_r4.sql", "compiled": true, "compiled_code": "\n\nWITH cte_playoff_sim AS (\n    \n-- depends-on: \"mdsbox\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"mdsbox\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"mdsbox\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r3\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r3\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r4'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id\n)\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"mdsbox\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playoff_sim_r1": {"database": "mdsbox", "schema": "main", "name": "playoff_sim_r1", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/playoff_sim_r1.sql", "original_file_path": "models/nba/simulator/playoffs/playoff_sim_r1.sql", "unique_id": "model.sports_sims.playoff_sim_r1", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "playoff_sim_r1"], "alias": "playoff_sim_r1", "checksum": {"name": "sha256", "checksum": "ba2b18a8a05a9145806e981c3ff548eaa4986635e4fc79460fcc0ba07e847655"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "../data/data_catalog/simulator/{{this.name}}.parquet"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playoffs/playoff_sim_r1.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "external", "location": "../data/data_catalog/simulator/{{this.name}}.parquet"}, "created_at": 1703711283.6136212, "relation_name": "\"mdsbox\".\"main\".\"playoff_sim_r1\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"../data/data_catalog/simulator/{{this.name}}.parquet\"\n    )\n}}\n\nWITH cte_playoff_sim AS (\n    {{ playoff_sim('playoffs_r1','initialize_seeding' ) }}\n)\n\n{{ playoff_sim_end( 'cte_playoff_sim' ) }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "initialize_seeding", "package": null, "version": null}, {"name": "initialize_seeding", "package": null, "version": null}, {"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.playoff_sim", "macro.sports_sims.playoff_sim_end"], "nodes": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.initialize_seeding", "model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playoffs/playoff_sim_r1.sql", "compiled": true, "compiled_code": "\n\nWITH cte_playoff_sim AS (\n    \n-- depends-on: \"mdsbox\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"mdsbox\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"mdsbox\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"initialize_seeding\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"initialize_seeding\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r1'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id\n)\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"mdsbox\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_reg_season_predictions": {"database": "mdsbox", "schema": "main", "name": "nfl_reg_season_predictions", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/analysis/nfl_reg_season_predictions.sql", "original_file_path": "models/nfl/analysis/nfl_reg_season_predictions.sql", "unique_id": "model.sports_sims.nfl_reg_season_predictions", "fqn": ["sports_sims", "nfl", "analysis", "nfl_reg_season_predictions"], "alias": "nfl_reg_season_predictions", "checksum": {"name": "sha256", "checksum": "c2d073eba20a6863ef80ccc3ff6dc9f6a852410986652a4168b794929f510aa4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/analysis/nfl_reg_season_predictions.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "table"}, "created_at": 1703711283.6211128, "relation_name": "\"mdsbox\".\"main\".\"nfl_reg_season_predictions\"", "raw_code": "SELECT \n    game_id,\n    home_team,\n    Home.team_short AS home_short,\n    home_team_elo_rating,\n    visiting_team,\n    Visitor.team_short AS vis_short,\n    visiting_team_elo_rating,\n    home_team_win_probability,\n    winning_team,\n    include_actuals,\n    COUNT(*) AS occurances,\n    {{ american_odds( 'home_team_win_probability/10000' ) }} AS american_odds\nFROM {{ ref( 'nfl_reg_season_simulator' ) }} S\nLEFT JOIN {{ ref( 'nfl_ratings' ) }} Home ON Home.team = S.home_team\nLEFT JOIN {{ ref( 'nfl_ratings' ) }} Visitor ON Visitor.team = S.visiting_team\nGROUP BY ALL", "language": "sql", "refs": [{"name": "nfl_reg_season_simulator", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.american_odds"], "nodes": ["model.sports_sims.nfl_reg_season_simulator", "model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/analysis/nfl_reg_season_predictions.sql", "compiled": true, "compiled_code": "SELECT \n    game_id,\n    home_team,\n    Home.team_short AS home_short,\n    home_team_elo_rating,\n    visiting_team,\n    Visitor.team_short AS vis_short,\n    visiting_team_elo_rating,\n    home_team_win_probability,\n    winning_team,\n    include_actuals,\n    COUNT(*) AS occurances,\n    CASE WHEN home_team_win_probability/10000 >= 0.5 \n        THEN '-' || ROUND( home_team_win_probability/10000 / ( 1.0 - home_team_win_probability/10000 ) * 100 )::int\n        ELSE '+' || ((( 1.0 - home_team_win_probability/10000 ) / (home_team_win_probability/10000::real ) * 100)::int)\n    END AS american_odds\nFROM \"mdsbox\".\"main\".\"nfl_reg_season_simulator\" S\nLEFT JOIN \"mdsbox\".\"main\".\"nfl_ratings\" Home ON Home.team = S.home_team\nLEFT JOIN \"mdsbox\".\"main\".\"nfl_ratings\" Visitor ON Visitor.team = S.visiting_team\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_reg_season_summary": {"database": "mdsbox", "schema": "main", "name": "nfl_reg_season_summary", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/analysis/nfl_reg_season_summary.sql", "original_file_path": "models/nfl/analysis/nfl_reg_season_summary.sql", "unique_id": "model.sports_sims.nfl_reg_season_summary", "fqn": ["sports_sims", "nfl", "analysis", "nfl_reg_season_summary"], "alias": "nfl_reg_season_summary", "checksum": {"name": "sha256", "checksum": "5afe80e438b2b4c551cb93c7427443dfca0a3305e92cbd98f7855a555252d9e8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/analysis/nfl_reg_season_summary.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "table"}, "created_at": 1703711283.6265643, "relation_name": "\"mdsbox\".\"main\".\"nfl_reg_season_summary\"", "raw_code": "WITH cte_summary AS (\n    SELECT\n        winning_team AS team,\n        E.conf,\n        ROUND(AVG(wins),1) AS avg_wins,\n        V.win_total AS vegas_wins,\n        ROUND(AVG(V.win_total) - AVG(wins), 1) AS elo_vs_vegas,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_5th,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_95th,\n        COUNT(*) FILTER (WHERE made_playoffs = 1 AND first_round_bye = 0) AS made_postseason,\n        COUNT(*) FILTER (WHERE first_round_bye = 1) AS first_round_bye,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_5th,\n        ROUND(AVG(season_rank), 1) AS avg_seed,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_95th\n    FROM {{ ref( 'nfl_reg_season_end' ) }} E\n    LEFT JOIN {{ ref( 'nfl_vegas_wins' ) }} V ON V.team = E.winning_team\n    GROUP BY ALL\n    )\n\nSELECT \n    C.team,\n    C.conf,\n    A.wins || ' - ' || A.losses AS record,\n    C.avg_wins,\n    C.vegas_wins,\n    R.elo_rating,\n    c.elo_vs_vegas,\n    C.wins_5th || ' to ' || C.wins_95th AS win_range,\n    C.seed_5th || ' to ' || C.seed_95th AS seed_range,\n    c.made_postseason,\n    c.first_round_bye,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_summary C\nLEFT JOIN 'nfl_reg_season_actuals' A ON A.team = C.team\nLEFT JOIN {{ ref( 'nfl_ratings' ) }} R ON R.team = C.team", "language": "sql", "refs": [{"name": "nfl_reg_season_end", "package": null, "version": null}, {"name": "nfl_vegas_wins", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_reg_season_end", "model.sports_sims.nfl_vegas_wins", "model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/analysis/nfl_reg_season_summary.sql", "compiled": true, "compiled_code": "WITH cte_summary AS (\n    SELECT\n        winning_team AS team,\n        E.conf,\n        ROUND(AVG(wins),1) AS avg_wins,\n        V.win_total AS vegas_wins,\n        ROUND(AVG(V.win_total) - AVG(wins), 1) AS elo_vs_vegas,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_5th,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_95th,\n        COUNT(*) FILTER (WHERE made_playoffs = 1 AND first_round_bye = 0) AS made_postseason,\n        COUNT(*) FILTER (WHERE first_round_bye = 1) AS first_round_bye,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_5th,\n        ROUND(AVG(season_rank), 1) AS avg_seed,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_95th\n    FROM \"mdsbox\".\"main\".\"nfl_reg_season_end\" E\n    LEFT JOIN \"mdsbox\".\"main\".\"nfl_vegas_wins\" V ON V.team = E.winning_team\n    GROUP BY ALL\n    )\n\nSELECT \n    C.team,\n    C.conf,\n    A.wins || ' - ' || A.losses AS record,\n    C.avg_wins,\n    C.vegas_wins,\n    R.elo_rating,\n    c.elo_vs_vegas,\n    C.wins_5th || ' to ' || C.wins_95th AS win_range,\n    C.seed_5th || ' to ' || C.seed_95th AS seed_range,\n    c.made_postseason,\n    c.first_round_bye,\n    0 AS sim_start_game_id\nFROM cte_summary C\nLEFT JOIN 'nfl_reg_season_actuals' A ON A.team = C.team\nLEFT JOIN \"mdsbox\".\"main\".\"nfl_ratings\" R ON R.team = C.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_raw_schedule": {"database": "mdsbox", "schema": "main", "name": "nfl_raw_schedule", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/raw/nfl_raw_schedule.sql", "original_file_path": "models/nfl/raw/nfl_raw_schedule.sql", "unique_id": "model.sports_sims.nfl_raw_schedule", "fqn": ["sports_sims", "nfl", "raw", "nfl_raw_schedule"], "alias": "nfl_raw_schedule", "checksum": {"name": "sha256", "checksum": "426dd2818fbdb5900859fe54b19f730b056cb6ae7132da9558e4fe5dd8189beb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/raw/nfl_raw_schedule.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "external", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "created_at": 1703711284.0840893, "relation_name": "\"mdsbox\".\"main\".\"nfl_raw_schedule\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet\"\n    )\n}}\n\n\nSELECT *\nFROM {{ source( 'nfl', 'nfl_schedule' ) }}", "language": "sql", "refs": [], "sources": [["nfl", "nfl_schedule"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nfl.nfl_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/raw/nfl_raw_schedule.sql", "compiled": true, "compiled_code": "\n\n\nSELECT *\nFROM '../data/nfl/nfl_schedule.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_raw_team_ratings": {"database": "mdsbox", "schema": "main", "name": "nfl_raw_team_ratings", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/raw/nfl_raw_team_ratings.sql", "original_file_path": "models/nfl/raw/nfl_raw_team_ratings.sql", "unique_id": "model.sports_sims.nfl_raw_team_ratings", "fqn": ["sports_sims", "nfl", "raw", "nfl_raw_team_ratings"], "alias": "nfl_raw_team_ratings", "checksum": {"name": "sha256", "checksum": "b8f6ad3a2a698103932adc1c02d526612400409f6278f6b2b47965e4aba54f34"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/raw/nfl_raw_team_ratings.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "external", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "created_at": 1703711284.084548, "relation_name": "\"mdsbox\".\"main\".\"nfl_raw_team_ratings\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet\"\n    )\n}}\n\n\nSELECT \n    \"Team\" as team,\n    \"Team_short\" as team_short,\n    \"Win Total\" as win_total,\n    \"ELO rating\" as elo_rating,\n    \"Conf\" as conf,\n    \"Division\" as division\nFROM {{ source( 'nfl', 'nfl_team_ratings' ) }}", "language": "sql", "refs": [], "sources": [["nfl", "nfl_team_ratings"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nfl.nfl_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/raw/nfl_raw_team_ratings.sql", "compiled": true, "compiled_code": "\n\n\nSELECT \n    \"Team\" as team,\n    \"Team_short\" as team_short,\n    \"Win Total\" as win_total,\n    \"ELO rating\" as elo_rating,\n    \"Conf\" as conf,\n    \"Division\" as division\nFROM '../data/nfl/nfl_team_ratings.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_raw_results": {"database": "mdsbox", "schema": "main", "name": "nfl_raw_results", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/raw/nfl_raw_results.sql", "original_file_path": "models/nfl/raw/nfl_raw_results.sql", "unique_id": "model.sports_sims.nfl_raw_results", "fqn": ["sports_sims", "nfl", "raw", "nfl_raw_results"], "alias": "nfl_raw_results", "checksum": {"name": "sha256", "checksum": "0d97f373b623db3c4a66bb4d5e396f5e9f934b980b768c6b4c5e3483982f8c2d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/raw/nfl_raw_results.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "external", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "created_at": 1703711284.0836747, "relation_name": "\"mdsbox\".\"main\".\"nfl_raw_results\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet\"\n    )\n}}\n\nSELECT\n    Week as wk,\n    \"Winner/tie\" as winner,\n    PtsW as winner_pts,\n    \"Loser/tie\" as loser,\n    PtsL as loser_pts,\n    CASE WHEN PtsL = PtsW THEN 1 ELSE 0 END as tie_flag\nFROM {{ source( 'nfl','nfl_results' ) }}", "language": "sql", "refs": [], "sources": [["nfl", "nfl_results"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nfl.nfl_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/raw/nfl_raw_results.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    Week as wk,\n    \"Winner/tie\" as winner,\n    PtsW as winner_pts,\n    \"Loser/tie\" as loser,\n    PtsL as loser_pts,\n    CASE WHEN PtsL = PtsW THEN 1 ELSE 0 END as tie_flag\nFROM '../data/nfl/nfl_results.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_ratings": {"database": "mdsbox", "schema": "main", "name": "nfl_ratings", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_ratings.sql", "original_file_path": "models/nfl/prep/nfl_ratings.sql", "unique_id": "model.sports_sims.nfl_ratings", "fqn": ["sports_sims", "nfl", "prep", "nfl_ratings"], "alias": "nfl_ratings", "checksum": {"name": "sha256", "checksum": "205ec80964d4463f66c387d71935b432f8aaab490195e2baaa7dc73d5a1f663a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conf": {"name": "conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "elo_rating": {"name": "elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_ratings.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1703711284.0861042, "relation_name": "\"mdsbox\".\"main\".\"nfl_ratings\"", "raw_code": "SELECT\n    orig.team,\n    orig.conf,\n    orig.division,\n    orig.team_short,\n    CASE\n        WHEN latest.latest_ratings = true AND latest.elo_rating IS NOT NULL THEN latest.elo_rating\n        ELSE orig.elo_rating\n    END AS elo_rating,\n    orig.elo_rating AS original_rating,\n    orig.win_total\nFROM {{ ref( 'nfl_raw_team_ratings' ) }} orig\nLEFT JOIN {{ ref( 'nfl_latest_elo' ) }} latest ON latest.team = orig.team\nGROUP BY ALL", "language": "sql", "refs": [{"name": "nfl_raw_team_ratings", "package": null, "version": null}, {"name": "nfl_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_raw_team_ratings", "model.sports_sims.nfl_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_ratings.sql", "compiled": true, "compiled_code": "SELECT\n    orig.team,\n    orig.conf,\n    orig.division,\n    orig.team_short,\n    CASE\n        WHEN latest.latest_ratings = true AND latest.elo_rating IS NOT NULL THEN latest.elo_rating\n        ELSE orig.elo_rating\n    END AS elo_rating,\n    orig.elo_rating AS original_rating,\n    orig.win_total\nFROM \"mdsbox\".\"main\".\"nfl_raw_team_ratings\" orig\nLEFT JOIN \"mdsbox\".\"main\".\"nfl_latest_elo\" latest ON latest.team = orig.team\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_random_num_gen": {"database": "mdsbox", "schema": "main", "name": "nfl_random_num_gen", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_random_num_gen.sql", "original_file_path": "models/nfl/prep/nfl_random_num_gen.sql", "unique_id": "model.sports_sims.nfl_random_num_gen", "fqn": ["sports_sims", "nfl", "prep", "nfl_random_num_gen"], "alias": "nfl_random_num_gen", "checksum": {"name": "sha256", "checksum": "f2021c7f482de5696847ca702e1ce83c8bab1b09f5e006365f185992f94827c3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_random_num_gen.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "table"}, "created_at": 1703711284.0865078, "relation_name": "\"mdsbox\".\"main\".\"nfl_random_num_gen\"", "raw_code": "{{ \n    config(\n        materialized='table'\n) }}\n\nWITH cte_scenario_gen AS (\n    SELECT I.generate_series AS scenario_id\n    FROM generate_series(1, {{ var( 'scenarios' ) }} ) AS I\n)\nSELECT\n    i.scenario_id,\n    S.game_id,\n    (random() * 10000)::smallint AS rand_result,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_scenario_gen AS i\nCROSS JOIN {{ ref( 'nfl_schedules' ) }} AS S", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_random_num_gen.sql", "compiled": true, "compiled_code": "\n\nWITH cte_scenario_gen AS (\n    SELECT I.generate_series AS scenario_id\n    FROM generate_series(1, 10000 ) AS I\n)\nSELECT\n    i.scenario_id,\n    S.game_id,\n    (random() * 10000)::smallint AS rand_result,\n    0 AS sim_start_game_id\nFROM cte_scenario_gen AS i\nCROSS JOIN \"mdsbox\".\"main\".\"nfl_schedules\" AS S", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_schedules": {"database": "mdsbox", "schema": "main", "name": "nfl_schedules", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_schedules.sql", "original_file_path": "models/nfl/prep/nfl_schedules.sql", "unique_id": "model.sports_sims.nfl_schedules", "fqn": ["sports_sims", "nfl", "prep", "nfl_schedules"], "alias": "nfl_schedules", "checksum": {"name": "sha256", "checksum": "32e1234f2b37db6ed7541328ba3fc3decd667a3196dc815e736db97605d3e96a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_conf": {"name": "visiting_conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team_elo_rating": {"name": "visiting_team_elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_conf": {"name": "home_conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_elo_rating": {"name": "home_team_elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_schedules.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1703711284.085494, "relation_name": "\"mdsbox\".\"main\".\"nfl_schedules\"", "raw_code": "SELECT\n    S.id AS game_id,\n    S.week as week_number,\n    'reg_season' AS type,\n    0 as series_id,\n    V.conf AS visiting_conf,\n    V.team AS visiting_team,\n    COALESCE(R.visiting_team_elo_rating,V.elo_rating::int) AS visiting_team_elo_rating,\n    H.conf AS home_conf,\n    H.team AS home_team,\n    COALESCE(R.home_team_elo_rating,H.elo_rating::int) AS home_team_elo_rating\nFROM {{ ref( 'nfl_raw_schedule' ) }} AS S\nLEFT JOIN {{ ref( 'nfl_ratings' ) }} V ON V.team = S.VisTm\nLEFT JOIN {{ ref( 'nfl_ratings' ) }} H ON H.team = S.HomeTm\nLEFT JOIN {{ ref( 'nfl_elo_rollforward' ) }} R ON R.game_id = S.id\nGROUP BY ALL\n\n/* -- EXCLUDING UNTIL I GET A PLAYOFFS MODULE FIGURED OUT\nUNION ALL\nSELECT\n    *\nFROM {{ ref( 'nba_post_season_schedule' ) }}\n*/", "language": "sql", "refs": [{"name": "nfl_raw_schedule", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}, {"name": "nfl_elo_rollforward", "package": null, "version": null}, {"name": "nba_post_season_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_raw_schedule", "model.sports_sims.nfl_ratings", "model.sports_sims.nfl_elo_rollforward", "model.sports_sims.nba_post_season_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_schedules.sql", "compiled": true, "compiled_code": "SELECT\n    S.id AS game_id,\n    S.week as week_number,\n    'reg_season' AS type,\n    0 as series_id,\n    V.conf AS visiting_conf,\n    V.team AS visiting_team,\n    COALESCE(R.visiting_team_elo_rating,V.elo_rating::int) AS visiting_team_elo_rating,\n    H.conf AS home_conf,\n    H.team AS home_team,\n    COALESCE(R.home_team_elo_rating,H.elo_rating::int) AS home_team_elo_rating\nFROM \"mdsbox\".\"main\".\"nfl_raw_schedule\" AS S\nLEFT JOIN \"mdsbox\".\"main\".\"nfl_ratings\" V ON V.team = S.VisTm\nLEFT JOIN \"mdsbox\".\"main\".\"nfl_ratings\" H ON H.team = S.HomeTm\nLEFT JOIN \"mdsbox\".\"main\".\"nfl_elo_rollforward\" R ON R.game_id = S.id\nGROUP BY ALL\n\n/* -- EXCLUDING UNTIL I GET A PLAYOFFS MODULE FIGURED OUT\nUNION ALL\nSELECT\n    *\nFROM \"mdsbox\".\"main\".\"nba_post_season_schedule\"\n*/", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_teams": {"database": "mdsbox", "schema": "main", "name": "nfl_teams", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_teams.sql", "original_file_path": "models/nfl/prep/nfl_teams.sql", "unique_id": "model.sports_sims.nfl_teams", "fqn": ["sports_sims", "nfl", "prep", "nfl_teams"], "alias": "nfl_teams", "checksum": {"name": "sha256", "checksum": "f21a114c1d346095bebd466542a1295330748123b36607ce3579eb979ca15538"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {"team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_teams.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1703711284.0869489, "relation_name": "\"mdsbox\".\"main\".\"nfl_teams\"", "raw_code": "SELECT\n    S.VisTm AS team_long,\n   -- R.team\nFROM {{ ref( 'nfl_raw_schedule' ) }} S\n--LEFT JOIN {{ ref( 'nfl_ratings' ) }} AS R ON R.team = S.VisTm\n--WHERE R.team IS NOT NULL\nGROUP BY ALL", "language": "sql", "refs": [{"name": "nfl_raw_schedule", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_raw_schedule", "model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_teams.sql", "compiled": true, "compiled_code": "SELECT\n    S.VisTm AS team_long,\n   -- R.team\nFROM \"mdsbox\".\"main\".\"nfl_raw_schedule\" S\n--LEFT JOIN \"mdsbox\".\"main\".\"nfl_ratings\" AS R ON R.team = S.VisTm\n--WHERE R.team IS NOT NULL\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_latest_elo": {"database": "mdsbox", "schema": "main", "name": "nfl_latest_elo", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_latest_elo.sql", "original_file_path": "models/nfl/prep/nfl_latest_elo.sql", "unique_id": "model.sports_sims.nfl_latest_elo", "fqn": ["sports_sims", "nfl", "prep", "nfl_latest_elo"], "alias": "nfl_latest_elo", "checksum": {"name": "sha256", "checksum": "f35dd8b52b544c446e4a1bd7344d3ef08313bcc02f743bac644f022b10f92759"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_latest_elo.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1703711283.6525338, "relation_name": "\"mdsbox\".\"main\".\"nfl_latest_elo\"", "raw_code": "WITH home_rating AS (\n    SELECT home_team as team\n    , max(game_id) game_id\n    , max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n    FROM {{ ref('nfl_elo_rollforward') }}\n    GROUP BY ALL\n),\nvisiting_rating AS (\n    SELECT visiting_team as team\n    , max(game_id) game_id\n    , max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n    FROM {{ ref('nfl_elo_rollforward') }}\n    GROUP BY ALL\n),\nunion_rating AS (\n    SELECT * FROM home_rating\n    UNION ALL\n    SELECT * FROM visiting_rating\n),\nfinal_rating AS (\n    SELECT team, max_by(elo_rating, game_id) AS elo_rating\n    FROM union_rating\n    GROUP BY ALL\n)\nSELECT f.team\n, f.elo_rating AS elo_rating\n, o.elo_rating AS original_rating\n, {{ var('latest_ratings') }} AS latest_ratings\nFROM final_rating f\nINNER JOIN {{ ref('nfl_raw_team_ratings') }} o ON f.team = o.team", "language": "sql", "refs": [{"name": "nfl_elo_rollforward", "package": null, "version": null}, {"name": "nfl_elo_rollforward", "package": null, "version": null}, {"name": "nfl_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_elo_rollforward", "model.sports_sims.nfl_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_latest_elo.sql", "compiled": true, "compiled_code": "WITH home_rating AS (\n    SELECT home_team as team\n    , max(game_id) game_id\n    , max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n    FROM \"mdsbox\".\"main\".\"nfl_elo_rollforward\"\n    GROUP BY ALL\n),\nvisiting_rating AS (\n    SELECT visiting_team as team\n    , max(game_id) game_id\n    , max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n    FROM \"mdsbox\".\"main\".\"nfl_elo_rollforward\"\n    GROUP BY ALL\n),\nunion_rating AS (\n    SELECT * FROM home_rating\n    UNION ALL\n    SELECT * FROM visiting_rating\n),\nfinal_rating AS (\n    SELECT team, max_by(elo_rating, game_id) AS elo_rating\n    FROM union_rating\n    GROUP BY ALL\n)\nSELECT f.team\n, f.elo_rating AS elo_rating\n, o.elo_rating AS original_rating\n, True AS latest_ratings\nFROM final_rating f\nINNER JOIN \"mdsbox\".\"main\".\"nfl_raw_team_ratings\" o ON f.team = o.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_latest_results": {"database": "mdsbox", "schema": "main", "name": "nfl_latest_results", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_latest_results.sql", "original_file_path": "models/nfl/prep/nfl_latest_results.sql", "unique_id": "model.sports_sims.nfl_latest_results", "fqn": ["sports_sims", "nfl", "prep", "nfl_latest_results"], "alias": "nfl_latest_results", "checksum": {"name": "sha256", "checksum": "452402012dbe6df13211e6563bbe1efb66555d3789a6b3d73eee2ab9c9e73380"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_latest_results.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1703711283.6571681, "relation_name": "\"mdsbox\".\"main\".\"nfl_latest_results\"", "raw_code": "with cte_inner as (\n    SELECT\n        S.id as game_id,\n        S.week as week_number,\n        S.HomeTm AS home_team, \n        CASE\n            WHEN S.HomeTm = R.Winner THEN R.Winner_Pts\n            ELSE R.Loser_Pts \n        END AS home_team_score,\n        S.VisTm AS visiting_team,\n        CASE\n            WHEN S.VisTm = R.Winner THEN R.Winner_Pts\n            ELSE R.Loser_Pts \n        END AS  visiting_team_score,\n        R.Winner AS winning_team,\n        R.Loser AS losing_team,\n        {{ var('include_actuals') }} AS include_actuals\n    FROM {{ ref( 'nfl_raw_schedule' ) }} S\n        LEFT JOIN {{ ref( 'nfl_raw_results' ) }} R ON R.Wk = S.week\n            AND (S.VisTm = R.Winner OR S.VisTm = R.Loser)\n    WHERE home_team_score IS NOT NULL \n    GROUP BY ALL\n),\ncte_outer AS (\n    SELECT *,\n        CASE\n            WHEN visiting_team_score > home_team_score THEN 1\n            WHEN visiting_team_score = home_team_score THEN 0.5\n            ELSE 0\n        END AS game_result,\n        ABS( visiting_team_score - home_team_score ) as margin\n    FROM cte_inner\n)\nSELECT *,\n    CASE\n        WHEN margin < 4 AND game_result = 1 THEN 0.585\n        WHEN margin < 4 AND game_result = 0 THEN 0.415\n        WHEN margin < 6 AND game_result = 1 THEN 0.666\n        WHEN margin < 6 AND game_result = 0 THEN 0.334\n        WHEN margin = 6 AND game_result = 1 THEN 0.707\n        WHEN margin = 6 AND game_result = 0 THEN 0.293\n        WHEN margin = 7 AND game_result = 1 THEN 0.73\n        WHEN margin = 7 AND game_result = 0 THEN 0.27\n        WHEN margin = 8 AND game_result = 1 THEN 0.75\n        WHEN margin = 8 AND game_result = 0 THEN 0.25\n        WHEN margin > 8 AND margin < 17 AND game_result = 1 THEN 0.85\n        WHEN margin > 8 AND margin < 17 AND game_result = 0 THEN 0.15\n        ELSE game_result\n    END AS game_result_v2\nFROM cte_outer", "language": "sql", "refs": [{"name": "nfl_raw_schedule", "package": null, "version": null}, {"name": "nfl_raw_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_raw_schedule", "model.sports_sims.nfl_raw_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_latest_results.sql", "compiled": true, "compiled_code": "with cte_inner as (\n    SELECT\n        S.id as game_id,\n        S.week as week_number,\n        S.HomeTm AS home_team, \n        CASE\n            WHEN S.HomeTm = R.Winner THEN R.Winner_Pts\n            ELSE R.Loser_Pts \n        END AS home_team_score,\n        S.VisTm AS visiting_team,\n        CASE\n            WHEN S.VisTm = R.Winner THEN R.Winner_Pts\n            ELSE R.Loser_Pts \n        END AS  visiting_team_score,\n        R.Winner AS winning_team,\n        R.Loser AS losing_team,\n        True AS include_actuals\n    FROM \"mdsbox\".\"main\".\"nfl_raw_schedule\" S\n        LEFT JOIN \"mdsbox\".\"main\".\"nfl_raw_results\" R ON R.Wk = S.week\n            AND (S.VisTm = R.Winner OR S.VisTm = R.Loser)\n    WHERE home_team_score IS NOT NULL \n    GROUP BY ALL\n),\ncte_outer AS (\n    SELECT *,\n        CASE\n            WHEN visiting_team_score > home_team_score THEN 1\n            WHEN visiting_team_score = home_team_score THEN 0.5\n            ELSE 0\n        END AS game_result,\n        ABS( visiting_team_score - home_team_score ) as margin\n    FROM cte_inner\n)\nSELECT *,\n    CASE\n        WHEN margin < 4 AND game_result = 1 THEN 0.585\n        WHEN margin < 4 AND game_result = 0 THEN 0.415\n        WHEN margin < 6 AND game_result = 1 THEN 0.666\n        WHEN margin < 6 AND game_result = 0 THEN 0.334\n        WHEN margin = 6 AND game_result = 1 THEN 0.707\n        WHEN margin = 6 AND game_result = 0 THEN 0.293\n        WHEN margin = 7 AND game_result = 1 THEN 0.73\n        WHEN margin = 7 AND game_result = 0 THEN 0.27\n        WHEN margin = 8 AND game_result = 1 THEN 0.75\n        WHEN margin = 8 AND game_result = 0 THEN 0.25\n        WHEN margin > 8 AND margin < 17 AND game_result = 1 THEN 0.85\n        WHEN margin > 8 AND margin < 17 AND game_result = 0 THEN 0.15\n        ELSE game_result\n    END AS game_result_v2\nFROM cte_outer", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_reg_season_actuals": {"database": "mdsbox", "schema": "main", "name": "nfl_reg_season_actuals", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_reg_season_actuals.sql", "original_file_path": "models/nfl/prep/nfl_reg_season_actuals.sql", "unique_id": "model.sports_sims.nfl_reg_season_actuals", "fqn": ["sports_sims", "nfl", "prep", "nfl_reg_season_actuals"], "alias": "nfl_reg_season_actuals", "checksum": {"name": "sha256", "checksum": "85772e119b30b86676937856ee2e0bd6796a45c799241d385ab8d5516de686e3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_reg_season_actuals.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1703711283.6619499, "relation_name": "\"mdsbox\".\"main\".\"nfl_reg_season_actuals\"", "raw_code": "WITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'nfl_latest_results' ) }}\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'nfl_latest_results' ) }}\n    GROUP BY ALL\n)\n\nSELECT\n    T.team_long as team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses\nFROM {{ ref( 'nfl_teams' ) }} T\nLEFT JOIN cte_wins W ON W.winning_team = T.team_long\nLEFT JOIN cte_losses L ON L.losing_team = T.Team_long", "language": "sql", "refs": [{"name": "nfl_latest_results", "package": null, "version": null}, {"name": "nfl_latest_results", "package": null, "version": null}, {"name": "nfl_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_latest_results", "model.sports_sims.nfl_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_reg_season_actuals.sql", "compiled": true, "compiled_code": "WITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM \"mdsbox\".\"main\".\"nfl_latest_results\"\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM \"mdsbox\".\"main\".\"nfl_latest_results\"\n    GROUP BY ALL\n)\n\nSELECT\n    T.team_long as team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses\nFROM \"mdsbox\".\"main\".\"nfl_teams\" T\nLEFT JOIN cte_wins W ON W.winning_team = T.team_long\nLEFT JOIN cte_losses L ON L.losing_team = T.Team_long", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_vegas_wins": {"database": "mdsbox", "schema": "main", "name": "nfl_vegas_wins", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_vegas_wins.sql", "original_file_path": "models/nfl/prep/nfl_vegas_wins.sql", "unique_id": "model.sports_sims.nfl_vegas_wins", "fqn": ["sports_sims", "nfl", "prep", "nfl_vegas_wins"], "alias": "nfl_vegas_wins", "checksum": {"name": "sha256", "checksum": "747560c317558d41a77ca0e993a61bd6c7eacdc83bd285ecdd2577493d63a4ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "win_total": {"name": "win_total", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_vegas_wins.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1703711284.0876963, "relation_name": "\"mdsbox\".\"main\".\"nfl_vegas_wins\"", "raw_code": "SELECT\n    team,\n    win_total\nFROM {{ ref( 'nfl_ratings' ) }}\nGROUP BY ALL", "language": "sql", "refs": [{"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_vegas_wins.sql", "compiled": true, "compiled_code": "SELECT\n    team,\n    win_total\nFROM \"mdsbox\".\"main\".\"nfl_ratings\"\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_reg_season_end": {"database": "mdsbox", "schema": "main", "name": "nfl_reg_season_end", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/simulator/nfl_reg_season_end.sql", "original_file_path": "models/nfl/simulator/nfl_reg_season_end.sql", "unique_id": "model.sports_sims.nfl_reg_season_end", "fqn": ["sports_sims", "nfl", "simulator", "nfl_reg_season_end"], "alias": "nfl_reg_season_end", "checksum": {"name": "sha256", "checksum": "578cf25816755f1b445561eb501fe5ecd1b1a464f9c330a12106e07df74faaa5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/simulator/nfl_reg_season_end.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1703711283.6666272, "relation_name": "\"mdsbox\".\"main\".\"nfl_reg_season_end\"", "raw_code": "WITH cte_wins AS (\n    SELECT\n        S.scenario_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_conf\n            ELSE S.visiting_conf\n        END AS conf,\n      /*  CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n        COUNT(*) AS wins\n    FROM {{ ref( 'nfl_reg_season_simulator' ) }} S\n    GROUP BY ALL\n),\n\ncte_ranked_wins AS (\n    SELECT\n        *,\n        --no tiebreaker, so however row number handles order ties will need to be dealt with\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, conf ORDER BY wins DESC, winning_team DESC ) AS season_rank\n    FROM cte_wins\n\n),\n\ncte_made_playoffs AS (\n    SELECT\n        *,\n        CASE\n            WHEN season_rank = 1 THEN 1\n            ELSE 0\n        END AS first_round_bye,\n        CASE\n            WHEN season_rank BETWEEN 1 AND 7 THEN 1\n            ELSE 0\n        END AS made_playoffs,\n        conf || '-' || season_rank::text AS seed\n    FROM cte_ranked_wins\n)\n\nSELECT \n    MP.*,\n    LE.elo_rating,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_made_playoffs MP\nLEFT JOIN {{ ref( 'nfl_latest_elo' ) }} LE ON LE.team = MP.winning_team", "language": "sql", "refs": [{"name": "nfl_reg_season_simulator", "package": null, "version": null}, {"name": "nfl_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_reg_season_simulator", "model.sports_sims.nfl_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/simulator/nfl_reg_season_end.sql", "compiled": true, "compiled_code": "WITH cte_wins AS (\n    SELECT\n        S.scenario_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_conf\n            ELSE S.visiting_conf\n        END AS conf,\n      /*  CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n        COUNT(*) AS wins\n    FROM \"mdsbox\".\"main\".\"nfl_reg_season_simulator\" S\n    GROUP BY ALL\n),\n\ncte_ranked_wins AS (\n    SELECT\n        *,\n        --no tiebreaker, so however row number handles order ties will need to be dealt with\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, conf ORDER BY wins DESC, winning_team DESC ) AS season_rank\n    FROM cte_wins\n\n),\n\ncte_made_playoffs AS (\n    SELECT\n        *,\n        CASE\n            WHEN season_rank = 1 THEN 1\n            ELSE 0\n        END AS first_round_bye,\n        CASE\n            WHEN season_rank BETWEEN 1 AND 7 THEN 1\n            ELSE 0\n        END AS made_playoffs,\n        conf || '-' || season_rank::text AS seed\n    FROM cte_ranked_wins\n)\n\nSELECT \n    MP.*,\n    LE.elo_rating,\n    0 AS sim_start_game_id\nFROM cte_made_playoffs MP\nLEFT JOIN \"mdsbox\".\"main\".\"nfl_latest_elo\" LE ON LE.team = MP.winning_team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_reg_season_simulator": {"database": "mdsbox", "schema": "main", "name": "nfl_reg_season_simulator", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/simulator/nfl_reg_season_simulator.sql", "original_file_path": "models/nfl/simulator/nfl_reg_season_simulator.sql", "unique_id": "model.sports_sims.nfl_reg_season_simulator", "fqn": ["sports_sims", "nfl", "simulator", "nfl_reg_season_simulator"], "alias": "nfl_reg_season_simulator", "checksum": {"name": "sha256", "checksum": "dde2dc5ca30f039d121701fb75d329480765de242701415f4c4c23403952dfbc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/simulator/nfl_reg_season_simulator.sql", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1703711283.6711304, "relation_name": "\"mdsbox\".\"main\".\"nfl_reg_season_simulator\"", "raw_code": "SELECT \n    R.scenario_id,\n    S.*,\n    {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating', var('nfl_elo_offset') ) }} as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN LR.include_actuals = true THEN LR.winning_team\n        WHEN {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating', var('nfl_elo_offset') ) }}  >= R.rand_result THEN S.home_team\n        ELSE S.visiting_team\n    END AS winning_team,\n    COALESCE(LR.include_actuals, false) AS include_actuals\nFROM {{ ref( 'nfl_schedules' ) }} S\nLEFT JOIN {{ ref( 'nfl_random_num_gen' ) }} R ON R.game_id = S.game_id\nLEFT JOIN {{ ref( 'nfl_latest_results' ) }} LR ON LR.game_id = S.game_id\nWHERE S.type = 'reg_season'", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}, {"name": "nfl_random_num_gen", "package": null, "version": null}, {"name": "nfl_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc"], "nodes": ["model.sports_sims.nfl_schedules", "model.sports_sims.nfl_random_num_gen", "model.sports_sims.nfl_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/simulator/nfl_reg_season_simulator.sql", "compiled": true, "compiled_code": "SELECT \n    R.scenario_id,\n    S.*,\n    ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 52)::real/400)+1))) * 10000 as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN LR.include_actuals = true THEN LR.winning_team\n        WHEN ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 52)::real/400)+1))) * 10000  >= R.rand_result THEN S.home_team\n        ELSE S.visiting_team\n    END AS winning_team,\n    COALESCE(LR.include_actuals, false) AS include_actuals\nFROM \"mdsbox\".\"main\".\"nfl_schedules\" S\nLEFT JOIN \"mdsbox\".\"main\".\"nfl_random_num_gen\" R ON R.game_id = S.game_id\nLEFT JOIN \"mdsbox\".\"main\".\"nfl_latest_results\" LR ON LR.game_id = S.game_id\nWHERE S.type = 'reg_season'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_reg_season_predictions": {"database": "mdsbox", "schema": "main", "name": "ncaaf_reg_season_predictions", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/analysis/ncaaf_reg_season_predictions.sql", "original_file_path": "models/ncaaf/analysis/ncaaf_reg_season_predictions.sql", "unique_id": "model.sports_sims.ncaaf_reg_season_predictions", "fqn": ["sports_sims", "ncaaf", "analysis", "ncaaf_reg_season_predictions"], "alias": "ncaaf_reg_season_predictions", "checksum": {"name": "sha256", "checksum": "c33723af330db4c41e81d5b7d7c50cfbb4d0259bba1eee5d823e5b76a6383768"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/ncaaf/analysis/ncaaf_reg_season_predictions.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "external"}, "created_at": 1703711283.6763372, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_reg_season_predictions\"", "raw_code": "SELECT \n    game_id,\n    home_team,\n    Home.team AS home_short,\n    home_team_elo_rating,\n    visiting_team,\n    Visitor.team AS vis_short,\n    visiting_team_elo_rating,\n    home_team_win_probability,\n    winning_team,\n    include_actuals,\n    COUNT(*) AS occurances,\n    {{ american_odds( 'home_team_win_probability/10000' ) }} AS american_odds\nFROM {{ ref( 'ncaaf_reg_season_simulator' ) }} S\nLEFT JOIN {{ ref( 'ncaaf_ratings' ) }} Home ON Home.team = S.home_team\nLEFT JOIN {{ ref( 'ncaaf_ratings' ) }} Visitor ON Visitor.team = S.visiting_team\nGROUP BY ALL", "language": "sql", "refs": [{"name": "ncaaf_reg_season_simulator", "package": null, "version": null}, {"name": "ncaaf_ratings", "package": null, "version": null}, {"name": "ncaaf_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.american_odds"], "nodes": ["model.sports_sims.ncaaf_reg_season_simulator", "model.sports_sims.ncaaf_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/analysis/ncaaf_reg_season_predictions.sql", "compiled": true, "compiled_code": "SELECT \n    game_id,\n    home_team,\n    Home.team AS home_short,\n    home_team_elo_rating,\n    visiting_team,\n    Visitor.team AS vis_short,\n    visiting_team_elo_rating,\n    home_team_win_probability,\n    winning_team,\n    include_actuals,\n    COUNT(*) AS occurances,\n    CASE WHEN home_team_win_probability/10000 >= 0.5 \n        THEN '-' || ROUND( home_team_win_probability/10000 / ( 1.0 - home_team_win_probability/10000 ) * 100 )::int\n        ELSE '+' || ((( 1.0 - home_team_win_probability/10000 ) / (home_team_win_probability/10000::real ) * 100)::int)\n    END AS american_odds\nFROM \"mdsbox\".\"main\".\"ncaaf_reg_season_simulator\" S\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_ratings\" Home ON Home.team = S.home_team\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_ratings\" Visitor ON Visitor.team = S.visiting_team\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_season_summary": {"database": "mdsbox", "schema": "main", "name": "ncaaf_season_summary", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/analysis/ncaaf_season_summary.sql", "original_file_path": "models/ncaaf/analysis/ncaaf_season_summary.sql", "unique_id": "model.sports_sims.ncaaf_season_summary", "fqn": ["sports_sims", "ncaaf", "analysis", "ncaaf_season_summary"], "alias": "ncaaf_season_summary", "checksum": {"name": "sha256", "checksum": "511c6c3f1d8dcae9ef1bf003b376d2f3a1ac8b8eac7ca3478b3c1a32cc19a5e3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/ncaaf/analysis/ncaaf_season_summary.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "external"}, "created_at": 1703711283.6809962, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_season_summary\"", "raw_code": "SELECT\n    ROUND(ratings.elo_rating,0)::int || ' (' || CASE WHEN original_rating < ratings.elo_rating THEN '+' ELSE '' END || (ratings.elo_rating-original_rating)::int || ')' AS elo_rating,\n    R.*\nFROM {{ ref( 'ncaaf_reg_season_summary' ) }} R\n-- LEFT JOIN {{ ref( 'playoff_summary' ) }} P ON P.team = R.team\nLEFT JOIN {{ ref( 'ncaaf_ratings' ) }} ratings ON ratings.team = R.team", "language": "sql", "refs": [{"name": "ncaaf_reg_season_summary", "package": null, "version": null}, {"name": "playoff_summary", "package": null, "version": null}, {"name": "ncaaf_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.ncaaf_reg_season_summary", "model.sports_sims.playoff_summary", "model.sports_sims.ncaaf_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/analysis/ncaaf_season_summary.sql", "compiled": true, "compiled_code": "SELECT\n    ROUND(ratings.elo_rating,0)::int || ' (' || CASE WHEN original_rating < ratings.elo_rating THEN '+' ELSE '' END || (ratings.elo_rating-original_rating)::int || ')' AS elo_rating,\n    R.*\nFROM \"mdsbox\".\"main\".\"ncaaf_reg_season_summary\" R\n-- LEFT JOIN \"mdsbox\".\"main\".\"playoff_summary\" P ON P.team = R.team\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_ratings\" ratings ON ratings.team = R.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_reg_season_summary": {"database": "mdsbox", "schema": "main", "name": "ncaaf_reg_season_summary", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/analysis/ncaaf_reg_season_summary.sql", "original_file_path": "models/ncaaf/analysis/ncaaf_reg_season_summary.sql", "unique_id": "model.sports_sims.ncaaf_reg_season_summary", "fqn": ["sports_sims", "ncaaf", "analysis", "ncaaf_reg_season_summary"], "alias": "ncaaf_reg_season_summary", "checksum": {"name": "sha256", "checksum": "fb1cb94231dc8dbfd3a90d48f84a885d506d53f31c0daeefd4ac2dd9b49cb016"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/ncaaf/analysis/ncaaf_reg_season_summary.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "external"}, "created_at": 1703711283.6832306, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_reg_season_summary\"", "raw_code": "WITH cte_summary AS (\n    SELECT\n        winning_team AS team,\n        E.conf,\n        ROUND(AVG(wins),1) AS avg_wins,\n        V.win_total AS vegas_wins,\n        ROUND(AVG(V.win_total) - AVG(wins), 1) AS elo_vs_vegas,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_5th,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_95th,\n        COUNT(*) FILTER (WHERE made_playoffs = 1 AND first_round_bye = 0) AS made_postseason,\n        COUNT(*) FILTER (WHERE first_round_bye = 1) AS first_round_bye,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_5th,\n        ROUND(AVG(season_rank), 1) AS avg_seed,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_95th\n    FROM {{ ref( 'ncaaf_reg_season_end' ) }} E\n    LEFT JOIN {{ ref( 'ncaaf_vegas_wins' ) }} V ON V.team = E.winning_team\n    GROUP BY ALL\n    )\n\nSELECT \n    C.team,\n    C.conf,\n    A.wins || ' - ' || A.losses AS record,\n    C.avg_wins,\n    C.vegas_wins,\n    R.elo_rating,\n    c.elo_vs_vegas,\n    C.wins_5th || ' to ' || C.wins_95th AS win_range,\n    C.seed_5th || ' to ' || C.seed_95th AS seed_range,\n    c.made_postseason,\n    c.first_round_bye,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_summary C\nLEFT JOIN {{ ref( 'ncaaf_reg_season_actuals' ) }} A ON A.team = C.team\nLEFT JOIN {{ ref( 'ncaaf_ratings' ) }} R ON R.team = C.team", "language": "sql", "refs": [{"name": "ncaaf_reg_season_end", "package": null, "version": null}, {"name": "ncaaf_vegas_wins", "package": null, "version": null}, {"name": "ncaaf_reg_season_actuals", "package": null, "version": null}, {"name": "ncaaf_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.ncaaf_reg_season_end", "model.sports_sims.ncaaf_vegas_wins", "model.sports_sims.ncaaf_reg_season_actuals", "model.sports_sims.ncaaf_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/analysis/ncaaf_reg_season_summary.sql", "compiled": true, "compiled_code": "WITH cte_summary AS (\n    SELECT\n        winning_team AS team,\n        E.conf,\n        ROUND(AVG(wins),1) AS avg_wins,\n        V.win_total AS vegas_wins,\n        ROUND(AVG(V.win_total) - AVG(wins), 1) AS elo_vs_vegas,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_5th,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_95th,\n        COUNT(*) FILTER (WHERE made_playoffs = 1 AND first_round_bye = 0) AS made_postseason,\n        COUNT(*) FILTER (WHERE first_round_bye = 1) AS first_round_bye,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_5th,\n        ROUND(AVG(season_rank), 1) AS avg_seed,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_95th\n    FROM \"mdsbox\".\"main\".\"ncaaf_reg_season_end\" E\n    LEFT JOIN \"mdsbox\".\"main\".\"ncaaf_vegas_wins\" V ON V.team = E.winning_team\n    GROUP BY ALL\n    )\n\nSELECT \n    C.team,\n    C.conf,\n    A.wins || ' - ' || A.losses AS record,\n    C.avg_wins,\n    C.vegas_wins,\n    R.elo_rating,\n    c.elo_vs_vegas,\n    C.wins_5th || ' to ' || C.wins_95th AS win_range,\n    C.seed_5th || ' to ' || C.seed_95th AS seed_range,\n    c.made_postseason,\n    c.first_round_bye,\n    0 AS sim_start_game_id\nFROM cte_summary C\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_reg_season_actuals\" A ON A.team = C.team\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_ratings\" R ON R.team = C.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_reg_season_summary_by_conf": {"database": "mdsbox", "schema": "main", "name": "ncaaf_reg_season_summary_by_conf", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/analysis/ncaaf_reg_season_summary_by_conf.sql", "original_file_path": "models/ncaaf/analysis/ncaaf_reg_season_summary_by_conf.sql", "unique_id": "model.sports_sims.ncaaf_reg_season_summary_by_conf", "fqn": ["sports_sims", "ncaaf", "analysis", "ncaaf_reg_season_summary_by_conf"], "alias": "ncaaf_reg_season_summary_by_conf", "checksum": {"name": "sha256", "checksum": "4a159390290659436996490f0f4a3499976fcbb34c896ab6cf6c01c3da722027"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/ncaaf/analysis/ncaaf_reg_season_summary_by_conf.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "external"}, "created_at": 1703711283.6882458, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_reg_season_summary_by_conf\"", "raw_code": "WITH cte_summary AS (\n    SELECT\n        winning_team AS team,\n        E.conf,\n        ROUND(AVG(wins),1) AS avg_wins,\n        V.win_total AS vegas_wins,\n        ROUND(AVG(V.win_total) - AVG(wins), 1) AS elo_vs_vegas,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_5th,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_95th,\n        COUNT(*) FILTER (WHERE made_playoffs = 1 AND first_round_bye = 0) AS made_postseason,\n        COUNT(*) FILTER (WHERE first_round_bye = 1) AS first_round_bye,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_5th,\n        ROUND(AVG(season_rank), 1) AS avg_seed,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_95th\n    FROM {{ ref( 'ncaaf_reg_season_end' ) }} E\n    LEFT JOIN {{ ref( 'ncaaf_vegas_wins' ) }} V ON V.team = E.winning_team\n    GROUP BY ALL\n    )\n\nSELECT \n    C.conf,\n    SUM(A.wins) || ' - ' || SUM(A.losses) AS record,\n    SUM(C.avg_wins) AS tot_wins,\n    SUM(C.vegas_wins) AS vegas_wins,\n    AVG(R.elo_rating) AS avg_elo_rating,\n    SUM(c.elo_vs_vegas) AS elo_vs_vegas,\n    COUNT(*) as teams\nFROM cte_summary C\nLEFT JOIN {{ ref( 'ncaaf_reg_season_actuals' ) }} A ON A.team = C.team\nLEFT JOIN {{ ref( 'ncaaf_ratings' ) }} R ON R.team = C.team\nGROUP BY ALL", "language": "sql", "refs": [{"name": "ncaaf_reg_season_end", "package": null, "version": null}, {"name": "ncaaf_vegas_wins", "package": null, "version": null}, {"name": "ncaaf_reg_season_actuals", "package": null, "version": null}, {"name": "ncaaf_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.ncaaf_reg_season_end", "model.sports_sims.ncaaf_vegas_wins", "model.sports_sims.ncaaf_reg_season_actuals", "model.sports_sims.ncaaf_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/analysis/ncaaf_reg_season_summary_by_conf.sql", "compiled": true, "compiled_code": "WITH cte_summary AS (\n    SELECT\n        winning_team AS team,\n        E.conf,\n        ROUND(AVG(wins),1) AS avg_wins,\n        V.win_total AS vegas_wins,\n        ROUND(AVG(V.win_total) - AVG(wins), 1) AS elo_vs_vegas,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_5th,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_95th,\n        COUNT(*) FILTER (WHERE made_playoffs = 1 AND first_round_bye = 0) AS made_postseason,\n        COUNT(*) FILTER (WHERE first_round_bye = 1) AS first_round_bye,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_5th,\n        ROUND(AVG(season_rank), 1) AS avg_seed,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_95th\n    FROM \"mdsbox\".\"main\".\"ncaaf_reg_season_end\" E\n    LEFT JOIN \"mdsbox\".\"main\".\"ncaaf_vegas_wins\" V ON V.team = E.winning_team\n    GROUP BY ALL\n    )\n\nSELECT \n    C.conf,\n    SUM(A.wins) || ' - ' || SUM(A.losses) AS record,\n    SUM(C.avg_wins) AS tot_wins,\n    SUM(C.vegas_wins) AS vegas_wins,\n    AVG(R.elo_rating) AS avg_elo_rating,\n    SUM(c.elo_vs_vegas) AS elo_vs_vegas,\n    COUNT(*) as teams\nFROM cte_summary C\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_reg_season_actuals\" A ON A.team = C.team\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_ratings\" R ON R.team = C.team\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_raw_team_ratings": {"database": "mdsbox", "schema": "main", "name": "ncaaf_raw_team_ratings", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/raw/ncaaf_raw_team_ratings.sql", "original_file_path": "models/ncaaf/raw/ncaaf_raw_team_ratings.sql", "unique_id": "model.sports_sims.ncaaf_raw_team_ratings", "fqn": ["sports_sims", "ncaaf", "raw", "ncaaf_raw_team_ratings"], "alias": "ncaaf_raw_team_ratings", "checksum": {"name": "sha256", "checksum": "1b98c7789cbd49770e7b57fd7b269404990ffab13c8ef97b0738efeadc555f23"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_ncaaf_docs.yml", "build_path": "../docs/run/sports_sims/models/ncaaf/raw/ncaaf_raw_team_ratings.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "external", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "created_at": 1703711283.8765416, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_raw_team_ratings\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet\"\n    )\n}}\n\nSELECT *\nFROM {{ source( 'ncaaf', 'ncaaf_team_ratings' ) }}", "language": "sql", "refs": [], "sources": [["ncaaf", "ncaaf_team_ratings"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.ncaaf.ncaaf_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/raw/ncaaf_raw_team_ratings.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM '../data/ncaaf/ncaaf_team_ratings.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_raw_schedule": {"database": "mdsbox", "schema": "main", "name": "ncaaf_raw_schedule", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/raw/ncaaf_raw_schedule.sql", "original_file_path": "models/ncaaf/raw/ncaaf_raw_schedule.sql", "unique_id": "model.sports_sims.ncaaf_raw_schedule", "fqn": ["sports_sims", "ncaaf", "raw", "ncaaf_raw_schedule"], "alias": "ncaaf_raw_schedule", "checksum": {"name": "sha256", "checksum": "868d6ab79b23233dd645af0bdda7d2bb023f906969df8a2de469962c91cb0620"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_ncaaf_docs.yml", "build_path": "../docs/run/sports_sims/models/ncaaf/raw/ncaaf_raw_schedule.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "external", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "created_at": 1703711283.8761072, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_raw_schedule\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet\"\n    )\n}}\n\nSELECT *\nFROM {{ source( 'ncaaf', 'ncaaf_schedule' ) }}", "language": "sql", "refs": [], "sources": [["ncaaf", "ncaaf_schedule"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.ncaaf.ncaaf_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/raw/ncaaf_raw_schedule.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM '../data/ncaaf/ncaaf_schedule.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_raw_results": {"database": "mdsbox", "schema": "main", "name": "ncaaf_raw_results", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/raw/ncaaf_raw_results.sql", "original_file_path": "models/ncaaf/raw/ncaaf_raw_results.sql", "unique_id": "model.sports_sims.ncaaf_raw_results", "fqn": ["sports_sims", "ncaaf", "raw", "ncaaf_raw_results"], "alias": "ncaaf_raw_results", "checksum": {"name": "sha256", "checksum": "d3ecccadb5497df4fd8d1c020c8890b963bd69c0e73da1f1d1b2558fb26044e7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "tags": ["ncaaf"], "description": "", "columns": {"winner": {"name": "winner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loser": {"name": "loser", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_ncaaf_docs.yml", "build_path": "../docs/run/sports_sims/models/ncaaf/raw/ncaaf_raw_results.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "external", "location": "{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet"}, "created_at": 1703711283.8756313, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_raw_results\"", "raw_code": "{{\n    config(\n        materialized='external',\n        location=\"{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/raw/{{this.name}}.parquet\"\n    )\n}}\n\nSELECT wk,\n    regexp_replace(\"winner\", '^\\(([1-9]|1[0-9]|2[0-5])\\) ', '') as winner,\n    winner_pts,\n    regexp_replace(\"loser\", '^\\(([1-9]|1[0-9]|2[0-5])\\) ', '') as loser,\n    loser_pts\nFROM {{ source( 'ncaaf', 'ncaaf_results' ) }}", "language": "sql", "refs": [], "sources": [["ncaaf", "ncaaf_results"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.ncaaf.ncaaf_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/raw/ncaaf_raw_results.sql", "compiled": true, "compiled_code": "\n\nSELECT wk,\n    regexp_replace(\"winner\", '^\\(([1-9]|1[0-9]|2[0-5])\\) ', '') as winner,\n    winner_pts,\n    regexp_replace(\"loser\", '^\\(([1-9]|1[0-9]|2[0-5])\\) ', '') as loser,\n    loser_pts\nFROM '../data/ncaaf/ncaaf_results.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_latest_elo": {"database": "mdsbox", "schema": "main", "name": "ncaaf_latest_elo", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/prep/ncaaf_latest_elo.sql", "original_file_path": "models/ncaaf/prep/ncaaf_latest_elo.sql", "unique_id": "model.sports_sims.ncaaf_latest_elo", "fqn": ["sports_sims", "ncaaf", "prep", "ncaaf_latest_elo"], "alias": "ncaaf_latest_elo", "checksum": {"name": "sha256", "checksum": "b85e2d41f3406aa4254438d2c6cc07d5c1b1358bd005c6ba223b8bd57a6cd6db"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/ncaaf/prep/ncaaf_latest_elo.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "view"}, "created_at": 1703711283.697106, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_latest_elo\"", "raw_code": "WITH home_rating AS (\n    SELECT home_team as team\n    , max(game_id) game_id\n    , max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n    FROM {{ ref('ncaaf_elo_rollforward') }}\n    GROUP BY ALL\n),\nvisiting_rating AS (\n    SELECT visiting_team as team\n    , max(game_id) game_id\n    , max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n    FROM {{ ref('ncaaf_elo_rollforward') }}\n    GROUP BY ALL\n),\nunion_rating AS (\n    SELECT * FROM home_rating\n    UNION ALL\n    SELECT * FROM visiting_rating\n),\nfinal_rating AS (\n    SELECT team, max_by(elo_rating, game_id) AS elo_rating\n    FROM union_rating\n    GROUP BY ALL\n)\nSELECT f.team\n, f.elo_rating AS elo_rating\n, o.elo_rating AS original_rating\n, {{ var('latest_ratings') }} AS latest_ratings\nFROM final_rating f\nINNER JOIN {{ ref('ncaaf_raw_team_ratings') }} o ON f.team = o.team", "language": "sql", "refs": [{"name": "ncaaf_elo_rollforward", "package": null, "version": null}, {"name": "ncaaf_elo_rollforward", "package": null, "version": null}, {"name": "ncaaf_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.ncaaf_elo_rollforward", "model.sports_sims.ncaaf_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/prep/ncaaf_latest_elo.sql", "compiled": true, "compiled_code": "WITH home_rating AS (\n    SELECT home_team as team\n    , max(game_id) game_id\n    , max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n    FROM \"mdsbox\".\"main\".\"ncaaf_elo_rollforward\"\n    GROUP BY ALL\n),\nvisiting_rating AS (\n    SELECT visiting_team as team\n    , max(game_id) game_id\n    , max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n    FROM \"mdsbox\".\"main\".\"ncaaf_elo_rollforward\"\n    GROUP BY ALL\n),\nunion_rating AS (\n    SELECT * FROM home_rating\n    UNION ALL\n    SELECT * FROM visiting_rating\n),\nfinal_rating AS (\n    SELECT team, max_by(elo_rating, game_id) AS elo_rating\n    FROM union_rating\n    GROUP BY ALL\n)\nSELECT f.team\n, f.elo_rating AS elo_rating\n, o.elo_rating AS original_rating\n, True AS latest_ratings\nFROM final_rating f\nINNER JOIN \"mdsbox\".\"main\".\"ncaaf_raw_team_ratings\" o ON f.team = o.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_random_num_gen": {"database": "mdsbox", "schema": "main", "name": "ncaaf_random_num_gen", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/prep/ncaaf_random_num_gen.sql", "original_file_path": "models/ncaaf/prep/ncaaf_random_num_gen.sql", "unique_id": "model.sports_sims.ncaaf_random_num_gen", "fqn": ["sports_sims", "ncaaf", "prep", "ncaaf_random_num_gen"], "alias": "ncaaf_random_num_gen", "checksum": {"name": "sha256", "checksum": "561944fc48e0391ac86d2c550a276498c7e26051e27ba1e1ab6631ba12b51098"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_ncaaf_docs.yml", "build_path": "../docs/run/sports_sims/models/ncaaf/prep/ncaaf_random_num_gen.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "table"}, "created_at": 1703711283.8814967, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_random_num_gen\"", "raw_code": "{{ \n    config(\n        materialized='table'\n) }}\n\nWITH cte_scenario_gen AS (\n    SELECT I.generate_series AS scenario_id\n    FROM generate_series(1, {{ var( 'scenarios' ) }} ) AS I\n)\nSELECT\n    i.scenario_id,\n    S.game_id,\n    (random() * 10000)::smallint AS rand_result,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_scenario_gen AS i\nCROSS JOIN {{ ref( 'ncaaf_schedules' ) }} AS S", "language": "sql", "refs": [{"name": "ncaaf_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.ncaaf_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/prep/ncaaf_random_num_gen.sql", "compiled": true, "compiled_code": "\n\nWITH cte_scenario_gen AS (\n    SELECT I.generate_series AS scenario_id\n    FROM generate_series(1, 10000 ) AS I\n)\nSELECT\n    i.scenario_id,\n    S.game_id,\n    (random() * 10000)::smallint AS rand_result,\n    0 AS sim_start_game_id\nFROM cte_scenario_gen AS i\nCROSS JOIN \"mdsbox\".\"main\".\"ncaaf_schedules\" AS S", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_latest_results": {"database": "mdsbox", "schema": "main", "name": "ncaaf_latest_results", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/prep/ncaaf_latest_results.sql", "original_file_path": "models/ncaaf/prep/ncaaf_latest_results.sql", "unique_id": "model.sports_sims.ncaaf_latest_results", "fqn": ["sports_sims", "ncaaf", "prep", "ncaaf_latest_results"], "alias": "ncaaf_latest_results", "checksum": {"name": "sha256", "checksum": "dc6deb3dc1e1ccd1e3303d8414da49817afb1d4231d0492bc1e8fd2993dd5452"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/ncaaf/prep/ncaaf_latest_results.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "view"}, "created_at": 1703711283.7074718, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_latest_results\"", "raw_code": "with cte_inner as (\n    SELECT\n        S.id as game_id,\n        S.week as week_number,\n        S.HomeTm AS home_team, \n        CASE\n            WHEN S.HomeTm = R.Winner THEN R.Winner_Pts\n            ELSE R.Loser_Pts \n        END AS home_team_score,\n        S.VisTm AS visiting_team,\n        CASE\n            WHEN S.VisTm = R.Winner THEN R.Winner_Pts\n            ELSE R.Loser_Pts \n        END AS  visiting_team_score,\n        R.Winner AS winning_team,\n        R.Loser AS losing_team,\n        {{ var('include_actuals') }} AS include_actuals,\n\n    FROM {{ ref( 'ncaaf_raw_schedule' ) }} S\n        LEFT JOIN {{ ref( 'ncaaf_raw_results' ) }} R ON R.Wk = S.week\n            AND (S.VisTm = R.Winner OR S.VisTm = R.Loser)\n    WHERE home_team_score IS NOT NULL \n    GROUP BY ALL\n),\ncte_outer AS (\n    SELECT *,\n        CASE\n            WHEN visiting_team_score > home_team_score THEN 1\n            WHEN visiting_team_score = home_team_score THEN 0.5\n            ELSE 0\n        END AS game_result,\n        ABS( visiting_team_score - home_team_score ) as margin\n    FROM cte_inner\n)\nSELECT *,\n    CASE\n        WHEN margin < 4 AND game_result = 1 THEN 0.585\n        WHEN margin < 4 AND game_result = 0 THEN 0.415\n        WHEN margin < 6 AND game_result = 1 THEN 0.666\n        WHEN margin < 6 AND game_result = 0 THEN 0.334\n        WHEN margin = 6 AND game_result = 1 THEN 0.707\n        WHEN margin = 6 AND game_result = 0 THEN 0.293\n        WHEN margin = 7 AND game_result = 1 THEN 0.73\n        WHEN margin = 7 AND game_result = 0 THEN 0.27\n        WHEN margin = 8 AND game_result = 1 THEN 0.75\n        WHEN margin = 8 AND game_result = 0 THEN 0.25\n        WHEN margin > 8 AND margin < 17 AND game_result = 1 THEN 0.85\n        WHEN margin > 8 AND margin < 17 AND game_result = 0 THEN 0.15\n        ELSE game_result\n    END AS game_result_v2\nFROM cte_outer", "language": "sql", "refs": [{"name": "ncaaf_raw_schedule", "package": null, "version": null}, {"name": "ncaaf_raw_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.ncaaf_raw_schedule", "model.sports_sims.ncaaf_raw_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/prep/ncaaf_latest_results.sql", "compiled": true, "compiled_code": "with cte_inner as (\n    SELECT\n        S.id as game_id,\n        S.week as week_number,\n        S.HomeTm AS home_team, \n        CASE\n            WHEN S.HomeTm = R.Winner THEN R.Winner_Pts\n            ELSE R.Loser_Pts \n        END AS home_team_score,\n        S.VisTm AS visiting_team,\n        CASE\n            WHEN S.VisTm = R.Winner THEN R.Winner_Pts\n            ELSE R.Loser_Pts \n        END AS  visiting_team_score,\n        R.Winner AS winning_team,\n        R.Loser AS losing_team,\n        True AS include_actuals,\n\n    FROM \"mdsbox\".\"main\".\"ncaaf_raw_schedule\" S\n        LEFT JOIN \"mdsbox\".\"main\".\"ncaaf_raw_results\" R ON R.Wk = S.week\n            AND (S.VisTm = R.Winner OR S.VisTm = R.Loser)\n    WHERE home_team_score IS NOT NULL \n    GROUP BY ALL\n),\ncte_outer AS (\n    SELECT *,\n        CASE\n            WHEN visiting_team_score > home_team_score THEN 1\n            WHEN visiting_team_score = home_team_score THEN 0.5\n            ELSE 0\n        END AS game_result,\n        ABS( visiting_team_score - home_team_score ) as margin\n    FROM cte_inner\n)\nSELECT *,\n    CASE\n        WHEN margin < 4 AND game_result = 1 THEN 0.585\n        WHEN margin < 4 AND game_result = 0 THEN 0.415\n        WHEN margin < 6 AND game_result = 1 THEN 0.666\n        WHEN margin < 6 AND game_result = 0 THEN 0.334\n        WHEN margin = 6 AND game_result = 1 THEN 0.707\n        WHEN margin = 6 AND game_result = 0 THEN 0.293\n        WHEN margin = 7 AND game_result = 1 THEN 0.73\n        WHEN margin = 7 AND game_result = 0 THEN 0.27\n        WHEN margin = 8 AND game_result = 1 THEN 0.75\n        WHEN margin = 8 AND game_result = 0 THEN 0.25\n        WHEN margin > 8 AND margin < 17 AND game_result = 1 THEN 0.85\n        WHEN margin > 8 AND margin < 17 AND game_result = 0 THEN 0.15\n        ELSE game_result\n    END AS game_result_v2\nFROM cte_outer", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_schedules": {"database": "mdsbox", "schema": "main", "name": "ncaaf_schedules", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/prep/ncaaf_schedules.sql", "original_file_path": "models/ncaaf/prep/ncaaf_schedules.sql", "unique_id": "model.sports_sims.ncaaf_schedules", "fqn": ["sports_sims", "ncaaf", "prep", "ncaaf_schedules"], "alias": "ncaaf_schedules", "checksum": {"name": "sha256", "checksum": "1cd9a7369e056787e36a91656705b58ed20eae0841b3f3f6b0ecfb579803b4dd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_conf": {"name": "visiting_conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team_elo_rating": {"name": "visiting_team_elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_conf": {"name": "home_conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_elo_rating": {"name": "home_team_elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_ncaaf_docs.yml", "build_path": "../docs/run/sports_sims/models/ncaaf/prep/ncaaf_schedules.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "view"}, "created_at": 1703711283.879552, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_schedules\"", "raw_code": "SELECT\n    S.id AS game_id,\n    S.week as week_number,\n    'reg_season' AS type,\n    0 as series_id,\n    V.conf AS visiting_conf,\n    V.team AS visiting_team,\n    COALESCE(R.visiting_team_elo_rating,V.elo_rating::int) AS visiting_team_elo_rating,\n    H.conf AS home_conf,\n    H.team AS home_team,\n    COALESCE(R.home_team_elo_rating,H.elo_rating::int) AS home_team_elo_rating\nFROM {{ ref( 'ncaaf_raw_schedule' ) }} AS S\nLEFT JOIN {{ ref( 'ncaaf_ratings' ) }} V ON V.team = S.VisTm\nLEFT JOIN {{ ref( 'ncaaf_ratings' ) }} H ON H.team = S.HomeTm\nLEFT JOIN {{ ref( 'ncaaf_elo_rollforward' ) }} R ON R.game_id = S.id\nGROUP BY ALL\n/* -- EXCLUDING UNTIL I GET A PLAYOFFS MODULE FIGURED OUT\nUNION ALL\nSELECT\n    *\nFROM {{ ref( 'nba_post_season_schedule' ) }}\n*/", "language": "sql", "refs": [{"name": "ncaaf_raw_schedule", "package": null, "version": null}, {"name": "ncaaf_ratings", "package": null, "version": null}, {"name": "ncaaf_ratings", "package": null, "version": null}, {"name": "ncaaf_elo_rollforward", "package": null, "version": null}, {"name": "nba_post_season_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.ncaaf_raw_schedule", "model.sports_sims.ncaaf_ratings", "model.sports_sims.ncaaf_elo_rollforward", "model.sports_sims.nba_post_season_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/prep/ncaaf_schedules.sql", "compiled": true, "compiled_code": "SELECT\n    S.id AS game_id,\n    S.week as week_number,\n    'reg_season' AS type,\n    0 as series_id,\n    V.conf AS visiting_conf,\n    V.team AS visiting_team,\n    COALESCE(R.visiting_team_elo_rating,V.elo_rating::int) AS visiting_team_elo_rating,\n    H.conf AS home_conf,\n    H.team AS home_team,\n    COALESCE(R.home_team_elo_rating,H.elo_rating::int) AS home_team_elo_rating\nFROM \"mdsbox\".\"main\".\"ncaaf_raw_schedule\" AS S\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_ratings\" V ON V.team = S.VisTm\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_ratings\" H ON H.team = S.HomeTm\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_elo_rollforward\" R ON R.game_id = S.id\nGROUP BY ALL\n/* -- EXCLUDING UNTIL I GET A PLAYOFFS MODULE FIGURED OUT\nUNION ALL\nSELECT\n    *\nFROM \"mdsbox\".\"main\".\"nba_post_season_schedule\"\n*/", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_teams": {"database": "mdsbox", "schema": "main", "name": "ncaaf_teams", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/prep/ncaaf_teams.sql", "original_file_path": "models/ncaaf/prep/ncaaf_teams.sql", "unique_id": "model.sports_sims.ncaaf_teams", "fqn": ["sports_sims", "ncaaf", "prep", "ncaaf_teams"], "alias": "ncaaf_teams", "checksum": {"name": "sha256", "checksum": "c14d5196d8e9bd0c9b469423971cbde68675ad19bc3c7aa79ba62397ca42d1f6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {"team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_ncaaf_docs.yml", "build_path": "../docs/run/sports_sims/models/ncaaf/prep/ncaaf_teams.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "view"}, "created_at": 1703711283.882218, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_teams\"", "raw_code": "SELECT\n    S.VisTm AS team_long,\n   -- R.team\nFROM {{ ref( 'ncaaf_raw_schedule' ) }} S\n--LEFT JOIN {{ ref( 'ncaaf_ratings' ) }} AS R ON R.team = S.VisTm\n--WHERE R.team IS NOT NULL\nGROUP BY ALL", "language": "sql", "refs": [{"name": "ncaaf_raw_schedule", "package": null, "version": null}, {"name": "ncaaf_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.ncaaf_raw_schedule", "model.sports_sims.ncaaf_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/prep/ncaaf_teams.sql", "compiled": true, "compiled_code": "SELECT\n    S.VisTm AS team_long,\n   -- R.team\nFROM \"mdsbox\".\"main\".\"ncaaf_raw_schedule\" S\n--LEFT JOIN \"mdsbox\".\"main\".\"ncaaf_ratings\" AS R ON R.team = S.VisTm\n--WHERE R.team IS NOT NULL\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_vegas_wins": {"database": "mdsbox", "schema": "main", "name": "ncaaf_vegas_wins", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/prep/ncaaf_vegas_wins.sql", "original_file_path": "models/ncaaf/prep/ncaaf_vegas_wins.sql", "unique_id": "model.sports_sims.ncaaf_vegas_wins", "fqn": ["sports_sims", "ncaaf", "prep", "ncaaf_vegas_wins"], "alias": "ncaaf_vegas_wins", "checksum": {"name": "sha256", "checksum": "1ad079fa274b9b4312abb3823d5fa9bea2032e5ca5a77af6fc7225cd596c4225"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_ncaaf_docs.yml", "build_path": "../docs/run/sports_sims/models/ncaaf/prep/ncaaf_vegas_wins.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "view"}, "created_at": 1703711283.882705, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_vegas_wins\"", "raw_code": "SELECT\n    team,\n    win_total\nFROM {{ ref( 'ncaaf_ratings' ) }}\nGROUP BY ALL", "language": "sql", "refs": [{"name": "ncaaf_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.ncaaf_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/prep/ncaaf_vegas_wins.sql", "compiled": true, "compiled_code": "SELECT\n    team,\n    win_total\nFROM \"mdsbox\".\"main\".\"ncaaf_ratings\"\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_reg_season_actuals": {"database": "mdsbox", "schema": "main", "name": "ncaaf_reg_season_actuals", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/prep/ncaaf_reg_season_actuals.sql", "original_file_path": "models/ncaaf/prep/ncaaf_reg_season_actuals.sql", "unique_id": "model.sports_sims.ncaaf_reg_season_actuals", "fqn": ["sports_sims", "ncaaf", "prep", "ncaaf_reg_season_actuals"], "alias": "ncaaf_reg_season_actuals", "checksum": {"name": "sha256", "checksum": "26b8e6c369408e13c8a4e6708200c4dd683eab40c6e19885bb5e751961be1afa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/ncaaf/prep/ncaaf_reg_season_actuals.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "view"}, "created_at": 1703711283.718494, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_reg_season_actuals\"", "raw_code": "WITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'ncaaf_latest_results' ) }}\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'ncaaf_latest_results' ) }}\n    GROUP BY ALL\n)\n\nSELECT\n    T.team_long as team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses\nFROM {{ ref( 'ncaaf_teams' ) }} T\nLEFT JOIN cte_wins W ON W.winning_team = T.team_long\nLEFT JOIN cte_losses L ON L.losing_team = T.Team_long", "language": "sql", "refs": [{"name": "ncaaf_latest_results", "package": null, "version": null}, {"name": "ncaaf_latest_results", "package": null, "version": null}, {"name": "ncaaf_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.ncaaf_latest_results", "model.sports_sims.ncaaf_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/prep/ncaaf_reg_season_actuals.sql", "compiled": true, "compiled_code": "WITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM \"mdsbox\".\"main\".\"ncaaf_latest_results\"\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM \"mdsbox\".\"main\".\"ncaaf_latest_results\"\n    GROUP BY ALL\n)\n\nSELECT\n    T.team_long as team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses\nFROM \"mdsbox\".\"main\".\"ncaaf_teams\" T\nLEFT JOIN cte_wins W ON W.winning_team = T.team_long\nLEFT JOIN cte_losses L ON L.losing_team = T.Team_long", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_ratings": {"database": "mdsbox", "schema": "main", "name": "ncaaf_ratings", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/prep/ncaaf_ratings.sql", "original_file_path": "models/ncaaf/prep/ncaaf_ratings.sql", "unique_id": "model.sports_sims.ncaaf_ratings", "fqn": ["sports_sims", "ncaaf", "prep", "ncaaf_ratings"], "alias": "ncaaf_ratings", "checksum": {"name": "sha256", "checksum": "9daec8ed20723c320c1f4289361df9d6a36533b32ff19d24a686a39cab1db614"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conf": {"name": "conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "elo_rating": {"name": "elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_ncaaf_docs.yml", "build_path": "../docs/run/sports_sims/models/ncaaf/prep/ncaaf_ratings.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "view"}, "created_at": 1703711283.8810904, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_ratings\"", "raw_code": "SELECT\n    orig.team,\n    orig.conf,\n    orig.division,\n    orig.team_short,\n    CASE\n        WHEN latest.latest_ratings = true AND latest.elo_rating IS NOT NULL THEN latest.elo_rating\n        ELSE orig.elo_rating\n    END AS elo_rating,\n    orig.elo_rating AS original_rating,\n    orig.win_total\nFROM {{ ref( 'ncaaf_raw_team_ratings' ) }} orig\nLEFT JOIN {{ ref( 'ncaaf_latest_elo' ) }} latest ON latest.team = orig.team\nGROUP BY ALL", "language": "sql", "refs": [{"name": "ncaaf_raw_team_ratings", "package": null, "version": null}, {"name": "ncaaf_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.ncaaf_raw_team_ratings", "model.sports_sims.ncaaf_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/prep/ncaaf_ratings.sql", "compiled": true, "compiled_code": "SELECT\n    orig.team,\n    orig.conf,\n    orig.division,\n    orig.team_short,\n    CASE\n        WHEN latest.latest_ratings = true AND latest.elo_rating IS NOT NULL THEN latest.elo_rating\n        ELSE orig.elo_rating\n    END AS elo_rating,\n    orig.elo_rating AS original_rating,\n    orig.win_total\nFROM \"mdsbox\".\"main\".\"ncaaf_raw_team_ratings\" orig\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_latest_elo\" latest ON latest.team = orig.team\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_reg_season_simulator": {"database": "mdsbox", "schema": "main", "name": "ncaaf_reg_season_simulator", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/simulator/ncaaf_reg_season_simulator.sql", "original_file_path": "models/ncaaf/simulator/ncaaf_reg_season_simulator.sql", "unique_id": "model.sports_sims.ncaaf_reg_season_simulator", "fqn": ["sports_sims", "ncaaf", "simulator", "ncaaf_reg_season_simulator"], "alias": "ncaaf_reg_season_simulator", "checksum": {"name": "sha256", "checksum": "f44fdd44607cdd9f7ef747a0dfdf20ddd87a72742a6286054339a655f7452b7f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/ncaaf/simulator/ncaaf_reg_season_simulator.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "view"}, "created_at": 1703711283.722865, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_reg_season_simulator\"", "raw_code": "SELECT \n    R.scenario_id,\n    S.*,\n    {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating', var('ncaaf_elo_offset') ) }} as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN LR.include_actuals = true THEN LR.winning_team\n        WHEN {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating', var('ncaaf_elo_offset') ) }}  >= R.rand_result THEN S.home_team\n        ELSE S.visiting_team\n    END AS winning_team,\n    COALESCE(LR.include_actuals, false) AS include_actuals\nFROM {{ ref( 'ncaaf_schedules' ) }} S\nLEFT JOIN {{ ref( 'ncaaf_random_num_gen' ) }} R ON R.game_id = S.game_id\nLEFT JOIN 'ncaaf_latest_results'  LR ON LR.game_id = S.game_id\nWHERE S.type = 'reg_season'", "language": "sql", "refs": [{"name": "ncaaf_schedules", "package": null, "version": null}, {"name": "ncaaf_random_num_gen", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc"], "nodes": ["model.sports_sims.ncaaf_schedules", "model.sports_sims.ncaaf_random_num_gen"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/simulator/ncaaf_reg_season_simulator.sql", "compiled": true, "compiled_code": "SELECT \n    R.scenario_id,\n    S.*,\n    ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 52)::real/400)+1))) * 10000 as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN LR.include_actuals = true THEN LR.winning_team\n        WHEN ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 52)::real/400)+1))) * 10000  >= R.rand_result THEN S.home_team\n        ELSE S.visiting_team\n    END AS winning_team,\n    COALESCE(LR.include_actuals, false) AS include_actuals\nFROM \"mdsbox\".\"main\".\"ncaaf_schedules\" S\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_random_num_gen\" R ON R.game_id = S.game_id\nLEFT JOIN 'ncaaf_latest_results'  LR ON LR.game_id = S.game_id\nWHERE S.type = 'reg_season'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_reg_season_end": {"database": "mdsbox", "schema": "main", "name": "ncaaf_reg_season_end", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/simulator/ncaaf_reg_season_end.sql", "original_file_path": "models/ncaaf/simulator/ncaaf_reg_season_end.sql", "unique_id": "model.sports_sims.ncaaf_reg_season_end", "fqn": ["sports_sims", "ncaaf", "simulator", "ncaaf_reg_season_end"], "alias": "ncaaf_reg_season_end", "checksum": {"name": "sha256", "checksum": "20af5898b84e9e8d10d888068ba704844f9fb2e39bfc23f65bce350239d48033"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/ncaaf/simulator/ncaaf_reg_season_end.sql", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "view"}, "created_at": 1703711283.7284913, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_reg_season_end\"", "raw_code": "WITH cte_wins AS (\n    SELECT\n        S.scenario_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_conf\n            ELSE S.visiting_conf\n        END AS conf,\n     /*   CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n        COUNT(*) AS wins\n    FROM {{ ref( 'ncaaf_reg_season_simulator' ) }} S\n    GROUP BY ALL\n),\n\ncte_ranked_wins AS (\n    SELECT\n        *,\n        --no tiebreaker, so however row number handles order ties will need to be dealt with\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, conf ORDER BY wins DESC, winning_team DESC ) AS season_rank\n    FROM cte_wins\n\n),\n\ncte_made_playoffs AS (\n    SELECT\n        *,\n        CASE\n            WHEN season_rank = 1 THEN 1\n            ELSE 0\n        END AS first_round_bye,\n        CASE\n            WHEN season_rank BETWEEN 1 AND 7 THEN 1\n            ELSE 0\n        END AS made_playoffs,\n        conf || '-' || season_rank::text AS seed\n    FROM cte_ranked_wins\n)\n\nSELECT \n    MP.*,\n    LE.elo_rating,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_made_playoffs MP\nLEFT JOIN {{ ref( 'ncaaf_latest_elo' ) }} LE ON LE.team = MP.winning_team", "language": "sql", "refs": [{"name": "ncaaf_reg_season_simulator", "package": null, "version": null}, {"name": "ncaaf_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.ncaaf_reg_season_simulator", "model.sports_sims.ncaaf_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/simulator/ncaaf_reg_season_end.sql", "compiled": true, "compiled_code": "WITH cte_wins AS (\n    SELECT\n        S.scenario_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_conf\n            ELSE S.visiting_conf\n        END AS conf,\n     /*   CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n        COUNT(*) AS wins\n    FROM \"mdsbox\".\"main\".\"ncaaf_reg_season_simulator\" S\n    GROUP BY ALL\n),\n\ncte_ranked_wins AS (\n    SELECT\n        *,\n        --no tiebreaker, so however row number handles order ties will need to be dealt with\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, conf ORDER BY wins DESC, winning_team DESC ) AS season_rank\n    FROM cte_wins\n\n),\n\ncte_made_playoffs AS (\n    SELECT\n        *,\n        CASE\n            WHEN season_rank = 1 THEN 1\n            ELSE 0\n        END AS first_round_bye,\n        CASE\n            WHEN season_rank BETWEEN 1 AND 7 THEN 1\n            ELSE 0\n        END AS made_playoffs,\n        conf || '-' || season_rank::text AS seed\n    FROM cte_ranked_wins\n)\n\nSELECT \n    MP.*,\n    LE.elo_rating,\n    0 AS sim_start_game_id\nFROM cte_made_playoffs MP\nLEFT JOIN \"mdsbox\".\"main\".\"ncaaf_latest_elo\" LE ON LE.team = MP.winning_team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_elo_rollforward": {"database": "mdsbox", "schema": "main", "name": "nba_elo_rollforward", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_elo_rollforward.py", "original_file_path": "models/nba/prep/nba_elo_rollforward.py", "unique_id": "model.sports_sims.nba_elo_rollforward", "fqn": ["sports_sims", "nba", "prep", "nba_elo_rollforward"], "alias": "nba_elo_rollforward", "checksum": {"name": "sha256", "checksum": "eed12aae9ceb4e057042e1e4f818cba4b45f879d45ab7a317398f81e75e46f05"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "config_keys_used": ["nba_elo_offset"], "config_keys_defaults": [70.0]}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/prep/nba_elo_rollforward.py", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "table", "config_keys_used": ["nba_elo_offset"], "config_keys_defaults": [70.0]}, "created_at": 1703711283.7331128, "relation_name": "\"mdsbox\".\"main\".\"nba_elo_rollforward\"", "raw_code": "import pandas as pd\n\ndef calc_elo_diff(game_result: float, home_elo: float, visiting_elo: float, home_adv: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    return 25.0 * (( game_result ) - (1.0 / (10.0 ** (-(visiting_elo - home_elo - home_adv) / 400.0) + 1.0)))\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"nba_elo_offset\",70.0)\n    team_ratings = dbt.ref(\"nba_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team_long\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"nba_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, game_result_v2\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, game_result) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change =  calc_elo_diff(game_result, helo, velo, home_adv)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)", "language": "python", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.sports_sims.nba_raw_team_ratings", "model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_elo_rollforward.py", "compiled": true, "compiled_code": "import pandas as pd\n\ndef calc_elo_diff(game_result: float, home_elo: float, visiting_elo: float, home_adv: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    return 25.0 * (( game_result ) - (1.0 / (10.0 ** (-(visiting_elo - home_elo - home_adv) / 400.0) + 1.0)))\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"nba_elo_offset\",70.0)\n    team_ratings = dbt.ref(\"nba_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team_long\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"nba_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, game_result_v2\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, game_result) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change =  calc_elo_diff(game_result, helo, velo, home_adv)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"nba_latest_results\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"nba_latest_results\\\"\", \"nba_raw_team_ratings\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"nba_raw_team_ratings\\\"\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {'nba_elo_offset': 70.0}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"mdsbox\"\n    schema = \"main\"\n    identifier = \"nba_elo_rollforward\"\n    \n    def __repr__(self):\n        return '\"mdsbox\".\"main\".\"nba_elo_rollforward\"'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nfl_elo_rollforward": {"database": "mdsbox", "schema": "main", "name": "nfl_elo_rollforward", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_elo_rollforward.py", "original_file_path": "models/nfl/prep/nfl_elo_rollforward.py", "unique_id": "model.sports_sims.nfl_elo_rollforward", "fqn": ["sports_sims", "nfl", "prep", "nfl_elo_rollforward"], "alias": "nfl_elo_rollforward", "checksum": {"name": "sha256", "checksum": "573ad2e2ff40256600847549c8e04a771847518792b666fa9275549f5f6d738f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "config_keys_used": ["nfl_elo_offset"], "config_keys_defaults": [52.0]}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_elo_rollforward.py", "deferred": false, "unrendered_config": {"tags": "nfl", "materialized": "table", "config_keys_used": ["nfl_elo_offset"], "config_keys_defaults": [52.0]}, "created_at": 1703711283.737017, "relation_name": "\"mdsbox\".\"main\".\"nfl_elo_rollforward\"", "raw_code": "import pandas as pd\n\ndef calc_elo_diff(game_result: float, home_elo: float, visiting_elo: float, home_adv: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    return 60.0 * (( game_result ) - (1.0 / (10.0 ** (-(visiting_elo - home_elo - home_adv) / 400.0) + 1.0)))\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"nfl_elo_offset\",52.0)\n    team_ratings = dbt.ref(\"nfl_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"nfl_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, game_result_v2\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, game_result) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change =  calc_elo_diff(game_result, helo, velo, home_adv)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)", "language": "python", "refs": [{"name": "nfl_raw_team_ratings", "package": null, "version": null}, {"name": "nfl_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.sports_sims.nfl_raw_team_ratings", "model.sports_sims.nfl_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_elo_rollforward.py", "compiled": true, "compiled_code": "import pandas as pd\n\ndef calc_elo_diff(game_result: float, home_elo: float, visiting_elo: float, home_adv: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    return 60.0 * (( game_result ) - (1.0 / (10.0 ** (-(visiting_elo - home_elo - home_adv) / 400.0) + 1.0)))\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"nfl_elo_offset\",52.0)\n    team_ratings = dbt.ref(\"nfl_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"nfl_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, game_result_v2\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, game_result) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change =  calc_elo_diff(game_result, helo, velo, home_adv)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"nfl_latest_results\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"nfl_latest_results\\\"\", \"nfl_raw_team_ratings\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"nfl_raw_team_ratings\\\"\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {'nfl_elo_offset': 52.0}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"mdsbox\"\n    schema = \"main\"\n    identifier = \"nfl_elo_rollforward\"\n    \n    def __repr__(self):\n        return '\"mdsbox\".\"main\".\"nfl_elo_rollforward\"'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.ncaaf_elo_rollforward": {"database": "mdsbox", "schema": "main", "name": "ncaaf_elo_rollforward", "resource_type": "model", "package_name": "sports_sims", "path": "ncaaf/prep/ncaaf_elo_rollforward.py", "original_file_path": "models/ncaaf/prep/ncaaf_elo_rollforward.py", "unique_id": "model.sports_sims.ncaaf_elo_rollforward", "fqn": ["sports_sims", "ncaaf", "prep", "ncaaf_elo_rollforward"], "alias": "ncaaf_elo_rollforward", "checksum": {"name": "sha256", "checksum": "6f879a0080ac85b614ce10df9ab82adcce4548f4987f15871fca8f4c8af56baa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["ncaaf"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "config_keys_used": ["ncaaf_elo_offset"], "config_keys_defaults": [52.0]}, "tags": ["ncaaf"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/ncaaf/prep/ncaaf_elo_rollforward.py", "deferred": false, "unrendered_config": {"tags": "ncaaf", "materialized": "table", "config_keys_used": ["ncaaf_elo_offset"], "config_keys_defaults": [52.0]}, "created_at": 1703711283.7407053, "relation_name": "\"mdsbox\".\"main\".\"ncaaf_elo_rollforward\"", "raw_code": "import pandas as pd\n\ndef calc_elo_diff(game_result: float, home_elo: float, visiting_elo: float, home_adv: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    return 150.0 * (( game_result ) - (1.0 / (10.0 ** (-(visiting_elo - home_elo - home_adv) / 400.0) + 1.0)))\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"ncaaf_elo_offset\",52.0)\n    team_ratings = dbt.ref(\"ncaaf_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"ncaaf_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, game_result_v2\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, game_result) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change =  calc_elo_diff(game_result, helo, velo, home_adv)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)", "language": "python", "refs": [{"name": "ncaaf_raw_team_ratings", "package": null, "version": null}, {"name": "ncaaf_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.sports_sims.ncaaf_raw_team_ratings", "model.sports_sims.ncaaf_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/ncaaf/prep/ncaaf_elo_rollforward.py", "compiled": true, "compiled_code": "import pandas as pd\n\ndef calc_elo_diff(game_result: float, home_elo: float, visiting_elo: float, home_adv: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    return 150.0 * (( game_result ) - (1.0 / (10.0 ** (-(visiting_elo - home_elo - home_adv) / 400.0) + 1.0)))\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"ncaaf_elo_offset\",52.0)\n    team_ratings = dbt.ref(\"ncaaf_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"ncaaf_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, game_result_v2\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, game_result) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change =  calc_elo_diff(game_result, helo, velo, home_adv)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"ncaaf_latest_results\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"ncaaf_latest_results\\\"\", \"ncaaf_raw_team_ratings\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"ncaaf_raw_team_ratings\\\"\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {'ncaaf_elo_offset': 52.0}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"mdsbox\"\n    schema = \"main\"\n    identifier = \"ncaaf_elo_rollforward\"\n    \n    def __repr__(self):\n        return '\"mdsbox\".\"main\".\"ncaaf_elo_rollforward\"'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "operation.sports_sims.sports_sims-on-run-start-0": {"database": "mdsbox", "schema": "main", "name": "sports_sims-on-run-start-0", "resource_type": "operation", "package_name": "sports_sims", "path": "hooks/sports_sims-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.sports_sims.sports_sims-on-run-start-0", "fqn": ["sports_sims", "hooks", "sports_sims-on-run-start-0"], "alias": "sports_sims-on-run-start-0", "checksum": {"name": "sha256", "checksum": "452868d6bb04677f0e77d7e365db33b884a0a8c9300a80869ac1d8de49222c3a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703711283.8063107, "relation_name": null, "raw_code": "{{ register_upstream_external_models() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_duckdb.register_upstream_external_models"], "nodes": []}, "compiled_path": "../docs/compiled/sports_sims/./dbt_project.yml/hooks/sports_sims-on-run-start-0.sql", "compiled": true, "compiled_code": "\n\n\n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "test.sports_sims.relationships_ncaaf_raw_results_winner__Team__ref_ncaaf_raw_team_ratings_.579c1da047": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('ncaaf_raw_team_ratings')", "field": "Team", "column_name": "winner", "model": "{{ get_where_subquery(ref('ncaaf_raw_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "relationships_ncaaf_raw_results_winner__Team__ref_ncaaf_raw_team_ratings_", "resource_type": "test", "package_name": "sports_sims", "path": "relationships_ncaaf_raw_result_3afb68c11d858d7cef39b1724f8dc2ab.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.relationships_ncaaf_raw_results_winner__Team__ref_ncaaf_raw_team_ratings_.579c1da047", "fqn": ["sports_sims", "relationships_ncaaf_raw_results_winner__Team__ref_ncaaf_raw_team_ratings_"], "alias": "relationships_ncaaf_raw_result_3afb68c11d858d7cef39b1724f8dc2ab", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_ncaaf_raw_result_3afb68c11d858d7cef39b1724f8dc2ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/relationships_ncaaf_raw_result_3afb68c11d858d7cef39b1724f8dc2ab.sql", "deferred": false, "unrendered_config": {"alias": "relationships_ncaaf_raw_result_3afb68c11d858d7cef39b1724f8dc2ab"}, "created_at": 1703711283.954577, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_ncaaf_raw_result_3afb68c11d858d7cef39b1724f8dc2ab\") }}", "language": "sql", "refs": [{"name": "ncaaf_raw_team_ratings", "package": null, "version": null}, {"name": "ncaaf_raw_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_raw_team_ratings", "model.sports_sims.ncaaf_raw_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/relationships_ncaaf_raw_result_3afb68c11d858d7cef39b1724f8dc2ab.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select winner as from_field\n    from \"mdsbox\".\"main\".\"ncaaf_raw_results\"\n    where winner is not null\n),\n\nparent as (\n    select Team as to_field\n    from \"mdsbox\".\"main\".\"ncaaf_raw_team_ratings\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "winner", "file_key_name": "models.ncaaf_raw_results", "attached_node": "model.sports_sims.ncaaf_raw_results"}, "test.sports_sims.relationships_ncaaf_raw_results_loser__Team__ref_ncaaf_raw_team_ratings_.a76c7d2cd3": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('ncaaf_raw_team_ratings')", "field": "Team", "column_name": "loser", "model": "{{ get_where_subquery(ref('ncaaf_raw_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "relationships_ncaaf_raw_results_loser__Team__ref_ncaaf_raw_team_ratings_", "resource_type": "test", "package_name": "sports_sims", "path": "relationships_ncaaf_raw_result_53c3810c8baf4e3cab0476de8420d813.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.relationships_ncaaf_raw_results_loser__Team__ref_ncaaf_raw_team_ratings_.a76c7d2cd3", "fqn": ["sports_sims", "relationships_ncaaf_raw_results_loser__Team__ref_ncaaf_raw_team_ratings_"], "alias": "relationships_ncaaf_raw_result_53c3810c8baf4e3cab0476de8420d813", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_ncaaf_raw_result_53c3810c8baf4e3cab0476de8420d813", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/relationships_ncaaf_raw_result_53c3810c8baf4e3cab0476de8420d813.sql", "deferred": false, "unrendered_config": {"alias": "relationships_ncaaf_raw_result_53c3810c8baf4e3cab0476de8420d813"}, "created_at": 1703711283.964515, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_ncaaf_raw_result_53c3810c8baf4e3cab0476de8420d813\") }}", "language": "sql", "refs": [{"name": "ncaaf_raw_team_ratings", "package": null, "version": null}, {"name": "ncaaf_raw_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_raw_team_ratings", "model.sports_sims.ncaaf_raw_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/relationships_ncaaf_raw_result_53c3810c8baf4e3cab0476de8420d813.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select loser as from_field\n    from \"mdsbox\".\"main\".\"ncaaf_raw_results\"\n    where loser is not null\n),\n\nparent as (\n    select Team as to_field\n    from \"mdsbox\".\"main\".\"ncaaf_raw_team_ratings\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "loser", "file_key_name": "models.ncaaf_raw_results", "attached_node": "model.sports_sims.ncaaf_raw_results"}, "test.sports_sims.empty_table_ncaaf_raw_results_.2073253158": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('ncaaf_raw_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_ncaaf_raw_results_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_ncaaf_raw_results_.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.empty_table_ncaaf_raw_results_.2073253158", "fqn": ["sports_sims", "empty_table_ncaaf_raw_results_"], "alias": "empty_table_ncaaf_raw_results_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/empty_table_ncaaf_raw_results_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711283.9685645, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_raw_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_raw_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/empty_table_ncaaf_raw_results_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"ncaaf_raw_results\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.ncaaf_raw_results", "attached_node": "model.sports_sims.ncaaf_raw_results"}, "test.sports_sims.empty_table_ncaaf_raw_schedule_.03fe05d2ce": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('ncaaf_raw_schedule')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_ncaaf_raw_schedule_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_ncaaf_raw_schedule_.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.empty_table_ncaaf_raw_schedule_.03fe05d2ce", "fqn": ["sports_sims", "empty_table_ncaaf_raw_schedule_"], "alias": "empty_table_ncaaf_raw_schedule_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/empty_table_ncaaf_raw_schedule_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711283.9727147, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_raw_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_raw_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/empty_table_ncaaf_raw_schedule_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"ncaaf_raw_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.ncaaf_raw_schedule", "attached_node": "model.sports_sims.ncaaf_raw_schedule"}, "test.sports_sims.empty_table_ncaaf_raw_team_ratings_.85d416c50d": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('ncaaf_raw_team_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_ncaaf_raw_team_ratings_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_ncaaf_raw_team_ratings_.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.empty_table_ncaaf_raw_team_ratings_.85d416c50d", "fqn": ["sports_sims", "empty_table_ncaaf_raw_team_ratings_"], "alias": "empty_table_ncaaf_raw_team_ratings_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/empty_table_ncaaf_raw_team_ratings_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711283.976297, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/empty_table_ncaaf_raw_team_ratings_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"ncaaf_raw_team_ratings\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.ncaaf_raw_team_ratings", "attached_node": "model.sports_sims.ncaaf_raw_team_ratings"}, "test.sports_sims.unique_ncaaf_schedules_game_id.3f2bfaf1a2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('ncaaf_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_ncaaf_schedules_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "unique_ncaaf_schedules_game_id.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.unique_ncaaf_schedules_game_id.3f2bfaf1a2", "fqn": ["sports_sims", "unique_ncaaf_schedules_game_id"], "alias": "unique_ncaaf_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/unique_ncaaf_schedules_game_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711283.9797883, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/unique_ncaaf_schedules_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"ncaaf_schedules\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.ncaaf_schedules", "attached_node": "model.sports_sims.ncaaf_schedules"}, "test.sports_sims.not_null_ncaaf_schedules_game_id.2e4060e794": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('ncaaf_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_ncaaf_schedules_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_ncaaf_schedules_game_id.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.not_null_ncaaf_schedules_game_id.2e4060e794", "fqn": ["sports_sims", "not_null_ncaaf_schedules_game_id"], "alias": "not_null_ncaaf_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_schedules_game_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711283.9812312, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_schedules_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"mdsbox\".\"main\".\"ncaaf_schedules\"\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.ncaaf_schedules", "attached_node": "model.sports_sims.ncaaf_schedules"}, "test.sports_sims.accepted_values_ncaaf_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a26fe6d7b9": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["reg_season", "playin_r1", "playin_r2", "playoffs_r1", "playoffs_r2", "playoffs_r3", "playoffs_r4"], "column_name": "type", "model": "{{ get_where_subquery(ref('ncaaf_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "accepted_values_ncaaf_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4", "resource_type": "test", "package_name": "sports_sims", "path": "accepted_values_ncaaf_schedule_172092232f34862493057721854974ac.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.accepted_values_ncaaf_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a26fe6d7b9", "fqn": ["sports_sims", "accepted_values_ncaaf_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4"], "alias": "accepted_values_ncaaf_schedule_172092232f34862493057721854974ac", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_ncaaf_schedule_172092232f34862493057721854974ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/accepted_values_ncaaf_schedule_172092232f34862493057721854974ac.sql", "deferred": false, "unrendered_config": {"alias": "accepted_values_ncaaf_schedule_172092232f34862493057721854974ac"}, "created_at": 1703711283.982811, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_ncaaf_schedule_172092232f34862493057721854974ac\") }}", "language": "sql", "refs": [{"name": "ncaaf_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/accepted_values_ncaaf_schedule_172092232f34862493057721854974ac.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        type as value_field,\n        count(*) as n_records\n\n    from \"mdsbox\".\"main\".\"ncaaf_schedules\"\n    group by type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'reg_season','playin_r1','playin_r2','playoffs_r1','playoffs_r2','playoffs_r3','playoffs_r4'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.ncaaf_schedules", "attached_node": "model.sports_sims.ncaaf_schedules"}, "test.sports_sims.not_null_ncaaf_schedules_visiting_team.e685957c5d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('ncaaf_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_ncaaf_schedules_visiting_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_ncaaf_schedules_visiting_team.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.not_null_ncaaf_schedules_visiting_team.e685957c5d", "fqn": ["sports_sims", "not_null_ncaaf_schedules_visiting_team"], "alias": "not_null_ncaaf_schedules_visiting_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_schedules_visiting_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711283.9921703, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_schedules_visiting_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visiting_team\nfrom \"mdsbox\".\"main\".\"ncaaf_schedules\"\nwhere visiting_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visiting_team", "file_key_name": "models.ncaaf_schedules", "attached_node": "model.sports_sims.ncaaf_schedules"}, "test.sports_sims.not_null_ncaaf_schedules_home_team.e82e78a642": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('ncaaf_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_ncaaf_schedules_home_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_ncaaf_schedules_home_team.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.not_null_ncaaf_schedules_home_team.e82e78a642", "fqn": ["sports_sims", "not_null_ncaaf_schedules_home_team"], "alias": "not_null_ncaaf_schedules_home_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_schedules_home_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711283.9935842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_schedules_home_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team\nfrom \"mdsbox\".\"main\".\"ncaaf_schedules\"\nwhere home_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team", "file_key_name": "models.ncaaf_schedules", "attached_node": "model.sports_sims.ncaaf_schedules"}, "test.sports_sims.not_null_ncaaf_ratings_team.c4a7648531": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('ncaaf_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_ncaaf_ratings_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_ncaaf_ratings_team.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.not_null_ncaaf_ratings_team.c4a7648531", "fqn": ["sports_sims", "not_null_ncaaf_ratings_team"], "alias": "not_null_ncaaf_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_ratings_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711283.995257, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"ncaaf_ratings\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.ncaaf_ratings", "attached_node": "model.sports_sims.ncaaf_ratings"}, "test.sports_sims.unique_ncaaf_ratings_team.f5e08a641e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('ncaaf_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_ncaaf_ratings_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_ncaaf_ratings_team.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.unique_ncaaf_ratings_team.f5e08a641e", "fqn": ["sports_sims", "unique_ncaaf_ratings_team"], "alias": "unique_ncaaf_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/unique_ncaaf_ratings_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711283.9966476, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/unique_ncaaf_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"ncaaf_ratings\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.ncaaf_ratings", "attached_node": "model.sports_sims.ncaaf_ratings"}, "test.sports_sims.not_null_ncaaf_ratings_conf.9ae3d4698b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "conf", "model": "{{ get_where_subquery(ref('ncaaf_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_ncaaf_ratings_conf", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_ncaaf_ratings_conf.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.not_null_ncaaf_ratings_conf.9ae3d4698b", "fqn": ["sports_sims", "not_null_ncaaf_ratings_conf"], "alias": "not_null_ncaaf_ratings_conf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_ratings_conf.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711283.9980135, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_ratings_conf.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect conf\nfrom \"mdsbox\".\"main\".\"ncaaf_ratings\"\nwhere conf is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "conf", "file_key_name": "models.ncaaf_ratings", "attached_node": "model.sports_sims.ncaaf_ratings"}, "test.sports_sims.accepted_values_ncaaf_ratings_conf__SEC_East___SEC_West___Big_Ten_East___ACC__CUSA__Big_12__Pac_12__American__MWC__Ind__Big_Ten_West___Sun_Belt_East___Sun_Belt_West___MAC_East___MAC_West___Other.5b0972eb60": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["SEC (East)", "SEC (West)", "Big Ten (East)", "ACC", "CUSA", "Big 12", "Pac-12", "American", "MWC", "Ind", "Big Ten (West)", "Sun Belt (East)", "Sun Belt (West)", "MAC (East)", "MAC (West)", "Other"], "column_name": "conf", "model": "{{ get_where_subquery(ref('ncaaf_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "accepted_values_ncaaf_ratings_conf__SEC_East___SEC_West___Big_Ten_East___ACC__CUSA__Big_12__Pac_12__American__MWC__Ind__Big_Ten_West___Sun_Belt_East___Sun_Belt_West___MAC_East___MAC_West___Other", "resource_type": "test", "package_name": "sports_sims", "path": "accepted_values_ncaaf_ratings_21124a4cd8c88470d1c55b9f77385749.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.accepted_values_ncaaf_ratings_conf__SEC_East___SEC_West___Big_Ten_East___ACC__CUSA__Big_12__Pac_12__American__MWC__Ind__Big_Ten_West___Sun_Belt_East___Sun_Belt_West___MAC_East___MAC_West___Other.5b0972eb60", "fqn": ["sports_sims", "accepted_values_ncaaf_ratings_conf__SEC_East___SEC_West___Big_Ten_East___ACC__CUSA__Big_12__Pac_12__American__MWC__Ind__Big_Ten_West___Sun_Belt_East___Sun_Belt_West___MAC_East___MAC_West___Other"], "alias": "accepted_values_ncaaf_ratings_21124a4cd8c88470d1c55b9f77385749", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_ncaaf_ratings_21124a4cd8c88470d1c55b9f77385749", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/accepted_values_ncaaf_ratings_21124a4cd8c88470d1c55b9f77385749.sql", "deferred": false, "unrendered_config": {"alias": "accepted_values_ncaaf_ratings_21124a4cd8c88470d1c55b9f77385749"}, "created_at": 1703711283.9995098, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_ncaaf_ratings_21124a4cd8c88470d1c55b9f77385749\") }}", "language": "sql", "refs": [{"name": "ncaaf_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/accepted_values_ncaaf_ratings_21124a4cd8c88470d1c55b9f77385749.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        conf as value_field,\n        count(*) as n_records\n\n    from \"mdsbox\".\"main\".\"ncaaf_ratings\"\n    group by conf\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'SEC (East)','SEC (West)','Big Ten (East)','ACC','CUSA','Big 12','Pac-12','American','MWC','Ind','Big Ten (West)','Sun Belt (East)','Sun Belt (West)','MAC (East)','MAC (West)','Other'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "conf", "file_key_name": "models.ncaaf_ratings", "attached_node": "model.sports_sims.ncaaf_ratings"}, "test.sports_sims.not_null_ncaaf_ratings_elo_rating.a604fa0172": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "elo_rating", "model": "{{ get_where_subquery(ref('ncaaf_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_ncaaf_ratings_elo_rating", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_ncaaf_ratings_elo_rating.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.not_null_ncaaf_ratings_elo_rating.a604fa0172", "fqn": ["sports_sims", "not_null_ncaaf_ratings_elo_rating"], "alias": "not_null_ncaaf_ratings_elo_rating", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_ratings_elo_rating.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.008168, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_ratings_elo_rating.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect elo_rating\nfrom \"mdsbox\".\"main\".\"ncaaf_ratings\"\nwhere elo_rating is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "elo_rating", "file_key_name": "models.ncaaf_ratings", "attached_node": "model.sports_sims.ncaaf_ratings"}, "test.sports_sims.empty_table_ncaaf_random_num_gen_.05e363b629": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('ncaaf_random_num_gen')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_ncaaf_random_num_gen_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_ncaaf_random_num_gen_.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.empty_table_ncaaf_random_num_gen_.05e363b629", "fqn": ["sports_sims", "empty_table_ncaaf_random_num_gen_"], "alias": "empty_table_ncaaf_random_num_gen_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/empty_table_ncaaf_random_num_gen_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.0095825, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_random_num_gen", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_random_num_gen"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/empty_table_ncaaf_random_num_gen_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"ncaaf_random_num_gen\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.ncaaf_random_num_gen", "attached_node": "model.sports_sims.ncaaf_random_num_gen"}, "test.sports_sims.unique_ncaaf_teams_team_long.51973c25e3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('ncaaf_teams')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_ncaaf_teams_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "unique_ncaaf_teams_team_long.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.unique_ncaaf_teams_team_long.51973c25e3", "fqn": ["sports_sims", "unique_ncaaf_teams_team_long"], "alias": "unique_ncaaf_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/unique_ncaaf_teams_team_long.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.0127919, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/unique_ncaaf_teams_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team_long as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"ncaaf_teams\"\nwhere team_long is not null\ngroup by team_long\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.ncaaf_teams", "attached_node": "model.sports_sims.ncaaf_teams"}, "test.sports_sims.not_null_ncaaf_teams_team_long.00f647edf6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('ncaaf_teams')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_ncaaf_teams_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_ncaaf_teams_team_long.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.not_null_ncaaf_teams_team_long.00f647edf6", "fqn": ["sports_sims", "not_null_ncaaf_teams_team_long"], "alias": "not_null_ncaaf_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_teams_team_long.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.0144625, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_teams_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_long\nfrom \"mdsbox\".\"main\".\"ncaaf_teams\"\nwhere team_long is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.ncaaf_teams", "attached_node": "model.sports_sims.ncaaf_teams"}, "test.sports_sims.unique_ncaaf_vegas_wins_team.0dc4b6bce6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('ncaaf_vegas_wins')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_ncaaf_vegas_wins_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_ncaaf_vegas_wins_team.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.unique_ncaaf_vegas_wins_team.0dc4b6bce6", "fqn": ["sports_sims", "unique_ncaaf_vegas_wins_team"], "alias": "unique_ncaaf_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/unique_ncaaf_vegas_wins_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.0160656, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/unique_ncaaf_vegas_wins_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"ncaaf_vegas_wins\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.ncaaf_vegas_wins", "attached_node": "model.sports_sims.ncaaf_vegas_wins"}, "test.sports_sims.not_null_ncaaf_vegas_wins_team.b2e11cc832": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('ncaaf_vegas_wins')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_ncaaf_vegas_wins_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_ncaaf_vegas_wins_team.sql", "original_file_path": "models/_ncaaf_docs.yml", "unique_id": "test.sports_sims.not_null_ncaaf_vegas_wins_team.b2e11cc832", "fqn": ["sports_sims", "not_null_ncaaf_vegas_wins_team"], "alias": "not_null_ncaaf_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_vegas_wins_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.0174541, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ncaaf_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.ncaaf_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_ncaaf_docs.yml/not_null_ncaaf_vegas_wins_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"ncaaf_vegas_wins\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.ncaaf_vegas_wins", "attached_node": "model.sports_sims.ncaaf_vegas_wins"}, "test.sports_sims.empty_table_nfl_raw_results_.4695a4b621": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nfl_raw_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nfl_raw_results_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nfl_raw_results_.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.empty_table_nfl_raw_results_.4695a4b621", "fqn": ["sports_sims", "empty_table_nfl_raw_results_"], "alias": "empty_table_nfl_raw_results_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/empty_table_nfl_raw_results_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.0884027, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_raw_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_raw_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/empty_table_nfl_raw_results_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nfl_raw_results\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nfl_raw_results", "attached_node": "model.sports_sims.nfl_raw_results"}, "test.sports_sims.empty_table_nfl_raw_schedule_.38577f458a": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nfl_raw_schedule')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nfl_raw_schedule_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nfl_raw_schedule_.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.empty_table_nfl_raw_schedule_.38577f458a", "fqn": ["sports_sims", "empty_table_nfl_raw_schedule_"], "alias": "empty_table_nfl_raw_schedule_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/empty_table_nfl_raw_schedule_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.0924778, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_raw_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_raw_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/empty_table_nfl_raw_schedule_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nfl_raw_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nfl_raw_schedule", "attached_node": "model.sports_sims.nfl_raw_schedule"}, "test.sports_sims.empty_table_nfl_raw_team_ratings_.fd40ff9f75": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nfl_raw_team_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nfl_raw_team_ratings_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nfl_raw_team_ratings_.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.empty_table_nfl_raw_team_ratings_.fd40ff9f75", "fqn": ["sports_sims", "empty_table_nfl_raw_team_ratings_"], "alias": "empty_table_nfl_raw_team_ratings_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/empty_table_nfl_raw_team_ratings_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.095729, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/empty_table_nfl_raw_team_ratings_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nfl_raw_team_ratings\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nfl_raw_team_ratings", "attached_node": "model.sports_sims.nfl_raw_team_ratings"}, "test.sports_sims.unique_nfl_schedules_game_id.38f1c777a5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nfl_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nfl_schedules_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nfl_schedules_game_id.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.unique_nfl_schedules_game_id.38f1c777a5", "fqn": ["sports_sims", "unique_nfl_schedules_game_id"], "alias": "unique_nfl_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/unique_nfl_schedules_game_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.0991297, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/unique_nfl_schedules_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nfl_schedules\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nfl_schedules", "attached_node": "model.sports_sims.nfl_schedules"}, "test.sports_sims.not_null_nfl_schedules_game_id.3961bd8fd2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nfl_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_schedules_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_schedules_game_id.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_schedules_game_id.3961bd8fd2", "fqn": ["sports_sims", "not_null_nfl_schedules_game_id"], "alias": "not_null_nfl_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_schedules_game_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1005583, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_schedules_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"mdsbox\".\"main\".\"nfl_schedules\"\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nfl_schedules", "attached_node": "model.sports_sims.nfl_schedules"}, "test.sports_sims.accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.3ce8130eae": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["reg_season", "playin_r1", "playin_r2", "playoffs_r1", "playoffs_r2", "playoffs_r3", "playoffs_r4"], "column_name": "type", "model": "{{ get_where_subquery(ref('nfl_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4", "resource_type": "test", "package_name": "sports_sims", "path": "accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.3ce8130eae", "fqn": ["sports_sims", "accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4"], "alias": "accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8.sql", "deferred": false, "unrendered_config": {"alias": "accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8"}, "created_at": 1703711284.1022377, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8\") }}", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        type as value_field,\n        count(*) as n_records\n\n    from \"mdsbox\".\"main\".\"nfl_schedules\"\n    group by type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'reg_season','playin_r1','playin_r2','playoffs_r1','playoffs_r2','playoffs_r3','playoffs_r4'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.nfl_schedules", "attached_node": "model.sports_sims.nfl_schedules"}, "test.sports_sims.not_null_nfl_schedules_visiting_team.fa5caebf37": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('nfl_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_schedules_visiting_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_schedules_visiting_team.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_schedules_visiting_team.fa5caebf37", "fqn": ["sports_sims", "not_null_nfl_schedules_visiting_team"], "alias": "not_null_nfl_schedules_visiting_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_schedules_visiting_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1061437, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_schedules_visiting_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visiting_team\nfrom \"mdsbox\".\"main\".\"nfl_schedules\"\nwhere visiting_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visiting_team", "file_key_name": "models.nfl_schedules", "attached_node": "model.sports_sims.nfl_schedules"}, "test.sports_sims.not_null_nfl_schedules_home_team.4f29463b21": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('nfl_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_schedules_home_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_schedules_home_team.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_schedules_home_team.4f29463b21", "fqn": ["sports_sims", "not_null_nfl_schedules_home_team"], "alias": "not_null_nfl_schedules_home_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_schedules_home_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1075325, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_schedules_home_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team\nfrom \"mdsbox\".\"main\".\"nfl_schedules\"\nwhere home_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team", "file_key_name": "models.nfl_schedules", "attached_node": "model.sports_sims.nfl_schedules"}, "test.sports_sims.not_null_nfl_ratings_team.b2ede8bbf2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nfl_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_ratings_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_ratings_team.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_ratings_team.b2ede8bbf2", "fqn": ["sports_sims", "not_null_nfl_ratings_team"], "alias": "not_null_nfl_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_ratings_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1089246, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"nfl_ratings\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nfl_ratings", "attached_node": "model.sports_sims.nfl_ratings"}, "test.sports_sims.unique_nfl_ratings_team.8d6615a017": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nfl_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nfl_ratings_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nfl_ratings_team.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.unique_nfl_ratings_team.8d6615a017", "fqn": ["sports_sims", "unique_nfl_ratings_team"], "alias": "unique_nfl_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/unique_nfl_ratings_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1104002, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/unique_nfl_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nfl_ratings\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nfl_ratings", "attached_node": "model.sports_sims.nfl_ratings"}, "test.sports_sims.not_null_nfl_ratings_conf.c095117e8b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "conf", "model": "{{ get_where_subquery(ref('nfl_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_ratings_conf", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_ratings_conf.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_ratings_conf.c095117e8b", "fqn": ["sports_sims", "not_null_nfl_ratings_conf"], "alias": "not_null_nfl_ratings_conf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_ratings_conf.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1118264, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_ratings_conf.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect conf\nfrom \"mdsbox\".\"main\".\"nfl_ratings\"\nwhere conf is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "conf", "file_key_name": "models.nfl_ratings", "attached_node": "model.sports_sims.nfl_ratings"}, "test.sports_sims.accepted_values_nfl_ratings_conf__AFC__NFC.a37211d1be": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["AFC", "NFC"], "column_name": "conf", "model": "{{ get_where_subquery(ref('nfl_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "accepted_values_nfl_ratings_conf__AFC__NFC", "resource_type": "test", "package_name": "sports_sims", "path": "accepted_values_nfl_ratings_conf__AFC__NFC.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.accepted_values_nfl_ratings_conf__AFC__NFC.a37211d1be", "fqn": ["sports_sims", "accepted_values_nfl_ratings_conf__AFC__NFC"], "alias": "accepted_values_nfl_ratings_conf__AFC__NFC", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/accepted_values_nfl_ratings_conf__AFC__NFC.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1134336, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/accepted_values_nfl_ratings_conf__AFC__NFC.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        conf as value_field,\n        count(*) as n_records\n\n    from \"mdsbox\".\"main\".\"nfl_ratings\"\n    group by conf\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'AFC','NFC'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "conf", "file_key_name": "models.nfl_ratings", "attached_node": "model.sports_sims.nfl_ratings"}, "test.sports_sims.not_null_nfl_ratings_elo_rating.6dedfbc521": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "elo_rating", "model": "{{ get_where_subquery(ref('nfl_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_ratings_elo_rating", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_ratings_elo_rating.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_ratings_elo_rating.6dedfbc521", "fqn": ["sports_sims", "not_null_nfl_ratings_elo_rating"], "alias": "not_null_nfl_ratings_elo_rating", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_ratings_elo_rating.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.117341, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_ratings_elo_rating.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect elo_rating\nfrom \"mdsbox\".\"main\".\"nfl_ratings\"\nwhere elo_rating is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "elo_rating", "file_key_name": "models.nfl_ratings", "attached_node": "model.sports_sims.nfl_ratings"}, "test.sports_sims.empty_table_nfl_random_num_gen_.0eb88dc7a0": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nfl_random_num_gen')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nfl_random_num_gen_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nfl_random_num_gen_.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.empty_table_nfl_random_num_gen_.0eb88dc7a0", "fqn": ["sports_sims", "empty_table_nfl_random_num_gen_"], "alias": "empty_table_nfl_random_num_gen_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/empty_table_nfl_random_num_gen_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1191168, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_random_num_gen", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_random_num_gen"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/empty_table_nfl_random_num_gen_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nfl_random_num_gen\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nfl_random_num_gen", "attached_node": "model.sports_sims.nfl_random_num_gen"}, "test.sports_sims.unique_nfl_teams_team_long.aba62e3173": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nfl_teams')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nfl_teams_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nfl_teams_team_long.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.unique_nfl_teams_team_long.aba62e3173", "fqn": ["sports_sims", "unique_nfl_teams_team_long"], "alias": "unique_nfl_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/unique_nfl_teams_team_long.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1222544, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/unique_nfl_teams_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team_long as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nfl_teams\"\nwhere team_long is not null\ngroup by team_long\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nfl_teams", "attached_node": "model.sports_sims.nfl_teams"}, "test.sports_sims.not_null_nfl_teams_team_long.12e97e9531": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nfl_teams')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_teams_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_teams_team_long.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_teams_team_long.12e97e9531", "fqn": ["sports_sims", "not_null_nfl_teams_team_long"], "alias": "not_null_nfl_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_teams_team_long.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.123655, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_teams_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_long\nfrom \"mdsbox\".\"main\".\"nfl_teams\"\nwhere team_long is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nfl_teams", "attached_node": "model.sports_sims.nfl_teams"}, "test.sports_sims.unique_nfl_vegas_wins_team.af395b9444": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nfl_vegas_wins')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nfl_vegas_wins_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nfl_vegas_wins_team.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.unique_nfl_vegas_wins_team.af395b9444", "fqn": ["sports_sims", "unique_nfl_vegas_wins_team"], "alias": "unique_nfl_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/unique_nfl_vegas_wins_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1252344, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/unique_nfl_vegas_wins_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nfl_vegas_wins\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nfl_vegas_wins", "attached_node": "model.sports_sims.nfl_vegas_wins"}, "test.sports_sims.not_null_nfl_vegas_wins_team.2b5b398b1d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nfl_vegas_wins')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_vegas_wins_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_vegas_wins_team.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_vegas_wins_team.2b5b398b1d", "fqn": ["sports_sims", "not_null_nfl_vegas_wins_team"], "alias": "not_null_nfl_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_vegas_wins_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1266289, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_vegas_wins_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"nfl_vegas_wins\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nfl_vegas_wins", "attached_node": "model.sports_sims.nfl_vegas_wins"}, "test.sports_sims.not_null_nfl_vegas_wins_win_total.9fd12813b7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "win_total", "model": "{{ get_where_subquery(ref('nfl_vegas_wins')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_vegas_wins_win_total", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_vegas_wins_win_total.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_vegas_wins_win_total.9fd12813b7", "fqn": ["sports_sims", "not_null_nfl_vegas_wins_win_total"], "alias": "not_null_nfl_vegas_wins_win_total", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_vegas_wins_win_total.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1279929, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_vegas_wins_win_total.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect win_total\nfrom \"mdsbox\".\"main\".\"nfl_vegas_wins\"\nwhere win_total is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "win_total", "file_key_name": "models.nfl_vegas_wins", "attached_node": "model.sports_sims.nfl_vegas_wins"}, "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_raw_schedule')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nba_raw_schedule_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_raw_schedule_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0", "fqn": ["sports_sims", "empty_table_nba_raw_schedule_"], "alias": "empty_table_nba_raw_schedule_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/empty_table_nba_raw_schedule_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1374161, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_raw_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_raw_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/empty_table_nba_raw_schedule_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nba_raw_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_raw_schedule", "attached_node": "model.sports_sims.nba_raw_schedule"}, "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_raw_team_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nba_raw_team_ratings_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_raw_team_ratings_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759", "fqn": ["sports_sims", "empty_table_nba_raw_team_ratings_"], "alias": "empty_table_nba_raw_team_ratings_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/empty_table_nba_raw_team_ratings_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1408565, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/empty_table_nba_raw_team_ratings_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nba_raw_team_ratings\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_raw_team_ratings", "attached_node": "model.sports_sims.nba_raw_team_ratings"}, "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_raw_xf_series_to_seed')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nba_raw_xf_series_to_seed_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_raw_xf_series_to_seed_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f", "fqn": ["sports_sims", "empty_table_nba_raw_xf_series_to_seed_"], "alias": "empty_table_nba_raw_xf_series_to_seed_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/empty_table_nba_raw_xf_series_to_seed_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1440396, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_raw_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_raw_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/empty_table_nba_raw_xf_series_to_seed_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nba_raw_xf_series_to_seed\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_raw_xf_series_to_seed", "attached_node": "model.sports_sims.nba_raw_xf_series_to_seed"}, "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_latest_elo')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_latest_elo_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_latest_elo_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f", "fqn": ["sports_sims", "unique_nba_latest_elo_team"], "alias": "unique_nba_latest_elo_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_latest_elo_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1475701, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_latest_elo_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_latest_elo\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_latest_elo", "attached_node": "model.sports_sims.nba_latest_elo"}, "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_latest_elo')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nba_latest_elo_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_latest_elo_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f", "fqn": ["sports_sims", "empty_table_nba_latest_elo_"], "alias": "empty_table_nba_latest_elo_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/empty_table_nba_latest_elo_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1490235, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/empty_table_nba_latest_elo_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nba_latest_elo\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_latest_elo", "attached_node": "model.sports_sims.nba_latest_elo"}, "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_latest_results_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_latest_results_game_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46", "fqn": ["sports_sims", "unique_nba_latest_results_game_id"], "alias": "unique_nba_latest_results_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_latest_results_game_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1524882, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_latest_results_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results"}, "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_game_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864", "fqn": ["sports_sims", "not_null_nba_latest_results_game_id"], "alias": "not_null_nba_latest_results_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_game_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1540022, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results"}, "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_home_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_home_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c", "fqn": ["sports_sims", "not_null_nba_latest_results_home_team"], "alias": "not_null_nba_latest_results_home_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_home_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1554365, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_home_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere home_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results"}, "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_score", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_home_team_score", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_home_team_score.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd", "fqn": ["sports_sims", "not_null_nba_latest_results_home_team_score"], "alias": "not_null_nba_latest_results_home_team_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_home_team_score.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1568034, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_home_team_score.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team_score\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere home_team_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team_score", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results"}, "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_visiting_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_visiting_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2", "fqn": ["sports_sims", "not_null_nba_latest_results_visiting_team"], "alias": "not_null_nba_latest_results_visiting_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_visiting_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.158216, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_visiting_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visiting_team\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere visiting_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visiting_team", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results"}, "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team_score", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_visiting_team_score", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_visiting_team_score.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf", "fqn": ["sports_sims", "not_null_nba_latest_results_visiting_team_score"], "alias": "not_null_nba_latest_results_visiting_team_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_visiting_team_score.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1596432, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_visiting_team_score.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visiting_team_score\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere visiting_team_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visiting_team_score", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results"}, "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "winning_team", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_winning_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_winning_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f", "fqn": ["sports_sims", "not_null_nba_latest_results_winning_team"], "alias": "not_null_nba_latest_results_winning_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_winning_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1611829, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_winning_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect winning_team\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere winning_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "winning_team", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results"}, "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "losing_team", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_losing_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_losing_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2", "fqn": ["sports_sims", "not_null_nba_latest_results_losing_team"], "alias": "not_null_nba_latest_results_losing_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_losing_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1625702, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_losing_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect losing_team\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere losing_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "losing_team", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results"}, "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_schedules_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_schedules_game_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b", "fqn": ["sports_sims", "unique_nba_schedules_game_id"], "alias": "unique_nba_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_schedules_game_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1639297, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_schedules_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_schedules\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules"}, "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_schedules_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_schedules_game_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1", "fqn": ["sports_sims", "not_null_nba_schedules_game_id"], "alias": "not_null_nba_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_schedules_game_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1652765, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_schedules_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"mdsbox\".\"main\".\"nba_schedules\"\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules"}, "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["reg_season", "playin_r1", "playin_r2", "playoffs_r1", "playoffs_r2", "playoffs_r3", "playoffs_r4", "tournament", "knockout"], "column_name": "type", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout", "resource_type": "test", "package_name": "sports_sims", "path": "accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19", "fqn": ["sports_sims", "accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout"], "alias": "accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec.sql", "deferred": false, "unrendered_config": {"alias": "accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec"}, "created_at": 1703711284.1666915, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec\") }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        type as value_field,\n        count(*) as n_records\n\n    from \"mdsbox\".\"main\".\"nba_schedules\"\n    group by type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'reg_season','playin_r1','playin_r2','playoffs_r1','playoffs_r2','playoffs_r3','playoffs_r4','tournament','knockout'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules"}, "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_schedules_visiting_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_schedules_visiting_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe", "fqn": ["sports_sims", "not_null_nba_schedules_visiting_team"], "alias": "not_null_nba_schedules_visiting_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_schedules_visiting_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1709654, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_schedules_visiting_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visiting_team\nfrom \"mdsbox\".\"main\".\"nba_schedules\"\nwhere visiting_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visiting_team", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules"}, "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_schedules_home_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_schedules_home_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c", "fqn": ["sports_sims", "not_null_nba_schedules_home_team"], "alias": "not_null_nba_schedules_home_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_schedules_home_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.172447, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_schedules_home_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team\nfrom \"mdsbox\".\"main\".\"nba_schedules\"\nwhere home_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules"}, "test.sports_sims.not_null_nba_ratings_team.de3ad0b568": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_ratings_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_ratings_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_ratings_team.de3ad0b568", "fqn": ["sports_sims", "not_null_nba_ratings_team"], "alias": "not_null_nba_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1738417, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"nba_ratings\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings"}, "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_ratings_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_ratings_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b", "fqn": ["sports_sims", "unique_nba_ratings_team"], "alias": "unique_nba_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_ratings_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1758678, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_ratings\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings"}, "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_ratings_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_ratings_team_long.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7", "fqn": ["sports_sims", "not_null_nba_ratings_team_long"], "alias": "not_null_nba_ratings_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_team_long.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1772313, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_long\nfrom \"mdsbox\".\"main\".\"nba_ratings\"\nwhere team_long is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings"}, "test.sports_sims.unique_nba_ratings_team_long.6615b31795": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_ratings_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_ratings_team_long.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_ratings_team_long.6615b31795", "fqn": ["sports_sims", "unique_nba_ratings_team_long"], "alias": "unique_nba_ratings_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_ratings_team_long.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1786318, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_ratings_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team_long as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_ratings\"\nwhere team_long is not null\ngroup by team_long\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings"}, "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "conf", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_ratings_conf", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_ratings_conf.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6", "fqn": ["sports_sims", "not_null_nba_ratings_conf"], "alias": "not_null_nba_ratings_conf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_conf.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1799982, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_conf.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect conf\nfrom \"mdsbox\".\"main\".\"nba_ratings\"\nwhere conf is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "conf", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings"}, "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["East", "West"], "column_name": "conf", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "accepted_values_nba_ratings_conf__East__West", "resource_type": "test", "package_name": "sports_sims", "path": "accepted_values_nba_ratings_conf__East__West.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69", "fqn": ["sports_sims", "accepted_values_nba_ratings_conf__East__West"], "alias": "accepted_values_nba_ratings_conf__East__West", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/accepted_values_nba_ratings_conf__East__West.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1813474, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/accepted_values_nba_ratings_conf__East__West.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        conf as value_field,\n        count(*) as n_records\n\n    from \"mdsbox\".\"main\".\"nba_ratings\"\n    group by conf\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'East','West'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "conf", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings"}, "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "elo_rating", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_ratings_elo_rating", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_ratings_elo_rating.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393", "fqn": ["sports_sims", "not_null_nba_ratings_elo_rating"], "alias": "not_null_nba_ratings_elo_rating", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_elo_rating.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.185352, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_elo_rating.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect elo_rating\nfrom \"mdsbox\".\"main\".\"nba_ratings\"\nwhere elo_rating is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "elo_rating", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings"}, "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_reg_season_schedule')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nba_reg_season_schedule_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_reg_season_schedule_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01", "fqn": ["sports_sims", "empty_table_nba_reg_season_schedule_"], "alias": "empty_table_nba_reg_season_schedule_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/empty_table_nba_reg_season_schedule_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.186802, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_reg_season_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_reg_season_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/empty_table_nba_reg_season_schedule_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nba_reg_season_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_reg_season_schedule", "attached_node": "model.sports_sims.nba_reg_season_schedule"}, "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_random_num_gen')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nba_random_num_gen_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_random_num_gen_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c", "fqn": ["sports_sims", "empty_table_nba_random_num_gen_"], "alias": "empty_table_nba_random_num_gen_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/empty_table_nba_random_num_gen_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1901534, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_random_num_gen"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/empty_table_nba_random_num_gen_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nba_random_num_gen\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_random_num_gen", "attached_node": "model.sports_sims.nba_random_num_gen"}, "test.sports_sims.unique_nba_teams_team_long.a9afa2e873": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nba_teams')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_teams_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_teams_team_long.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_teams_team_long.a9afa2e873", "fqn": ["sports_sims", "unique_nba_teams_team_long"], "alias": "unique_nba_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_teams_team_long.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1939657, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_teams_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team_long as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_teams\"\nwhere team_long is not null\ngroup by team_long\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nba_teams", "attached_node": "model.sports_sims.nba_teams"}, "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nba_teams')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_teams_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_teams_team_long.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e", "fqn": ["sports_sims", "not_null_nba_teams_team_long"], "alias": "not_null_nba_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_teams_team_long.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1965804, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_teams_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_long\nfrom \"mdsbox\".\"main\".\"nba_teams\"\nwhere team_long is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nba_teams", "attached_node": "model.sports_sims.nba_teams"}, "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_teams')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_teams_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_teams_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1", "fqn": ["sports_sims", "unique_nba_teams_team"], "alias": "unique_nba_teams_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_teams_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.1989326, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_teams_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_teams\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_teams", "attached_node": "model.sports_sims.nba_teams"}, "test.sports_sims.not_null_nba_teams_team.6d25569f6c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_teams')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_teams_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_teams_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_teams_team.6d25569f6c", "fqn": ["sports_sims", "not_null_nba_teams_team"], "alias": "not_null_nba_teams_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_teams_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.2012267, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_teams_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"nba_teams\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_teams", "attached_node": "model.sports_sims.nba_teams"}, "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_vegas_wins')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_vegas_wins_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_vegas_wins_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb", "fqn": ["sports_sims", "unique_nba_vegas_wins_team"], "alias": "unique_nba_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_vegas_wins_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.2030408, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_vegas_wins_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_vegas_wins\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_vegas_wins", "attached_node": "model.sports_sims.nba_vegas_wins"}, "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_vegas_wins')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_vegas_wins_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_vegas_wins_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e", "fqn": ["sports_sims", "not_null_nba_vegas_wins_team"], "alias": "not_null_nba_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_vegas_wins_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.2049873, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_vegas_wins_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"nba_vegas_wins\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_vegas_wins", "attached_node": "model.sports_sims.nba_vegas_wins"}, "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "win_total", "model": "{{ get_where_subquery(ref('nba_vegas_wins')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_vegas_wins_win_total", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_vegas_wins_win_total.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b", "fqn": ["sports_sims", "not_null_nba_vegas_wins_win_total"], "alias": "not_null_nba_vegas_wins_win_total", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_vegas_wins_win_total.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.20645, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_vegas_wins_win_total.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect win_total\nfrom \"mdsbox\".\"main\".\"nba_vegas_wins\"\nwhere win_total is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "win_total", "file_key_name": "models.nba_vegas_wins", "attached_node": "model.sports_sims.nba_vegas_wins"}, "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('nba_xf_series_to_seed')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_xf_series_to_seed_series_id", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_xf_series_to_seed_series_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf", "fqn": ["sports_sims", "not_null_nba_xf_series_to_seed_series_id"], "alias": "not_null_nba_xf_series_to_seed_series_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_xf_series_to_seed_series_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.208646, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_xf_series_to_seed_series_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect series_id\nfrom \"mdsbox\".\"main\".\"nba_xf_series_to_seed\"\nwhere series_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "series_id", "file_key_name": "models.nba_xf_series_to_seed", "attached_node": "model.sports_sims.nba_xf_series_to_seed"}, "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('nba_xf_series_to_seed')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_xf_series_to_seed_series_id", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_xf_series_to_seed_series_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed", "fqn": ["sports_sims", "unique_nba_xf_series_to_seed_series_id"], "alias": "unique_nba_xf_series_to_seed_series_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_xf_series_to_seed_series_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.210879, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_xf_series_to_seed_series_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    series_id as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_xf_series_to_seed\"\nwhere series_id is not null\ngroup by series_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "series_id", "file_key_name": "models.nba_xf_series_to_seed", "attached_node": "model.sports_sims.nba_xf_series_to_seed"}, "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "seed", "model": "{{ get_where_subquery(ref('nba_xf_series_to_seed')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_xf_series_to_seed_seed", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_xf_series_to_seed_seed.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82", "fqn": ["sports_sims", "not_null_nba_xf_series_to_seed_seed"], "alias": "not_null_nba_xf_series_to_seed_seed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_xf_series_to_seed_seed.sql", "deferred": false, "unrendered_config": {}, "created_at": 1703711284.2131348, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_xf_series_to_seed_seed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect seed\nfrom \"mdsbox\".\"main\".\"nba_xf_series_to_seed\"\nwhere seed is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "seed", "file_key_name": "models.nba_xf_series_to_seed", "attached_node": "model.sports_sims.nba_xf_series_to_seed"}, "model.sports_sims.reg_season_summary": {"database": "mdsbox", "schema": "main", "name": "reg_season_summary", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/reg_season_summary.sql", "original_file_path": "models/nba/analysis/reg_season_summary.sql", "unique_id": "model.sports_sims.reg_season_summary", "fqn": ["sports_sims", "nba", "analysis", "reg_season_summary"], "alias": "reg_season_summary", "checksum": {"name": "sha256", "checksum": "1786b3cd595c7e30de789bf9ae0cd316a621fa6ae6671c3987832ebb19fdc06f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/reg_season_summary.sql", "deferred": false, "unrendered_config": {"tags": "nba", "materialized": "external"}, "created_at": 1703717404.4396775, "relation_name": "\"mdsbox\".\"main\".\"reg_season_summary\"", "raw_code": "{{\n    config(\n        materialized='external'\n    )\n}}\n\n    WITH cte_summary AS (\n    SELECT\n        winning_team AS team,\n        E.conf,\n        ROUND(AVG(wins),1) AS avg_wins,\n        V.win_total AS vegas_wins,\n        ROUND(AVG(V.win_total) - AVG(wins), 1) AS elo_vs_vegas,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_5th,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_95th,\n        COUNT(*) FILTER (WHERE made_playoffs = 1 AND made_play_in = 0) AS made_postseason,\n        COUNT(*) FILTER (WHERE made_play_in = 1) AS made_play_in,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_5th,\n        ROUND(AVG(season_rank), 1) AS avg_seed,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_95th\n    FROM {{ ref( 'reg_season_end' ) }} E\n    LEFT JOIN {{ ref( 'nba_vegas_wins' ) }} V ON V.team = E.winning_team\n    GROUP BY ALL\n    )\n\nSELECT \n    C.team,\n    C.conf,\n    A.wins || ' - ' || A.losses AS record,\n    C.avg_wins,\n    C.vegas_wins,\n    c.elo_vs_vegas,\n    C.wins_5th::int || ' to ' || C.wins_95th::int AS win_range,\n    C.seed_5th::int || ' to ' || C.seed_95th::int AS seed_range,\n    c.made_postseason,\n    c.made_play_in,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_summary C\nLEFT JOIN {{ ref( 'nba_reg_season_actuals' ) }} A ON A.team = C.team", "language": "sql", "refs": [{"name": "reg_season_end", "package": null, "version": null}, {"name": "nba_vegas_wins", "package": null, "version": null}, {"name": "nba_reg_season_actuals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_end", "model.sports_sims.nba_vegas_wins", "model.sports_sims.nba_reg_season_actuals"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/reg_season_summary.sql", "compiled": true, "compiled_code": "\n\n    WITH cte_summary AS (\n    SELECT\n        winning_team AS team,\n        E.conf,\n        ROUND(AVG(wins),1) AS avg_wins,\n        V.win_total AS vegas_wins,\n        ROUND(AVG(V.win_total) - AVG(wins), 1) AS elo_vs_vegas,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_5th,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_95th,\n        COUNT(*) FILTER (WHERE made_playoffs = 1 AND made_play_in = 0) AS made_postseason,\n        COUNT(*) FILTER (WHERE made_play_in = 1) AS made_play_in,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_5th,\n        ROUND(AVG(season_rank), 1) AS avg_seed,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_95th\n    FROM \"mdsbox\".\"main\".\"reg_season_end\" E\n    LEFT JOIN \"mdsbox\".\"main\".\"nba_vegas_wins\" V ON V.team = E.winning_team\n    GROUP BY ALL\n    )\n\nSELECT \n    C.team,\n    C.conf,\n    A.wins || ' - ' || A.losses AS record,\n    C.avg_wins,\n    C.vegas_wins,\n    c.elo_vs_vegas,\n    C.wins_5th::int || ' to ' || C.wins_95th::int AS win_range,\n    C.seed_5th::int || ' to ' || C.seed_95th::int AS seed_range,\n    c.made_postseason,\n    c.made_play_in,\n    0 AS sim_start_game_id\nFROM cte_summary C\nLEFT JOIN \"mdsbox\".\"main\".\"nba_reg_season_actuals\" A ON A.team = C.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}}, "sources": {"source.sports_sims.nba.nba_schedule": {"database": "mdsbox", "schema": "psa", "name": "nba_schedule", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.nba_schedule", "fqn": ["sports_sims", "nba", "nba_schedule"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_schedule", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "this is the nba schedule", "columns": {}, "meta": {}, "source_meta": {"external_location": "../data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nba/nba_schedule.csv'", "created_at": 1703711284.2172813}, "source.sports_sims.nba.nba_team_ratings": {"database": "mdsbox", "schema": "psa", "name": "nba_team_ratings", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.nba_team_ratings", "fqn": ["sports_sims", "nba", "nba_team_ratings"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_team_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "team ELO ratings & win totals", "columns": {}, "meta": {}, "source_meta": {"external_location": "../data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nba/nba_team_ratings.csv'", "created_at": 1703711284.2175603}, "source.sports_sims.nba.xf_series_to_seed": {"database": "mdsbox", "schema": "psa", "name": "xf_series_to_seed", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.xf_series_to_seed", "fqn": ["sports_sims", "nba", "xf_series_to_seed"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "xf_series_to_seed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "cross ref table to match series to seeds", "columns": {}, "meta": {}, "source_meta": {"external_location": "../data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nba/xf_series_to_seed.csv'", "created_at": 1703711284.217766}, "source.sports_sims.nba.nba_results": {"database": "mdsbox", "schema": "psa", "name": "nba_results", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.nba_results", "fqn": ["sports_sims", "nba", "nba_results"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_results", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nba results for the current season", "columns": {}, "meta": {}, "source_meta": {"external_location": "../data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nba/nba_results.csv'", "created_at": 1703711284.2179728}, "source.sports_sims.nfl.nfl_schedule": {"database": "mdsbox", "schema": "psa", "name": "nfl_schedule", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nfl.nfl_schedule", "fqn": ["sports_sims", "nfl", "nfl_schedule"], "source_name": "nfl", "source_description": "", "loader": "", "identifier": "nfl_schedule", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nfl schedule", "columns": {}, "meta": {}, "source_meta": {"external_location": "../data/nfl/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nfl/nfl_schedule.csv'", "created_at": 1703711284.2182026}, "source.sports_sims.nfl.nfl_team_ratings": {"database": "mdsbox", "schema": "psa", "name": "nfl_team_ratings", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nfl.nfl_team_ratings", "fqn": ["sports_sims", "nfl", "nfl_team_ratings"], "source_name": "nfl", "source_description": "", "loader": "", "identifier": "nfl_team_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nfl team ratings from vegas", "columns": {}, "meta": {}, "source_meta": {"external_location": "../data/nfl/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nfl/nfl_team_ratings.csv'", "created_at": 1703711284.2183962}, "source.sports_sims.nfl.nfl_results": {"database": "mdsbox", "schema": "psa", "name": "nfl_results", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nfl.nfl_results", "fqn": ["sports_sims", "nfl", "nfl_results"], "source_name": "nfl", "source_description": "", "loader": "", "identifier": "nfl_results", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nfl results for the current season", "columns": {}, "meta": {}, "source_meta": {"external_location": "../data/nfl/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nfl/nfl_results.csv'", "created_at": 1703711284.2185817}, "source.sports_sims.ncaaf.ncaaf_schedule": {"database": "mdsbox", "schema": "psa", "name": "ncaaf_schedule", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.ncaaf.ncaaf_schedule", "fqn": ["sports_sims", "ncaaf", "ncaaf_schedule"], "source_name": "ncaaf", "source_description": "", "loader": "", "identifier": "ncaaf_schedule", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ncaa football schedule", "columns": {}, "meta": {}, "source_meta": {"external_location": "../data/ncaaf/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/ncaaf/ncaaf_schedule.csv'", "created_at": 1703711284.2187989}, "source.sports_sims.ncaaf.ncaaf_team_ratings": {"database": "mdsbox", "schema": "psa", "name": "ncaaf_team_ratings", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.ncaaf.ncaaf_team_ratings", "fqn": ["sports_sims", "ncaaf", "ncaaf_team_ratings"], "source_name": "ncaaf", "source_description": "", "loader": "", "identifier": "ncaaf_team_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ncaa football team ratings from vegas", "columns": {}, "meta": {}, "source_meta": {"external_location": "../data/ncaaf/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/ncaaf/ncaaf_team_ratings.csv'", "created_at": 1703711284.2189927}, "source.sports_sims.ncaaf.ncaaf_results": {"database": "mdsbox", "schema": "psa", "name": "ncaaf_results", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.ncaaf.ncaaf_results", "fqn": ["sports_sims", "ncaaf", "ncaaf_results"], "source_name": "ncaaf", "source_description": "", "loader": "", "identifier": "ncaaf_results", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ncaa results for current season", "columns": {}, "meta": {}, "source_meta": {"external_location": "../data/ncaaf/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/ncaaf/ncaaf_results.csv'", "created_at": 1703711284.2191503}}, "macros": {"macro.sports_sims.test_empty_table": {"name": "test_empty_table", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.sports_sims.test_empty_table", "macro_sql": "{% test empty_table(model) %}\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM {{ model }}\n    HAVING COUNT(*) = 0\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.4982886, "supported_languages": null}, "macro.sports_sims.elo_calc": {"name": "elo_calc", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.elo_calc", "macro_sql": "{%- macro elo_calc(home_team, visiting_team, home_adv) -%}\n\n   ( 1 - (1 / (10 ^ (-( {{visiting_team}} - {{home_team}} - {{home_adv}})::real/400)+1))) * 10000\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5011175, "supported_languages": null}, "macro.sports_sims.elo_diff": {"name": "elo_diff", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.elo_diff", "macro_sql": "{%- macro elo_diff(home_team, visiting_team, result, home_adv)  -%}\n\n   25.0 * (( {{result}} ) - (1 / (10 ^ ( - ({{visiting_team}} - {{home_team}} - {{home_adv}})::real / 400) + 1)))\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5014558, "supported_languages": null}, "macro.sports_sims.playoff_sim": {"name": "playoff_sim", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.playoff_sim", "macro_sql": "{% macro playoff_sim(round,seed_file) %}\n-- depends-on: {{ ref( 'nba_random_num_gen' ) }}\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating',var('nba_elo_offset') ) }} as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating', var('nba_elo_offset') ) }} >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM {{ ref( 'nba_schedules' ) }} S\n        LEFT JOIN {{ ref( 'nba_random_num_gen' ) }} R ON R.game_id = S.game_id\n        LEFT JOIN  {{ ref( seed_file ) }} EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  {{ ref( seed_file ) }} EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  '{{ round }}'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.sports_sims.elo_calc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5025258, "supported_languages": null}, "macro.sports_sims.playoff_sim_end": {"name": "playoff_sim_end", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.playoff_sim_end", "macro_sql": "{%- macro playoff_sim_end(precedent) -%}\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM {{ precedent }} E\nLEFT JOIN {{ ref( 'nba_xf_series_to_seed' ) }} XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.502967, "supported_languages": null}, "macro.sports_sims.american_odds": {"name": "american_odds", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.american_odds", "macro_sql": "{%- macro american_odds(value) -%}\n\n    CASE WHEN {{ value }} >= 0.5 \n        THEN '-' || ROUND( {{ value }} / ( 1.0 - {{ value }} ) * 100 )::int\n        ELSE '+' || ((( 1.0 - {{ value }} ) / ({{ value }}::real ) * 100)::int)\n    END \n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.503278, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.505753, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5059617, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5090103, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        '{{ database }}' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5101502, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5215273, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5218296, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where catalog_name = '{{ database }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5223022, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where schema_name = '{{ schema }}'\n        and catalog_name = '{{ information_schema.database }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5227087, "supported_languages": null}, "macro.dbt_duckdb.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.523451, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_duckdb.get_column_names", "macro.dbt.get_select_subquery", "macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5255258, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    con.execute('create table {{ relation }} as select * from df')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5258079, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5265267, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and table_schema = '{{ relation.schema }}'\n      {% endif %}\n      {% if relation.database %}\n      and table_catalog = '{{ relation.database }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5273256, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n    and table_catalog = '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5278773, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5282233, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5287044, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5292745, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5294034, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5296855, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.529853, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5301163, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5303721, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5307336, "supported_languages": null}, "macro.dbt_duckdb.store_relation": {"name": "store_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.store_relation", "macro_sql": "{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5313098, "supported_languages": null}, "macro.dbt_duckdb.render_write_options": {"name": "render_write_options", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.render_write_options", "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5328045, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {"name": "duckdb__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/columns.sql", "original_file_path": "macros/columns.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns", "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5343914, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5357752, "supported_languages": null}, "macro.dbt_duckdb.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5364535, "supported_languages": null}, "macro.dbt_duckdb.duckdb__post_snapshot": {"name": "duckdb__post_snapshot", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot", "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5366943, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {"name": "duckdb__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/incremental_helper.sql", "original_file_path": "macros/incremental_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql", "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5398238, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/external_location.sql", "original_file_path": "macros/utils/external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5407083, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/splitpart.sql", "original_file_path": "macros/utils/splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.541033, "supported_languages": null}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.541243, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/upstream.sql", "original_file_path": "macros/utils/upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5450144, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/lastday.sql", "original_file_path": "macros/utils/lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.545789, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5467448, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5515478, "supported_languages": null}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5518892, "supported_languages": null}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(True, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.560643, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.564845, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/external.sql", "original_file_path": "macros/materializations/external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.store_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5725935, "supported_languages": ["sql", "python"]}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.573905, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.57415, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5744054, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5750284, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5753698, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5756133, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5758662, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5760725, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5767136, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.577348, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5783966, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5786743, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5790133, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5792964, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5797172, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5804565, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5847442, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5851536, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.58547, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5858788, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5862002, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5864594, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.586741, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5872273, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5875435, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5880187, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5883105, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5885677, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.58883, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.58908, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5894, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.589673, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.592961, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.593218, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5938134, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.594181, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5945091, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5947928, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5967476, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5972936, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5975816, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5981457, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5985, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.599422, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.5998125, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6010265, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.604063, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.604325, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6046808, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6051748, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6056812, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6062083, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6064942, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.606752, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.607132, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6079729, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6083262, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.608545, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6091356, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.609425, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6096754, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6099606, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6124377, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6126227, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.612884, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6130621, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.613596, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.613891, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.614075, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6144373, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.614753, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.615145, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6154847, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6158524, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6169221, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6172152, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6176023, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.618086, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6198757, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.620326, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.620683, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6214225, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6216657, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6218927, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.622085, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6223617, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6224883, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.622752, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6230092, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6238034, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6240993, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6243184, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.627103, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6289632, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6301656, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.630547, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6328044, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6336873, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6341577, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6345367, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.634733, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6350703, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6351967, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6364284, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6372151, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6375086, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6383433, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.638751, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.638978, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6395445, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.639923, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.641363, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.641601, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6418526, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6421087, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6423714, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6426113, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6428657, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6431398, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.643391, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6436274, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6438792, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6441057, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.644353, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6445818, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.644967, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6452227, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6456008, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.64578, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.646187, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6463625, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6468554, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6472454, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.648197, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6488414, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.649194, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.649317, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6501126, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6503794, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6507287, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6511567, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6513605, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6517255, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6518893, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6523893, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.652646, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6530585, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6532702, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6537092, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6539226, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.654328, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6545877, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6550276, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6552558, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.655808, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6562226, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6564517, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6575546, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6586335, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6590004, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6595633, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6600013, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.660225, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6607406, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6609995, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6613746, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6615407, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6619627, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6621912, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6632612, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.66394, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6642601, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6647015, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6651967, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6655545, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6661534, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6665587, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.667273, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6679811, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6684856, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6688056, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.669984, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6720958, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6731904, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6737688, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6740708, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6743956, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6747108, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6752448, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.675661, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6760824, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6763153, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6767805, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.676994, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.677419, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6776583, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6780932, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6783342, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.67874, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6789157, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6799216, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6802344, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.680678, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6809118, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6824553, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6826587, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6835237, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6842456, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6844618, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6865194, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6871247, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6876588, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6881025, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6883364, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6889658, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6892154, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6894963, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6901844, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6915224, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.691888, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6939666, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6943233, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.694673, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6950786, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6952462, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6956785, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6959267, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6972277, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.697515, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6982377, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.6997452, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7007546, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7010865, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7013862, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7018268, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7020946, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7025173, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7026958, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7051396, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7053883, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7066965, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7073317, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7082345, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7089617, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7090812, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7107804, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7110877, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7113173, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7115438, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7117658, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.712334, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.712818, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.713298, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7177694, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7184844, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7189655, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7195325, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.720123, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7294652, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7349162, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7351866, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7355492, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7366457, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7369003, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7371762, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.739362, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7413259, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7473452, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7477884, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7480474, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7481923, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.748421, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7486117, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7489417, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7503555, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7506511, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.751047, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7517025, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7523737, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7528024, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7578611, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7654426, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7668607, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.76722, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7680168, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7683218, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.768536, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7687595, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7689517, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.769204, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7693882, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7701523, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7704415, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7723787, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7767384, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7810214, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7884548, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7890496, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7894316, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7914102, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.791773, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.7927794, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8004131, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8028247, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.803691, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8047156, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8050816, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8062344, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8075602, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.807922, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8082106, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.808657, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.808945, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.809389, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8096714, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8100965, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.810403, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.810639, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8110693, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.820397, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8229196, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8233206, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8248625, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.825266, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8262937, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8343222, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8363144, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.838201, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8395336, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8405027, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8409555, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8411698, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8466706, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8470488, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8472333, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.847854, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8484278, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8492122, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8496225, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8500817, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8506753, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8510716, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.851442, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8519597, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8524134, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8532836, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8540723, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8544412, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8548896, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.855321, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.855812, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8563154, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8568537, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.857832, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8585835, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8601446, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8608353, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8612971, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8620338, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.862467, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.863165, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8644452, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8653848, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8657787, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.866046, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8673403, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.867994, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8682919, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8691022, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.869583, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.870139, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8705742, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.870794, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8724766, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8729022, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8737764, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.875206, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8760123, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.876239, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8764622, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8766816, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.877265, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.878152, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.878742, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8795927, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8842585, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8897023, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8917363, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8942144, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.894826, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.895743, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8974185, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.8997726, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.901651, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9038663, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9045792, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.905696, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9064121, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.907405, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.909923, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9105167, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9116273, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9124186, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9131994, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.914384, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9154136, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.916767, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9173846, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9178307, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.919013, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9197378, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9201415, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9205732, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9209647, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9220243, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9229538, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9233108, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.923867, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9249046, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9262435, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9268398, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9272118, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.928785, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9301136, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9312475, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9315925, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9318993, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9322011, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.932468, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9327402, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9332545, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9337864, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9349077, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9363139, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9376562, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9392326, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9400473, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9405856, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.941337, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.941805, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9429042, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9441638, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9447744, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9453392, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.946351, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9475853, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9485507, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9490855, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9499202, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9506745, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9523284, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9539216, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9592857, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9617133, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9624271, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9631503, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9644291, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9661121, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9670327, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9677675, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9688528, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.970283, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9712415, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1703711282.9722443, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.sports_sims.reg_season_end": ["model.sports_sims.nba_latest_elo", "model.sports_sims.reg_season_simulator"], "model.sports_sims.season_summary": ["model.sports_sims.nba_ratings", "model.sports_sims.playoff_summary", "model.sports_sims.reg_season_summary"], "model.sports_sims.reg_season_actuals_enriched": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_results_log", "model.sports_sims.nba_teams"], "model.sports_sims.reg_season_predictions": ["model.sports_sims.nba_results_by_team", "model.sports_sims.reg_season_simulator"], "model.sports_sims.playoff_summary": ["model.sports_sims.initialize_seeding", "model.sports_sims.nba_teams", "model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4"], "model.sports_sims.tournament_end": ["model.sports_sims.nba_latest_elo", "model.sports_sims.nba_teams", "model.sports_sims.reg_season_predictions", "model.sports_sims.reg_season_simulator"], "model.sports_sims.nba_raw_results": ["source.sports_sims.nba.nba_results"], "model.sports_sims.nba_raw_xf_series_to_seed": ["source.sports_sims.nba.xf_series_to_seed"], "model.sports_sims.nba_raw_schedule": ["source.sports_sims.nba.nba_schedule"], "model.sports_sims.nba_raw_team_ratings": ["source.sports_sims.nba.nba_team_ratings"], "model.sports_sims.nba_latest_elo": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_raw_team_ratings"], "model.sports_sims.nba_ratings": ["model.sports_sims.nba_latest_elo", "model.sports_sims.nba_raw_team_ratings"], "model.sports_sims.nba_teams": ["model.sports_sims.nba_raw_team_ratings"], "model.sports_sims.nba_random_num_gen": ["model.sports_sims.nba_schedules"], "model.sports_sims.nba_latest_results": ["model.sports_sims.nba_raw_results", "model.sports_sims.nba_raw_schedule", "model.sports_sims.nba_teams"], "model.sports_sims.nba_reg_season_actuals": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_teams"], "model.sports_sims.nba_xf_series_to_seed": ["model.sports_sims.nba_raw_xf_series_to_seed"], "model.sports_sims.nba_reg_season_schedule": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_ratings", "model.sports_sims.nba_raw_schedule"], "model.sports_sims.nba_schedules": ["model.sports_sims.nba_post_season_schedule", "model.sports_sims.nba_reg_season_schedule"], "model.sports_sims.nba_vegas_wins": ["model.sports_sims.nba_ratings"], "model.sports_sims.nba_post_season_schedule": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_ratings", "model.sports_sims.nba_raw_schedule"], "model.sports_sims.nba_results_log": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_latest_elo", "model.sports_sims.nba_latest_results", "model.sports_sims.nba_schedules", "model.sports_sims.nba_teams"], "model.sports_sims.nba_results_by_team": ["model.sports_sims.nba_results_log"], "model.sports_sims.playin_sim_r1_end": ["model.sports_sims.playin_sim_r1"], "model.sports_sims.playin_sim_r2": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.playin_sim_r1_end"], "model.sports_sims.playin_sim_r1": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.reg_season_end"], "model.sports_sims.playin_sim_r2_end": ["model.sports_sims.playin_sim_r1_end", "model.sports_sims.playin_sim_r2"], "model.sports_sims.reg_season_simulator": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules"], "model.sports_sims.initialize_seeding": ["model.sports_sims.playin_sim_r2_end", "model.sports_sims.reg_season_end"], "model.sports_sims.playoff_sim_r2": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.nba_xf_series_to_seed", "model.sports_sims.playoff_sim_r1"], "model.sports_sims.playoff_sim_r3": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.nba_xf_series_to_seed", "model.sports_sims.playoff_sim_r2"], "model.sports_sims.playoff_sim_r4": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.nba_xf_series_to_seed", "model.sports_sims.playoff_sim_r3"], "model.sports_sims.playoff_sim_r1": ["model.sports_sims.initialize_seeding", "model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.nba_xf_series_to_seed"], "model.sports_sims.nfl_reg_season_predictions": ["model.sports_sims.nfl_ratings", "model.sports_sims.nfl_reg_season_simulator"], "model.sports_sims.nfl_reg_season_summary": ["model.sports_sims.nfl_ratings", "model.sports_sims.nfl_reg_season_end", "model.sports_sims.nfl_vegas_wins"], "model.sports_sims.nfl_raw_schedule": ["source.sports_sims.nfl.nfl_schedule"], "model.sports_sims.nfl_raw_team_ratings": ["source.sports_sims.nfl.nfl_team_ratings"], "model.sports_sims.nfl_raw_results": ["source.sports_sims.nfl.nfl_results"], "model.sports_sims.nfl_ratings": ["model.sports_sims.nfl_latest_elo", "model.sports_sims.nfl_raw_team_ratings"], "model.sports_sims.nfl_random_num_gen": ["model.sports_sims.nfl_schedules"], "model.sports_sims.nfl_schedules": ["model.sports_sims.nba_post_season_schedule", "model.sports_sims.nfl_elo_rollforward", "model.sports_sims.nfl_ratings", "model.sports_sims.nfl_raw_schedule"], "model.sports_sims.nfl_teams": ["model.sports_sims.nfl_ratings", "model.sports_sims.nfl_raw_schedule"], "model.sports_sims.nfl_latest_elo": ["model.sports_sims.nfl_elo_rollforward", "model.sports_sims.nfl_raw_team_ratings"], "model.sports_sims.nfl_latest_results": ["model.sports_sims.nfl_raw_results", "model.sports_sims.nfl_raw_schedule"], "model.sports_sims.nfl_reg_season_actuals": ["model.sports_sims.nfl_latest_results", "model.sports_sims.nfl_teams"], "model.sports_sims.nfl_vegas_wins": ["model.sports_sims.nfl_ratings"], "model.sports_sims.nfl_reg_season_end": ["model.sports_sims.nfl_latest_elo", "model.sports_sims.nfl_reg_season_simulator"], "model.sports_sims.nfl_reg_season_simulator": ["model.sports_sims.nfl_latest_results", "model.sports_sims.nfl_random_num_gen", "model.sports_sims.nfl_schedules"], "model.sports_sims.ncaaf_reg_season_predictions": ["model.sports_sims.ncaaf_ratings", "model.sports_sims.ncaaf_reg_season_simulator"], "model.sports_sims.ncaaf_season_summary": ["model.sports_sims.ncaaf_ratings", "model.sports_sims.ncaaf_reg_season_summary", "model.sports_sims.playoff_summary"], "model.sports_sims.ncaaf_reg_season_summary": ["model.sports_sims.ncaaf_ratings", "model.sports_sims.ncaaf_reg_season_actuals", "model.sports_sims.ncaaf_reg_season_end", "model.sports_sims.ncaaf_vegas_wins"], "model.sports_sims.ncaaf_reg_season_summary_by_conf": ["model.sports_sims.ncaaf_ratings", "model.sports_sims.ncaaf_reg_season_actuals", "model.sports_sims.ncaaf_reg_season_end", "model.sports_sims.ncaaf_vegas_wins"], "model.sports_sims.ncaaf_raw_team_ratings": ["source.sports_sims.ncaaf.ncaaf_team_ratings"], "model.sports_sims.ncaaf_raw_schedule": ["source.sports_sims.ncaaf.ncaaf_schedule"], "model.sports_sims.ncaaf_raw_results": ["source.sports_sims.ncaaf.ncaaf_results"], "model.sports_sims.ncaaf_latest_elo": ["model.sports_sims.ncaaf_elo_rollforward", "model.sports_sims.ncaaf_raw_team_ratings"], "model.sports_sims.ncaaf_random_num_gen": ["model.sports_sims.ncaaf_schedules"], "model.sports_sims.ncaaf_latest_results": ["model.sports_sims.ncaaf_raw_results", "model.sports_sims.ncaaf_raw_schedule"], "model.sports_sims.ncaaf_schedules": ["model.sports_sims.nba_post_season_schedule", "model.sports_sims.ncaaf_elo_rollforward", "model.sports_sims.ncaaf_ratings", "model.sports_sims.ncaaf_raw_schedule"], "model.sports_sims.ncaaf_teams": ["model.sports_sims.ncaaf_ratings", "model.sports_sims.ncaaf_raw_schedule"], "model.sports_sims.ncaaf_vegas_wins": ["model.sports_sims.ncaaf_ratings"], "model.sports_sims.ncaaf_reg_season_actuals": ["model.sports_sims.ncaaf_latest_results", "model.sports_sims.ncaaf_teams"], "model.sports_sims.ncaaf_ratings": ["model.sports_sims.ncaaf_latest_elo", "model.sports_sims.ncaaf_raw_team_ratings"], "model.sports_sims.ncaaf_reg_season_simulator": ["model.sports_sims.ncaaf_random_num_gen", "model.sports_sims.ncaaf_schedules"], "model.sports_sims.ncaaf_reg_season_end": ["model.sports_sims.ncaaf_latest_elo", "model.sports_sims.ncaaf_reg_season_simulator"], "model.sports_sims.nba_elo_rollforward": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_raw_team_ratings"], "model.sports_sims.nfl_elo_rollforward": ["model.sports_sims.nfl_latest_results", "model.sports_sims.nfl_raw_team_ratings"], "model.sports_sims.ncaaf_elo_rollforward": ["model.sports_sims.ncaaf_latest_results", "model.sports_sims.ncaaf_raw_team_ratings"], "operation.sports_sims.sports_sims-on-run-start-0": [], "test.sports_sims.relationships_ncaaf_raw_results_winner__Team__ref_ncaaf_raw_team_ratings_.579c1da047": ["model.sports_sims.ncaaf_raw_results", "model.sports_sims.ncaaf_raw_team_ratings"], "test.sports_sims.relationships_ncaaf_raw_results_loser__Team__ref_ncaaf_raw_team_ratings_.a76c7d2cd3": ["model.sports_sims.ncaaf_raw_results", "model.sports_sims.ncaaf_raw_team_ratings"], "test.sports_sims.empty_table_ncaaf_raw_results_.2073253158": ["model.sports_sims.ncaaf_raw_results"], "test.sports_sims.empty_table_ncaaf_raw_schedule_.03fe05d2ce": ["model.sports_sims.ncaaf_raw_schedule"], "test.sports_sims.empty_table_ncaaf_raw_team_ratings_.85d416c50d": ["model.sports_sims.ncaaf_raw_team_ratings"], "test.sports_sims.unique_ncaaf_schedules_game_id.3f2bfaf1a2": ["model.sports_sims.ncaaf_schedules"], "test.sports_sims.not_null_ncaaf_schedules_game_id.2e4060e794": ["model.sports_sims.ncaaf_schedules"], "test.sports_sims.accepted_values_ncaaf_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a26fe6d7b9": ["model.sports_sims.ncaaf_schedules"], "test.sports_sims.not_null_ncaaf_schedules_visiting_team.e685957c5d": ["model.sports_sims.ncaaf_schedules"], "test.sports_sims.not_null_ncaaf_schedules_home_team.e82e78a642": ["model.sports_sims.ncaaf_schedules"], "test.sports_sims.not_null_ncaaf_ratings_team.c4a7648531": ["model.sports_sims.ncaaf_ratings"], "test.sports_sims.unique_ncaaf_ratings_team.f5e08a641e": ["model.sports_sims.ncaaf_ratings"], "test.sports_sims.not_null_ncaaf_ratings_conf.9ae3d4698b": ["model.sports_sims.ncaaf_ratings"], "test.sports_sims.accepted_values_ncaaf_ratings_conf__SEC_East___SEC_West___Big_Ten_East___ACC__CUSA__Big_12__Pac_12__American__MWC__Ind__Big_Ten_West___Sun_Belt_East___Sun_Belt_West___MAC_East___MAC_West___Other.5b0972eb60": ["model.sports_sims.ncaaf_ratings"], "test.sports_sims.not_null_ncaaf_ratings_elo_rating.a604fa0172": ["model.sports_sims.ncaaf_ratings"], "test.sports_sims.empty_table_ncaaf_random_num_gen_.05e363b629": ["model.sports_sims.ncaaf_random_num_gen"], "test.sports_sims.unique_ncaaf_teams_team_long.51973c25e3": ["model.sports_sims.ncaaf_teams"], "test.sports_sims.not_null_ncaaf_teams_team_long.00f647edf6": ["model.sports_sims.ncaaf_teams"], "test.sports_sims.unique_ncaaf_vegas_wins_team.0dc4b6bce6": ["model.sports_sims.ncaaf_vegas_wins"], "test.sports_sims.not_null_ncaaf_vegas_wins_team.b2e11cc832": ["model.sports_sims.ncaaf_vegas_wins"], "test.sports_sims.empty_table_nfl_raw_results_.4695a4b621": ["model.sports_sims.nfl_raw_results"], "test.sports_sims.empty_table_nfl_raw_schedule_.38577f458a": ["model.sports_sims.nfl_raw_schedule"], "test.sports_sims.empty_table_nfl_raw_team_ratings_.fd40ff9f75": ["model.sports_sims.nfl_raw_team_ratings"], "test.sports_sims.unique_nfl_schedules_game_id.38f1c777a5": ["model.sports_sims.nfl_schedules"], "test.sports_sims.not_null_nfl_schedules_game_id.3961bd8fd2": ["model.sports_sims.nfl_schedules"], "test.sports_sims.accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.3ce8130eae": ["model.sports_sims.nfl_schedules"], "test.sports_sims.not_null_nfl_schedules_visiting_team.fa5caebf37": ["model.sports_sims.nfl_schedules"], "test.sports_sims.not_null_nfl_schedules_home_team.4f29463b21": ["model.sports_sims.nfl_schedules"], "test.sports_sims.not_null_nfl_ratings_team.b2ede8bbf2": ["model.sports_sims.nfl_ratings"], "test.sports_sims.unique_nfl_ratings_team.8d6615a017": ["model.sports_sims.nfl_ratings"], "test.sports_sims.not_null_nfl_ratings_conf.c095117e8b": ["model.sports_sims.nfl_ratings"], "test.sports_sims.accepted_values_nfl_ratings_conf__AFC__NFC.a37211d1be": ["model.sports_sims.nfl_ratings"], "test.sports_sims.not_null_nfl_ratings_elo_rating.6dedfbc521": ["model.sports_sims.nfl_ratings"], "test.sports_sims.empty_table_nfl_random_num_gen_.0eb88dc7a0": ["model.sports_sims.nfl_random_num_gen"], "test.sports_sims.unique_nfl_teams_team_long.aba62e3173": ["model.sports_sims.nfl_teams"], "test.sports_sims.not_null_nfl_teams_team_long.12e97e9531": ["model.sports_sims.nfl_teams"], "test.sports_sims.unique_nfl_vegas_wins_team.af395b9444": ["model.sports_sims.nfl_vegas_wins"], "test.sports_sims.not_null_nfl_vegas_wins_team.2b5b398b1d": ["model.sports_sims.nfl_vegas_wins"], "test.sports_sims.not_null_nfl_vegas_wins_win_total.9fd12813b7": ["model.sports_sims.nfl_vegas_wins"], "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0": ["model.sports_sims.nba_raw_schedule"], "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759": ["model.sports_sims.nba_raw_team_ratings"], "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f": ["model.sports_sims.nba_raw_xf_series_to_seed"], "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f": ["model.sports_sims.nba_latest_elo"], "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f": ["model.sports_sims.nba_latest_elo"], "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2": ["model.sports_sims.nba_latest_results"], "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b": ["model.sports_sims.nba_schedules"], "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1": ["model.sports_sims.nba_schedules"], "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19": ["model.sports_sims.nba_schedules"], "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe": ["model.sports_sims.nba_schedules"], "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c": ["model.sports_sims.nba_schedules"], "test.sports_sims.not_null_nba_ratings_team.de3ad0b568": ["model.sports_sims.nba_ratings"], "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b": ["model.sports_sims.nba_ratings"], "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7": ["model.sports_sims.nba_ratings"], "test.sports_sims.unique_nba_ratings_team_long.6615b31795": ["model.sports_sims.nba_ratings"], "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6": ["model.sports_sims.nba_ratings"], "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69": ["model.sports_sims.nba_ratings"], "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393": ["model.sports_sims.nba_ratings"], "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01": ["model.sports_sims.nba_reg_season_schedule"], "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c": ["model.sports_sims.nba_random_num_gen"], "test.sports_sims.unique_nba_teams_team_long.a9afa2e873": ["model.sports_sims.nba_teams"], "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e": ["model.sports_sims.nba_teams"], "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1": ["model.sports_sims.nba_teams"], "test.sports_sims.not_null_nba_teams_team.6d25569f6c": ["model.sports_sims.nba_teams"], "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb": ["model.sports_sims.nba_vegas_wins"], "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e": ["model.sports_sims.nba_vegas_wins"], "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b": ["model.sports_sims.nba_vegas_wins"], "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf": ["model.sports_sims.nba_xf_series_to_seed"], "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed": ["model.sports_sims.nba_xf_series_to_seed"], "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82": ["model.sports_sims.nba_xf_series_to_seed"], "model.sports_sims.reg_season_summary": ["model.sports_sims.nba_reg_season_actuals", "model.sports_sims.nba_vegas_wins", "model.sports_sims.reg_season_end"], "source.sports_sims.nba.nba_schedule": [], "source.sports_sims.nba.nba_team_ratings": [], "source.sports_sims.nba.xf_series_to_seed": [], "source.sports_sims.nba.nba_results": [], "source.sports_sims.nfl.nfl_schedule": [], "source.sports_sims.nfl.nfl_team_ratings": [], "source.sports_sims.nfl.nfl_results": [], "source.sports_sims.ncaaf.ncaaf_schedule": [], "source.sports_sims.ncaaf.ncaaf_team_ratings": [], "source.sports_sims.ncaaf.ncaaf_results": []}, "child_map": {"model.sports_sims.reg_season_end": ["model.sports_sims.initialize_seeding", "model.sports_sims.playin_sim_r1", "model.sports_sims.reg_season_summary"], "model.sports_sims.season_summary": [], "model.sports_sims.reg_season_actuals_enriched": [], "model.sports_sims.reg_season_predictions": ["model.sports_sims.tournament_end"], "model.sports_sims.playoff_summary": ["model.sports_sims.ncaaf_season_summary", "model.sports_sims.season_summary"], "model.sports_sims.tournament_end": [], "model.sports_sims.nba_raw_results": ["model.sports_sims.nba_latest_results"], "model.sports_sims.nba_raw_xf_series_to_seed": ["model.sports_sims.nba_xf_series_to_seed", "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f"], "model.sports_sims.nba_raw_schedule": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_post_season_schedule", "model.sports_sims.nba_reg_season_schedule", "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0"], "model.sports_sims.nba_raw_team_ratings": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_latest_elo", "model.sports_sims.nba_ratings", "model.sports_sims.nba_teams", "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759"], "model.sports_sims.nba_latest_elo": ["model.sports_sims.nba_ratings", "model.sports_sims.nba_results_log", "model.sports_sims.reg_season_end", "model.sports_sims.tournament_end", "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f", "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f"], "model.sports_sims.nba_ratings": ["model.sports_sims.nba_post_season_schedule", "model.sports_sims.nba_reg_season_schedule", "model.sports_sims.nba_vegas_wins", "model.sports_sims.season_summary", "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69", "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6", "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393", "test.sports_sims.not_null_nba_ratings_team.de3ad0b568", "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7", "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b", "test.sports_sims.unique_nba_ratings_team_long.6615b31795"], "model.sports_sims.nba_teams": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_reg_season_actuals", "model.sports_sims.nba_results_log", "model.sports_sims.playoff_summary", "model.sports_sims.reg_season_actuals_enriched", "model.sports_sims.tournament_end", "test.sports_sims.not_null_nba_teams_team.6d25569f6c", "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e", "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1", "test.sports_sims.unique_nba_teams_team_long.a9afa2e873"], "model.sports_sims.nba_random_num_gen": ["model.sports_sims.playin_sim_r1", "model.sports_sims.playin_sim_r2", "model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4", "model.sports_sims.reg_season_simulator", "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c"], "model.sports_sims.nba_latest_results": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_reg_season_actuals", "model.sports_sims.nba_results_log", "model.sports_sims.reg_season_actuals_enriched", "model.sports_sims.reg_season_simulator", "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864", "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c", "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd", "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2", "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2", "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf", "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f", "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46"], "model.sports_sims.nba_reg_season_actuals": ["model.sports_sims.reg_season_summary"], "model.sports_sims.nba_xf_series_to_seed": ["model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4", "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82", "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf", "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed"], "model.sports_sims.nba_reg_season_schedule": ["model.sports_sims.nba_schedules", "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01"], "model.sports_sims.nba_schedules": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_results_log", "model.sports_sims.playin_sim_r1", "model.sports_sims.playin_sim_r2", "model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4", "model.sports_sims.reg_season_simulator", "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19", "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1", "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c", "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe", "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b"], "model.sports_sims.nba_vegas_wins": ["model.sports_sims.reg_season_summary", "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e", "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b", "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb"], "model.sports_sims.nba_post_season_schedule": ["model.sports_sims.nba_schedules", "model.sports_sims.ncaaf_schedules", "model.sports_sims.nfl_schedules"], "model.sports_sims.nba_results_log": ["model.sports_sims.nba_results_by_team", "model.sports_sims.reg_season_actuals_enriched"], "model.sports_sims.nba_results_by_team": ["model.sports_sims.reg_season_predictions"], "model.sports_sims.playin_sim_r1_end": ["model.sports_sims.playin_sim_r2", "model.sports_sims.playin_sim_r2_end"], "model.sports_sims.playin_sim_r2": ["model.sports_sims.playin_sim_r2_end"], "model.sports_sims.playin_sim_r1": ["model.sports_sims.playin_sim_r1_end"], "model.sports_sims.playin_sim_r2_end": ["model.sports_sims.initialize_seeding"], "model.sports_sims.reg_season_simulator": ["model.sports_sims.reg_season_end", "model.sports_sims.reg_season_predictions", "model.sports_sims.tournament_end"], "model.sports_sims.initialize_seeding": ["model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_summary"], "model.sports_sims.playoff_sim_r2": ["model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_summary"], "model.sports_sims.playoff_sim_r3": ["model.sports_sims.playoff_sim_r4", "model.sports_sims.playoff_summary"], "model.sports_sims.playoff_sim_r4": ["model.sports_sims.playoff_summary"], "model.sports_sims.playoff_sim_r1": ["model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_summary"], "model.sports_sims.nfl_reg_season_predictions": [], "model.sports_sims.nfl_reg_season_summary": [], "model.sports_sims.nfl_raw_schedule": ["model.sports_sims.nfl_latest_results", "model.sports_sims.nfl_schedules", "model.sports_sims.nfl_teams", "test.sports_sims.empty_table_nfl_raw_schedule_.38577f458a"], "model.sports_sims.nfl_raw_team_ratings": ["model.sports_sims.nfl_elo_rollforward", "model.sports_sims.nfl_latest_elo", "model.sports_sims.nfl_ratings", "test.sports_sims.empty_table_nfl_raw_team_ratings_.fd40ff9f75"], "model.sports_sims.nfl_raw_results": ["model.sports_sims.nfl_latest_results", "test.sports_sims.empty_table_nfl_raw_results_.4695a4b621"], "model.sports_sims.nfl_ratings": ["model.sports_sims.nfl_reg_season_predictions", "model.sports_sims.nfl_reg_season_summary", "model.sports_sims.nfl_schedules", "model.sports_sims.nfl_teams", "model.sports_sims.nfl_vegas_wins", "test.sports_sims.accepted_values_nfl_ratings_conf__AFC__NFC.a37211d1be", "test.sports_sims.not_null_nfl_ratings_conf.c095117e8b", "test.sports_sims.not_null_nfl_ratings_elo_rating.6dedfbc521", "test.sports_sims.not_null_nfl_ratings_team.b2ede8bbf2", "test.sports_sims.unique_nfl_ratings_team.8d6615a017"], "model.sports_sims.nfl_random_num_gen": ["model.sports_sims.nfl_reg_season_simulator", "test.sports_sims.empty_table_nfl_random_num_gen_.0eb88dc7a0"], "model.sports_sims.nfl_schedules": ["model.sports_sims.nfl_random_num_gen", "model.sports_sims.nfl_reg_season_simulator", "test.sports_sims.accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.3ce8130eae", "test.sports_sims.not_null_nfl_schedules_game_id.3961bd8fd2", "test.sports_sims.not_null_nfl_schedules_home_team.4f29463b21", "test.sports_sims.not_null_nfl_schedules_visiting_team.fa5caebf37", "test.sports_sims.unique_nfl_schedules_game_id.38f1c777a5"], "model.sports_sims.nfl_teams": ["model.sports_sims.nfl_reg_season_actuals", "test.sports_sims.not_null_nfl_teams_team_long.12e97e9531", "test.sports_sims.unique_nfl_teams_team_long.aba62e3173"], "model.sports_sims.nfl_latest_elo": ["model.sports_sims.nfl_ratings", "model.sports_sims.nfl_reg_season_end"], "model.sports_sims.nfl_latest_results": ["model.sports_sims.nfl_elo_rollforward", "model.sports_sims.nfl_reg_season_actuals", "model.sports_sims.nfl_reg_season_simulator"], "model.sports_sims.nfl_reg_season_actuals": [], "model.sports_sims.nfl_vegas_wins": ["model.sports_sims.nfl_reg_season_summary", "test.sports_sims.not_null_nfl_vegas_wins_team.2b5b398b1d", "test.sports_sims.not_null_nfl_vegas_wins_win_total.9fd12813b7", "test.sports_sims.unique_nfl_vegas_wins_team.af395b9444"], "model.sports_sims.nfl_reg_season_end": ["model.sports_sims.nfl_reg_season_summary"], "model.sports_sims.nfl_reg_season_simulator": ["model.sports_sims.nfl_reg_season_end", "model.sports_sims.nfl_reg_season_predictions"], "model.sports_sims.ncaaf_reg_season_predictions": [], "model.sports_sims.ncaaf_season_summary": [], "model.sports_sims.ncaaf_reg_season_summary": ["model.sports_sims.ncaaf_season_summary"], "model.sports_sims.ncaaf_reg_season_summary_by_conf": [], "model.sports_sims.ncaaf_raw_team_ratings": ["model.sports_sims.ncaaf_elo_rollforward", "model.sports_sims.ncaaf_latest_elo", "model.sports_sims.ncaaf_ratings", "test.sports_sims.empty_table_ncaaf_raw_team_ratings_.85d416c50d", "test.sports_sims.relationships_ncaaf_raw_results_loser__Team__ref_ncaaf_raw_team_ratings_.a76c7d2cd3", "test.sports_sims.relationships_ncaaf_raw_results_winner__Team__ref_ncaaf_raw_team_ratings_.579c1da047"], "model.sports_sims.ncaaf_raw_schedule": ["model.sports_sims.ncaaf_latest_results", "model.sports_sims.ncaaf_schedules", "model.sports_sims.ncaaf_teams", "test.sports_sims.empty_table_ncaaf_raw_schedule_.03fe05d2ce"], "model.sports_sims.ncaaf_raw_results": ["model.sports_sims.ncaaf_latest_results", "test.sports_sims.empty_table_ncaaf_raw_results_.2073253158", "test.sports_sims.relationships_ncaaf_raw_results_loser__Team__ref_ncaaf_raw_team_ratings_.a76c7d2cd3", "test.sports_sims.relationships_ncaaf_raw_results_winner__Team__ref_ncaaf_raw_team_ratings_.579c1da047"], "model.sports_sims.ncaaf_latest_elo": ["model.sports_sims.ncaaf_ratings", "model.sports_sims.ncaaf_reg_season_end"], "model.sports_sims.ncaaf_random_num_gen": ["model.sports_sims.ncaaf_reg_season_simulator", "test.sports_sims.empty_table_ncaaf_random_num_gen_.05e363b629"], "model.sports_sims.ncaaf_latest_results": ["model.sports_sims.ncaaf_elo_rollforward", "model.sports_sims.ncaaf_reg_season_actuals"], "model.sports_sims.ncaaf_schedules": ["model.sports_sims.ncaaf_random_num_gen", "model.sports_sims.ncaaf_reg_season_simulator", "test.sports_sims.accepted_values_ncaaf_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a26fe6d7b9", "test.sports_sims.not_null_ncaaf_schedules_game_id.2e4060e794", "test.sports_sims.not_null_ncaaf_schedules_home_team.e82e78a642", "test.sports_sims.not_null_ncaaf_schedules_visiting_team.e685957c5d", "test.sports_sims.unique_ncaaf_schedules_game_id.3f2bfaf1a2"], "model.sports_sims.ncaaf_teams": ["model.sports_sims.ncaaf_reg_season_actuals", "test.sports_sims.not_null_ncaaf_teams_team_long.00f647edf6", "test.sports_sims.unique_ncaaf_teams_team_long.51973c25e3"], "model.sports_sims.ncaaf_vegas_wins": ["model.sports_sims.ncaaf_reg_season_summary", "model.sports_sims.ncaaf_reg_season_summary_by_conf", "test.sports_sims.not_null_ncaaf_vegas_wins_team.b2e11cc832", "test.sports_sims.unique_ncaaf_vegas_wins_team.0dc4b6bce6"], "model.sports_sims.ncaaf_reg_season_actuals": ["model.sports_sims.ncaaf_reg_season_summary", "model.sports_sims.ncaaf_reg_season_summary_by_conf"], "model.sports_sims.ncaaf_ratings": ["model.sports_sims.ncaaf_reg_season_predictions", "model.sports_sims.ncaaf_reg_season_summary", "model.sports_sims.ncaaf_reg_season_summary_by_conf", "model.sports_sims.ncaaf_schedules", "model.sports_sims.ncaaf_season_summary", "model.sports_sims.ncaaf_teams", "model.sports_sims.ncaaf_vegas_wins", "test.sports_sims.accepted_values_ncaaf_ratings_conf__SEC_East___SEC_West___Big_Ten_East___ACC__CUSA__Big_12__Pac_12__American__MWC__Ind__Big_Ten_West___Sun_Belt_East___Sun_Belt_West___MAC_East___MAC_West___Other.5b0972eb60", "test.sports_sims.not_null_ncaaf_ratings_conf.9ae3d4698b", "test.sports_sims.not_null_ncaaf_ratings_elo_rating.a604fa0172", "test.sports_sims.not_null_ncaaf_ratings_team.c4a7648531", "test.sports_sims.unique_ncaaf_ratings_team.f5e08a641e"], "model.sports_sims.ncaaf_reg_season_simulator": ["model.sports_sims.ncaaf_reg_season_end", "model.sports_sims.ncaaf_reg_season_predictions"], "model.sports_sims.ncaaf_reg_season_end": ["model.sports_sims.ncaaf_reg_season_summary", "model.sports_sims.ncaaf_reg_season_summary_by_conf"], "model.sports_sims.nba_elo_rollforward": ["model.sports_sims.nba_latest_elo", "model.sports_sims.nba_post_season_schedule", "model.sports_sims.nba_reg_season_schedule", "model.sports_sims.nba_results_log"], "model.sports_sims.nfl_elo_rollforward": ["model.sports_sims.nfl_latest_elo", "model.sports_sims.nfl_schedules"], "model.sports_sims.ncaaf_elo_rollforward": ["model.sports_sims.ncaaf_latest_elo", "model.sports_sims.ncaaf_schedules"], "operation.sports_sims.sports_sims-on-run-start-0": [], "test.sports_sims.relationships_ncaaf_raw_results_winner__Team__ref_ncaaf_raw_team_ratings_.579c1da047": [], "test.sports_sims.relationships_ncaaf_raw_results_loser__Team__ref_ncaaf_raw_team_ratings_.a76c7d2cd3": [], "test.sports_sims.empty_table_ncaaf_raw_results_.2073253158": [], "test.sports_sims.empty_table_ncaaf_raw_schedule_.03fe05d2ce": [], "test.sports_sims.empty_table_ncaaf_raw_team_ratings_.85d416c50d": [], "test.sports_sims.unique_ncaaf_schedules_game_id.3f2bfaf1a2": [], "test.sports_sims.not_null_ncaaf_schedules_game_id.2e4060e794": [], "test.sports_sims.accepted_values_ncaaf_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a26fe6d7b9": [], "test.sports_sims.not_null_ncaaf_schedules_visiting_team.e685957c5d": [], "test.sports_sims.not_null_ncaaf_schedules_home_team.e82e78a642": [], "test.sports_sims.not_null_ncaaf_ratings_team.c4a7648531": [], "test.sports_sims.unique_ncaaf_ratings_team.f5e08a641e": [], "test.sports_sims.not_null_ncaaf_ratings_conf.9ae3d4698b": [], "test.sports_sims.accepted_values_ncaaf_ratings_conf__SEC_East___SEC_West___Big_Ten_East___ACC__CUSA__Big_12__Pac_12__American__MWC__Ind__Big_Ten_West___Sun_Belt_East___Sun_Belt_West___MAC_East___MAC_West___Other.5b0972eb60": [], "test.sports_sims.not_null_ncaaf_ratings_elo_rating.a604fa0172": [], "test.sports_sims.empty_table_ncaaf_random_num_gen_.05e363b629": [], "test.sports_sims.unique_ncaaf_teams_team_long.51973c25e3": [], "test.sports_sims.not_null_ncaaf_teams_team_long.00f647edf6": [], "test.sports_sims.unique_ncaaf_vegas_wins_team.0dc4b6bce6": [], "test.sports_sims.not_null_ncaaf_vegas_wins_team.b2e11cc832": [], "test.sports_sims.empty_table_nfl_raw_results_.4695a4b621": [], "test.sports_sims.empty_table_nfl_raw_schedule_.38577f458a": [], "test.sports_sims.empty_table_nfl_raw_team_ratings_.fd40ff9f75": [], "test.sports_sims.unique_nfl_schedules_game_id.38f1c777a5": [], "test.sports_sims.not_null_nfl_schedules_game_id.3961bd8fd2": [], "test.sports_sims.accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.3ce8130eae": [], "test.sports_sims.not_null_nfl_schedules_visiting_team.fa5caebf37": [], "test.sports_sims.not_null_nfl_schedules_home_team.4f29463b21": [], "test.sports_sims.not_null_nfl_ratings_team.b2ede8bbf2": [], "test.sports_sims.unique_nfl_ratings_team.8d6615a017": [], "test.sports_sims.not_null_nfl_ratings_conf.c095117e8b": [], "test.sports_sims.accepted_values_nfl_ratings_conf__AFC__NFC.a37211d1be": [], "test.sports_sims.not_null_nfl_ratings_elo_rating.6dedfbc521": [], "test.sports_sims.empty_table_nfl_random_num_gen_.0eb88dc7a0": [], "test.sports_sims.unique_nfl_teams_team_long.aba62e3173": [], "test.sports_sims.not_null_nfl_teams_team_long.12e97e9531": [], "test.sports_sims.unique_nfl_vegas_wins_team.af395b9444": [], "test.sports_sims.not_null_nfl_vegas_wins_team.2b5b398b1d": [], "test.sports_sims.not_null_nfl_vegas_wins_win_total.9fd12813b7": [], "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0": [], "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759": [], "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f": [], "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f": [], "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f": [], "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46": [], "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864": [], "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c": [], "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd": [], "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2": [], "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf": [], "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f": [], "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2": [], "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b": [], "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1": [], "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19": [], "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe": [], "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c": [], "test.sports_sims.not_null_nba_ratings_team.de3ad0b568": [], "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b": [], "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7": [], "test.sports_sims.unique_nba_ratings_team_long.6615b31795": [], "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6": [], "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69": [], "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393": [], "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01": [], "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c": [], "test.sports_sims.unique_nba_teams_team_long.a9afa2e873": [], "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e": [], "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1": [], "test.sports_sims.not_null_nba_teams_team.6d25569f6c": [], "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb": [], "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e": [], "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b": [], "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf": [], "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed": [], "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82": [], "model.sports_sims.reg_season_summary": ["model.sports_sims.season_summary"], "source.sports_sims.nba.nba_schedule": ["model.sports_sims.nba_raw_schedule"], "source.sports_sims.nba.nba_team_ratings": ["model.sports_sims.nba_raw_team_ratings"], "source.sports_sims.nba.xf_series_to_seed": ["model.sports_sims.nba_raw_xf_series_to_seed"], "source.sports_sims.nba.nba_results": ["model.sports_sims.nba_raw_results"], "source.sports_sims.nfl.nfl_schedule": ["model.sports_sims.nfl_raw_schedule"], "source.sports_sims.nfl.nfl_team_ratings": ["model.sports_sims.nfl_raw_team_ratings"], "source.sports_sims.nfl.nfl_results": ["model.sports_sims.nfl_raw_results"], "source.sports_sims.ncaaf.ncaaf_schedule": ["model.sports_sims.ncaaf_raw_schedule"], "source.sports_sims.ncaaf.ncaaf_team_ratings": ["model.sports_sims.ncaaf_raw_team_ratings"], "source.sports_sims.ncaaf.ncaaf_results": ["model.sports_sims.ncaaf_raw_results"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}