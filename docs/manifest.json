{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.2", "generated_at": "2022-10-31T06:14:17.899125Z", "invocation_id": "09a737ae-6d9a-458d-809f-f725f3096e20", "env": {}, "project_id": "aa6031d0981196ed6012e68422a8d236", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "duckdb"}, "nodes": {"model.nba_monte_carlo.playin_sim_r1_end": {"raw_sql": "{{\n    config(\n      materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nWITH cte_playin_details AS (\n    SELECT\n        S.scenario_id,\n        S.game_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS winning_team_elo_rating,\n        S.conf AS conf,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_team\n            ELSE S.home_team\n        END AS losing_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_team_elo_rating\n            ELSE S.home_team_elo_rating\n        END AS losing_team_elo_rating,\n        CASE\n            WHEN S.game_id IN (1231, 1234) THEN 'winner advance'\n            WHEN S.game_id IN (1232, 1235) THEN 'loser eliminated'\n        END AS result\n    FROM {{ ref( 'playin_sim_r1' ) }} S\n)\n\nSELECT\n    *,\n    CASE\n        WHEN game_id IN (1231, 1234) THEN losing_team\n        WHEN game_id IN (1232, 1235) THEN winning_team\n    END AS remaining_team\nFROM cte_playin_details", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.playin_sim_r1"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "playin", "playin_sim_r1_end"], "unique_id": "model.nba_monte_carlo.playin_sim_r1_end", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/playin/playin_sim_r1_end.sql", "original_file_path": "models/conformed/playin/playin_sim_r1_end.sql", "name": "playin_sim_r1_end", "alias": "playin_sim_r1_end", "checksum": {"name": "sha256", "checksum": "88e4df22e248edbda857020fb0a5907b6d805c87093caa01e772ce69cec5d964"}, "tags": [], "refs": [["playin_sim_r1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playin/playin_sim_r1_end.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979178.1727972, "compiled_sql": "\n\nWITH cte_playin_details AS (\n    SELECT\n        S.scenario_id,\n        S.game_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS winning_team_elo_rating,\n        S.conf AS conf,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_team\n            ELSE S.home_team\n        END AS losing_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_team_elo_rating\n            ELSE S.home_team_elo_rating\n        END AS losing_team_elo_rating,\n        CASE\n            WHEN S.game_id IN (1231, 1234) THEN 'winner advance'\n            WHEN S.game_id IN (1232, 1235) THEN 'loser eliminated'\n        END AS result\n    FROM \"main\".\"main\".\"playin_sim_r1\" S\n)\n\nSELECT\n    *,\n    CASE\n        WHEN game_id IN (1231, 1234) THEN losing_team\n        WHEN game_id IN (1232, 1235) THEN winning_team\n    END AS remaining_team\nFROM cte_playin_details", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"playin_sim_r1_end\""}, "model.nba_monte_carlo.playin_sim_r2": {"raw_sql": "-- depends-on: {{ ref( 'random_num_gen' ) }}\n\n{{\n    config(\n      materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT \n    R.scenario_id,\n    S.game_id,\n    S.home_team[7:] AS home_team_id,\n    S.visiting_team[8:] AS visiting_team_id,\n    EV.conf AS conf,\n    EV.remaining_team AS visiting_team,\n    EV.winning_team_elo_rating AS visiting_team_elo_rating,\n    EH.remaining_team AS home_team,\n    EH.losing_team_elo_rating AS home_team_elo_rating,\n    {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating' ) }} as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating' ) }} >= R.rand_result THEN EH.remaining_team\n        ELSE EV.remaining_team\n    END AS winning_team \nFROM {{ ref( 'schedules' ) }} S\n    LEFT JOIN {{ \"'/tmp/data_catalog/conformed/random_num_gen.parquet'\" if target.name == 'parquet'\n        else ref( 'random_num_gen' ) }} R ON R.game_id = S.game_id\n    LEFT JOIN {{ ref( 'playin_sim_r1_end' ) }} EH ON R.scenario_id = EH.scenario_id AND EH.game_id = S.home_team[7:]\n    LEFT JOIN {{ ref( 'playin_sim_r1_end' ) }} EV ON R.scenario_id = EV.scenario_id AND EV.game_id = S.visiting_team[8:]\nWHERE S.type = 'playin_r2'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.nba_monte_carlo.elo_calc"], "nodes": ["model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.playin_sim_r1_end", "model.nba_monte_carlo.playin_sim_r1_end"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "playin", "playin_sim_r2"], "unique_id": "model.nba_monte_carlo.playin_sim_r2", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/playin/playin_sim_r2.sql", "original_file_path": "models/conformed/playin/playin_sim_r2.sql", "name": "playin_sim_r2", "alias": "playin_sim_r2", "checksum": {"name": "sha256", "checksum": "870ca688b0efae330fb487e664273af8aedac0e35600b9027b71b4096a15d169"}, "tags": [], "refs": [["random_num_gen"], ["schedules"], ["random_num_gen"], ["playin_sim_r1_end"], ["playin_sim_r1_end"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playin/playin_sim_r2.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979178.267944, "compiled_sql": "-- depends-on: \"main\".\"main\".\"random_num_gen\"\n\n\n\nSELECT \n    R.scenario_id,\n    S.game_id,\n    S.home_team[7:] AS home_team_id,\n    S.visiting_team[8:] AS visiting_team_id,\n    EV.conf AS conf,\n    EV.remaining_team AS visiting_team,\n    EV.winning_team_elo_rating AS visiting_team_elo_rating,\n    EH.remaining_team AS home_team,\n    EH.losing_team_elo_rating AS home_team_elo_rating,\n    ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating )::real/400)+1))) * 10000 as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating )::real/400)+1))) * 10000 >= R.rand_result THEN EH.remaining_team\n        ELSE EV.remaining_team\n    END AS winning_team \nFROM \"main\".\"main\".\"schedules\" S\n    LEFT JOIN \"main\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN \"main\".\"main\".\"playin_sim_r1_end\" EH ON R.scenario_id = EH.scenario_id AND EH.game_id = S.home_team[7:]\n    LEFT JOIN \"main\".\"main\".\"playin_sim_r1_end\" EV ON R.scenario_id = EV.scenario_id AND EV.game_id = S.visiting_team[8:]\nWHERE S.type = 'playin_r2'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"playin_sim_r2\""}, "model.nba_monte_carlo.playin_sim_r2_end": {"raw_sql": "{{\n    config(\n      materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT\n    P1.scenario_id,\n    P1.conf,\n    P1.winning_team,\n    P1.conf || '-7' AS seed,\n    P1.winning_team_elo_rating\nFROM {{ ref( 'playin_sim_r1_end' ) }} P1\nWHERE P1.result = 'winner advance'\nUNION ALL\nSELECT\n    P2.scenario_id,\n    P2.conf AS conf,\n    P2.winning_team,\n    P2.conf || '-8' AS seed,\n    CASE\n        WHEN P2.winning_team = P2.home_team THEN P2.home_team_elo_rating\n        ELSE P2.visiting_team_elo_rating\n    END AS elo_rating\nFROM {{ ref( 'playin_sim_r2' ) }} P2", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.playin_sim_r1_end", "model.nba_monte_carlo.playin_sim_r2"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "playin", "playin_sim_r2_end"], "unique_id": "model.nba_monte_carlo.playin_sim_r2_end", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/playin/playin_sim_r2_end.sql", "original_file_path": "models/conformed/playin/playin_sim_r2_end.sql", "name": "playin_sim_r2_end", "alias": "playin_sim_r2_end", "checksum": {"name": "sha256", "checksum": "005e748f90592685d2dedcf60a3b3e7e82b912f0da62702a299935e3c9886dd9"}, "tags": [], "refs": [["playin_sim_r1_end"], ["playin_sim_r2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playin/playin_sim_r2_end.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979178.2974336, "compiled_sql": "\n\nSELECT\n    P1.scenario_id,\n    P1.conf,\n    P1.winning_team,\n    P1.conf || '-7' AS seed,\n    P1.winning_team_elo_rating\nFROM \"main\".\"main\".\"playin_sim_r1_end\" P1\nWHERE P1.result = 'winner advance'\nUNION ALL\nSELECT\n    P2.scenario_id,\n    P2.conf AS conf,\n    P2.winning_team,\n    P2.conf || '-8' AS seed,\n    CASE\n        WHEN P2.winning_team = P2.home_team THEN P2.home_team_elo_rating\n        ELSE P2.visiting_team_elo_rating\n    END AS elo_rating\nFROM \"main\".\"main\".\"playin_sim_r2\" P2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"playin_sim_r2_end\""}, "model.nba_monte_carlo.playin_sim_r1": {"raw_sql": "-- depends-on: {{ ref( 'random_num_gen' ) }}\n-- depends-on: {{ ref( 'reg_season_end' ) }}\n\n{{\n    config(\n      materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT\n    R.scenario_id,\n    S.game_id,\n    EV.conf AS conf,\n    EV.winning_team AS visiting_team,\n    EV.elo_rating AS visiting_team_elo_rating,\n    EH.winning_team AS home_team,\n    EH.elo_rating AS home_team_elo_rating,\n    {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating' ) }} AS home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating' ) }} >= R.rand_result THEN EH.winning_team\n        ELSE EV.winning_team\n    END AS winning_team \nFROM {{ ref( 'schedules' ) }} S\n    LEFT JOIN {{ \"'/tmp/data_catalog/conformed/random_num_gen.parquet'\" if target.name == 'parquet'\n        else ref( 'random_num_gen' ) }} R ON R.game_id = S.game_id\n    LEFT JOIN {{ \"'/tmp/data_catalog/conformed/reg_season_end.parquet'\" if target.name == 'parquet'\n        else ref( 'reg_season_end' ) }} EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN {{ \"'/tmp/data_catalog/conformed/reg_season_end.parquet'\" if target.name == 'parquet'\n        else ref( 'reg_season_end' ) }} EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\nWHERE S.type = 'playin_r1'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.nba_monte_carlo.elo_calc"], "nodes": ["model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.reg_season_end"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "playin", "playin_sim_r1"], "unique_id": "model.nba_monte_carlo.playin_sim_r1", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/playin/playin_sim_r1.sql", "original_file_path": "models/conformed/playin/playin_sim_r1.sql", "name": "playin_sim_r1", "alias": "playin_sim_r1", "checksum": {"name": "sha256", "checksum": "21cfa1790104ae8b9c2ae18336b9d5e7395c9e9c97b8e36ca06021641c47303b"}, "tags": [], "refs": [["random_num_gen"], ["reg_season_end"], ["schedules"], ["random_num_gen"], ["reg_season_end"], ["reg_season_end"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playin/playin_sim_r1.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979178.3195891, "compiled_sql": "-- depends-on: \"main\".\"main\".\"random_num_gen\"\n-- depends-on: \"main\".\"main\".\"reg_season_end\"\n\n\n\nSELECT\n    R.scenario_id,\n    S.game_id,\n    EV.conf AS conf,\n    EV.winning_team AS visiting_team,\n    EV.elo_rating AS visiting_team_elo_rating,\n    EH.winning_team AS home_team,\n    EH.elo_rating AS home_team_elo_rating,\n    ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating )::real/400)+1))) * 10000 AS home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating )::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n        ELSE EV.winning_team\n    END AS winning_team \nFROM \"main\".\"main\".\"schedules\" S\n    LEFT JOIN \"main\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN \"main\".\"main\".\"reg_season_end\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN \"main\".\"main\".\"reg_season_end\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\nWHERE S.type = 'playin_r1'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"playin_sim_r1\""}, "model.nba_monte_carlo.random_num_gen": {"raw_sql": "{{\n    config(\n        materialized = \"view\" if target.name == 'parquet' else \"table\",\n        post_hook = \"COPY (SELECT * FROM {{ this }} ) TO '/tmp/data_catalog/conformed/{{ this.table }}.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\"\n            if target.name == 'parquet' else \" \"\n) }}\n\nSELECT\n    i.scenario_id,\n    S.game_id,\n    (random() * 10000)::smallint AS rand_result\nFROM {{ ref( 'scenario_gen' ) }} AS i\nCROSS JOIN {{ ref( 'schedules' ) }} AS S", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.scenario_gen", "model.nba_monte_carlo.schedules"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [{"sql": " ", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "inputs", "random_num_gen"], "unique_id": "model.nba_monte_carlo.random_num_gen", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/inputs/random_num_gen.sql", "original_file_path": "models/conformed/inputs/random_num_gen.sql", "name": "random_num_gen", "alias": "random_num_gen", "checksum": {"name": "sha256", "checksum": "50d585c8af61beafd58c934b744dae14081c546e42aceb8d91b4cbe2515b2035"}, "tags": [], "refs": [["scenario_gen"], ["schedules"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/random_num_gen.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "table", "post-hook": [" "]}, "created_at": 1666979179.1684046, "compiled_sql": "\n\nSELECT\n    i.scenario_id,\n    S.game_id,\n    (random() * 10000)::smallint AS rand_result\nFROM \"main\".\"main\".\"scenario_gen\" AS i\nCROSS JOIN \"main\".\"main\".\"schedules\" AS S", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"random_num_gen\""}, "model.nba_monte_carlo.vegas_wins": {"raw_sql": "{{\n    config(\n      materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT\n    team,\n    win_total\nFROM {{ ref( 'ratings' ) }}\nGROUP BY ALL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.ratings"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "inputs", "vegas_wins"], "unique_id": "model.nba_monte_carlo.vegas_wins", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/inputs/vegas_wins.sql", "original_file_path": "models/conformed/inputs/vegas_wins.sql", "name": "vegas_wins", "alias": "vegas_wins", "checksum": {"name": "sha256", "checksum": "969ab4c8e2dc3eee05aec380006359824229cf54dfcedced6ee8f38c37d4f501"}, "tags": [], "refs": [["ratings"]], "sources": [], "metrics": [], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "win_total": {"name": "win_total", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/vegas_wins.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1781745, "compiled_sql": "\n\nSELECT\n    team,\n    win_total\nFROM \"main\".\"main\".\"ratings\"\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"vegas_wins\""}, "model.nba_monte_carlo.xf_series_to_seed": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT\n    series_id,\n    seed\nFROM {{ ref( 'prep_xf_series_to_seed' ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_xf_series_to_seed"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "inputs", "xf_series_to_seed"], "unique_id": "model.nba_monte_carlo.xf_series_to_seed", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/inputs/xf_series_to_seed.sql", "original_file_path": "models/conformed/inputs/xf_series_to_seed.sql", "name": "xf_series_to_seed", "alias": "xf_series_to_seed", "checksum": {"name": "sha256", "checksum": "1de78d047ac7a94c07a2350e7ea0afb6835c23e6cf8a889a99620fa2f7e83ac9"}, "tags": [], "refs": [["prep_xf_series_to_seed"]], "sources": [], "metrics": [], "description": "", "columns": {"series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed": {"name": "seed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/xf_series_to_seed.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1837614, "compiled_sql": "\n\nSELECT\n    series_id,\n    seed\nFROM \"main\".\"main\".\"prep_xf_series_to_seed\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"xf_series_to_seed\""}, "model.nba_monte_carlo.reg_season_schedule": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT\n    (S._smart_source_lineno - 1)::int AS game_id,\n    'reg_season' AS type,\n    0 as series_id,\n    V.conf AS visiting_conf,\n    V.team AS visiting_team,\n    V.elo_rating::int AS visiting_team_elo_rating,\n    H.conf AS home_conf,\n    H.team AS home_team,\n    H.elo_rating::int AS home_team_elo_rating\nFROM {{ ref( 'prep_nba_elo_latest' ) }} AS S\nLEFT JOIN {{ ref( 'ratings' ) }} V ON V.team = S.team2\nLEFT JOIN {{ ref( 'ratings' ) }} H ON H.team = S.team1\nGROUP BY ALL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_nba_elo_latest", "model.nba_monte_carlo.ratings", "model.nba_monte_carlo.ratings"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "inputs", "reg_season_schedule"], "unique_id": "model.nba_monte_carlo.reg_season_schedule", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/inputs/reg_season_schedule.sql", "original_file_path": "models/conformed/inputs/reg_season_schedule.sql", "name": "reg_season_schedule", "alias": "reg_season_schedule", "checksum": {"name": "sha256", "checksum": "35c1327a3226e1774f21b0ff3283297409fcc76fdfc424b31342a5c9d675a9b1"}, "tags": [], "refs": [["prep_nba_elo_latest"], ["ratings"], ["ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/reg_season_schedule.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1670558, "compiled_sql": "\n\nSELECT\n    (S._smart_source_lineno - 1)::int AS game_id,\n    'reg_season' AS type,\n    0 as series_id,\n    V.conf AS visiting_conf,\n    V.team AS visiting_team,\n    V.elo_rating::int AS visiting_team_elo_rating,\n    H.conf AS home_conf,\n    H.team AS home_team,\n    H.elo_rating::int AS home_team_elo_rating\nFROM \"main\".\"main\".\"prep_nba_elo_latest\" AS S\nLEFT JOIN \"main\".\"main\".\"ratings\" V ON V.team = S.team2\nLEFT JOIN \"main\".\"main\".\"ratings\" H ON H.team = S.team1\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"reg_season_schedule\""}, "model.nba_monte_carlo.teams": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT\n    S.visitorneutral AS team_long,\n    R.team\nFROM {{ ref( 'prep_schedule' ) }} S\nLEFT JOIN {{ ref( 'ratings' ) }} AS R ON R.team_long = S.visitorneutral\nWHERE R.team IS NOT NULL\nGROUP BY ALL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_schedule", "model.nba_monte_carlo.ratings"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "inputs", "teams"], "unique_id": "model.nba_monte_carlo.teams", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/inputs/teams.sql", "original_file_path": "models/conformed/inputs/teams.sql", "name": "teams", "alias": "teams", "checksum": {"name": "sha256", "checksum": "cb6bc7bb6b6e1416348b79755859e80bbc4ba86b53b43d756e4c814b8d97d8da"}, "tags": [], "refs": [["prep_schedule"], ["ratings"]], "sources": [], "metrics": [], "description": "", "columns": {"team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team": {"name": "team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/teams.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1748712, "compiled_sql": "\n\nSELECT\n    S.visitorneutral AS team_long,\n    R.team\nFROM \"main\".\"main\".\"prep_schedule\" S\nLEFT JOIN \"main\".\"main\".\"ratings\" AS R ON R.team_long = S.visitorneutral\nWHERE R.team IS NOT NULL\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"teams\""}, "model.nba_monte_carlo.ratings": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT\n    orig.team,\n    orig.team_long,\n    orig.conf,\n    CASE\n        WHEN latest.latest_ratings = true AND latest.elo_rating IS NOT NULL THEN latest.elo_rating\n        ELSE orig.elo_rating\n    END AS elo_rating,\n    orig.elo_rating AS original_rating,\n    orig.win_total\nFROM {{ ref( 'prep_team_ratings' ) }} orig\nLEFT JOIN {{ ref( 'prep_elo_post' ) }} latest ON latest.team = orig.team\nGROUP BY ALL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_team_ratings", "model.nba_monte_carlo.prep_elo_post"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "inputs", "ratings"], "unique_id": "model.nba_monte_carlo.ratings", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/inputs/ratings.sql", "original_file_path": "models/conformed/inputs/ratings.sql", "name": "ratings", "alias": "ratings", "checksum": {"name": "sha256", "checksum": "848d138410ac67f3024c0c59afff0657cee23794c0240eaad25014983252d008"}, "tags": [], "refs": [["prep_team_ratings"], ["prep_elo_post"]], "sources": [], "metrics": [], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conf": {"name": "conf", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "elo_rating": {"name": "elo_rating", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/ratings.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1635973, "compiled_sql": "\n\nSELECT\n    orig.team,\n    orig.team_long,\n    orig.conf,\n    CASE\n        WHEN latest.latest_ratings = true AND latest.elo_rating IS NOT NULL THEN latest.elo_rating\n        ELSE orig.elo_rating\n    END AS elo_rating,\n    orig.elo_rating AS original_rating,\n    orig.win_total\nFROM \"main\".\"main\".\"prep_team_ratings\" orig\nLEFT JOIN \"main\".\"main\".\"prep_elo_post\" latest ON latest.team = orig.team\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"ratings\""}, "model.nba_monte_carlo.schedules": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT\n    *\nFROM {{ ref( 'reg_season_schedule' ) }}\nUNION ALL\nSELECT\n    *\nFROM {{ ref( 'post_season_schedule' ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.reg_season_schedule", "model.nba_monte_carlo.post_season_schedule"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "inputs", "schedules"], "unique_id": "model.nba_monte_carlo.schedules", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/inputs/schedules.sql", "original_file_path": "models/conformed/inputs/schedules.sql", "name": "schedules", "alias": "schedules", "checksum": {"name": "sha256", "checksum": "14003b4543c87c3e5117696781ccaf58abc454e0408213a1c62f8250b9fdad1d"}, "tags": [], "refs": [["reg_season_schedule"], ["post_season_schedule"]], "sources": [], "metrics": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visiting_conf": {"name": "visiting_conf", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visiting_team_elo_rating": {"name": "visiting_team_elo_rating", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_conf": {"name": "home_conf", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_elo_rating": {"name": "home_team_elo_rating", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/schedules.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1571963, "compiled_sql": "\n\nSELECT\n    *\nFROM \"main\".\"main\".\"reg_season_schedule\"\nUNION ALL\nSELECT\n    *\nFROM \"main\".\"main\".\"post_season_schedule\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"schedules\""}, "model.nba_monte_carlo.scenario_gen": {"raw_sql": "{{\n    config(\n      materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT I.generate_series AS scenario_id\nFROM generate_series(1, {{ var('scenarios') }} ) AS I", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "inputs", "scenario_gen"], "unique_id": "model.nba_monte_carlo.scenario_gen", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/inputs/scenario_gen.sql", "original_file_path": "models/conformed/inputs/scenario_gen.sql", "name": "scenario_gen", "alias": "scenario_gen", "checksum": {"name": "sha256", "checksum": "0b3f0aa04fce4ac49911ac815f5847aab44c279e2e6720eba783926ba9c1c9fa"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/scenario_gen.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1700904, "compiled_sql": "\n\nSELECT I.generate_series AS scenario_id\nFROM generate_series(1, 10000 ) AS I", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"scenario_gen\""}, "model.nba_monte_carlo.post_season_schedule": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT\n    S.key::int AS game_id,\n    S.type,\n    S.series_id,\n    NULL AS visiting_conf,\n    S.visitorneutral AS visiting_team,\n    NULL AS visiting_team_elo_rating,\n    NULL AS home_conf,\n    S.homeneutral AS home_team,\n    NULL AS home_team_elo_rating\nFROM {{ ref( 'prep_schedule' ) }} AS S\nWHERE S.type <> 'reg_season'\nGROUP BY ALL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_schedule"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "inputs", "post_season_schedule"], "unique_id": "model.nba_monte_carlo.post_season_schedule", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/inputs/post_season_schedule.sql", "original_file_path": "models/conformed/inputs/post_season_schedule.sql", "name": "post_season_schedule", "alias": "post_season_schedule", "checksum": {"name": "sha256", "checksum": "badaaf8483c7791eb8ea965b3a6ae61064787912083c8e67992951d74e12308a"}, "tags": [], "refs": [["prep_schedule"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/post_season_schedule.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1655662, "compiled_sql": "\n\nSELECT\n    S.key::int AS game_id,\n    S.type,\n    S.series_id,\n    NULL AS visiting_conf,\n    S.visitorneutral AS visiting_team,\n    NULL AS visiting_team_elo_rating,\n    NULL AS home_conf,\n    S.homeneutral AS home_team,\n    NULL AS home_team_elo_rating\nFROM \"main\".\"main\".\"prep_schedule\" AS S\nWHERE S.type <> 'reg_season'\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"post_season_schedule\""}, "model.nba_monte_carlo.latest_results": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT\n    (_smart_source_lineno - 1)::int AS game_id,\n    team1 AS home_team, \n    score1 AS home_team_score,\n    team2 AS visiting_team,\n    score2 AS visiting_team_score,\n    date,\n    CASE \n        WHEN score1 > score2 THEN team1\n        ELSE team2\n    END AS winning_team,\n    CASE \n        WHEN score1 > score2 THEN team2\n        ELSE team1\n    END AS losing_team,\n    {{ var('include_actuals') }} AS include_actuals\nFROM {{ ref( 'prep_nba_elo_latest' ) }}\nWHERE score1 IS NOT NULL\nGROUP BY ALL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_nba_elo_latest"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "inputs", "latest_results"], "unique_id": "model.nba_monte_carlo.latest_results", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/inputs/latest_results.sql", "original_file_path": "models/conformed/inputs/latest_results.sql", "name": "latest_results", "alias": "latest_results", "checksum": {"name": "sha256", "checksum": "a562240902af3927938b3ccd0cf3546f543ff60be76ffb766a90c537aec476dc"}, "tags": [], "refs": [["prep_nba_elo_latest"]], "sources": [], "metrics": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_score": {"name": "home_team_score", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visiting_team_score": {"name": "visiting_team_score", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "winning_team": {"name": "winning_team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "losing_team": {"name": "losing_team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/latest_results.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1395214, "compiled_sql": "\n\nSELECT\n    (_smart_source_lineno - 1)::int AS game_id,\n    team1 AS home_team, \n    score1 AS home_team_score,\n    team2 AS visiting_team,\n    score2 AS visiting_team_score,\n    date,\n    CASE \n        WHEN score1 > score2 THEN team1\n        ELSE team2\n    END AS winning_team,\n    CASE \n        WHEN score1 > score2 THEN team2\n        ELSE team1\n    END AS losing_team,\n    True AS include_actuals\nFROM \"main\".\"main\".\"prep_nba_elo_latest\"\nWHERE score1 IS NOT NULL\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"latest_results\""}, "model.nba_monte_carlo.playoff_sim_r2": {"raw_sql": "{{\n    config(\n        materialized = \"view\" if target.name == 'parquet' else \"table\",\n        post_hook = \"COPY (SELECT * FROM {{ this }} ) TO '/tmp/data_catalog/conformed/{{ this.table }}.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\"\n            if target.name == 'parquet' else \" \"\n) }}\n\n-- depends-on: {{ ref( 'playoff_sim_r1' ) }}\n\nWITH cte_playoff_sim AS (\n    {{ playoff_sim('playoffs_r2','/tmp/data_catalog/conformed/playoff_sim_r1.parquet') if target.name == 'parquet'\n        else playoff_sim('playoffs_r2','playoff_sim_r1' )}}\n)\n\n{{ playoff_sim_end( 'cte_playoff_sim' ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.nba_monte_carlo.playoff_sim", "macro.nba_monte_carlo.playoff_sim_end"], "nodes": ["model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.xf_series_to_seed"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [{"sql": " ", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "playoff_sim_r2"], "unique_id": "model.nba_monte_carlo.playoff_sim_r2", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/playoffs/playoff_sim_r2.sql", "original_file_path": "models/conformed/playoffs/playoff_sim_r2.sql", "name": "playoff_sim_r2", "alias": "playoff_sim_r2", "checksum": {"name": "sha256", "checksum": "8fc99b5fb14e42dbb300d0f71a87d2dfc41d43109ee710f8977fed196d063242"}, "tags": [], "refs": [["playoff_sim_r1"], ["random_num_gen"], ["schedules"], ["random_num_gen"], ["playoff_sim_r1"], ["playoff_sim_r1"], ["xf_series_to_seed"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/playoff_sim_r2.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "table", "post-hook": [" "]}, "created_at": 1666979178.5745118, "compiled_sql": "\n\n-- depends-on: \"main\".\"main\".\"playoff_sim_r1\"\n\nWITH cte_playoff_sim AS (\n    \n-- depends-on: \"main\".\"main\".\"random_num_gen\"\n\nWITH cte_step_1 AS (\n    SELECT\n      R.scenario_id,\n      S.game_id,\n      S.series_id,\n      S.visiting_team AS visitor_key,\n      S.home_team AS home_key,\n      EV.winning_team AS visiting_team,\n      EV.elo_rating AS visiting_team_elo_rating,\n      EH.winning_team AS home_team,\n      EH.elo_rating AS home_team_elo_rating,\n      ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating )::real/400)+1))) * 10000 as home_team_win_probability,\n      R.rand_result,\n      CASE\n         WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating )::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n         ELSE EV.winning_team\n      END AS winning_team \n    FROM \"main\".\"main\".\"schedules\" S\n    \n    LEFT JOIN \"main\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN  \"main\".\"main\".\"playoff_sim_r1\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN  \"main\".\"main\".\"playoff_sim_r1\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n    \n    WHERE S.type =  'playoffs_r2' ),\ncte_step_2 AS (\n    SELECT step1.*,\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n    FROM cte_step_1 step1\n),\ncte_final_game AS (\n    SELECT scenario_id,\n        series_id,\n        game_id\n    FROM cte_step_2\n    WHERE series_result = 4\n)\nSELECT step2.* \nFROM cte_step_2 step2\n    INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n        AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\nORDER BY step2.scenario_id, \n    step2.series_id, \n    step2.game_id\n)\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed\n    FROM cte_playoff_sim E\nLEFT JOIN \"main\".\"main\".\"xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"playoff_sim_r2\""}, "model.nba_monte_carlo.initialize_seeding": {"raw_sql": "-- depends-on: {{ ref( 'reg_season_end' ) }}\n\n{{\n    config(\n        materialized = \"view\" if target.name == 'parquet' else \"table\",\n        post_hook = \"COPY (SELECT * FROM {{ this }} ) TO '/tmp/data_catalog/conformed/{{ this.table }}.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\"\n            if target.name == 'parquet' else \" \"\n) }}\n\nWITH cte_teams AS (\n    SELECT\n        scenario_id,\n        conf,\n        winning_team,\n        seed,\n        elo_rating\n    FROM {{ \"'/tmp/data_catalog/conformed/reg_season_end.parquet'\" if target.name == 'parquet'\n        else ref( 'reg_season_end' ) }}\n    WHERE season_rank < 7\n    UNION ALL\n    SELECT *\n    FROM {{ ref('playin_sim_r2_end' ) }}\n)\n\nSELECT T.*\nFROM cte_teams T", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.playin_sim_r2_end"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [{"sql": " ", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "initialize_seeding"], "unique_id": "model.nba_monte_carlo.initialize_seeding", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/playoffs/initialize_seeding.sql", "original_file_path": "models/conformed/playoffs/initialize_seeding.sql", "name": "initialize_seeding", "alias": "initialize_seeding", "checksum": {"name": "sha256", "checksum": "c7786c5aa5bde4744e735e6103cef807d17942f8fdae9f65fb310fd2f8d7c292"}, "tags": [], "refs": [["reg_season_end"], ["reg_season_end"], ["playin_sim_r2_end"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/initialize_seeding.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "table", "post-hook": [" "]}, "created_at": 1666979178.6123612, "compiled_sql": "-- depends-on: \"main\".\"main\".\"reg_season_end\"\n\n\n\nWITH cte_teams AS (\n    SELECT\n        scenario_id,\n        conf,\n        winning_team,\n        seed,\n        elo_rating\n    FROM \"main\".\"main\".\"reg_season_end\"\n    WHERE season_rank < 7\n    UNION ALL\n    SELECT *\n    FROM \"main\".\"main\".\"playin_sim_r2_end\"\n)\n\nSELECT T.*\nFROM cte_teams T", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"initialize_seeding\""}, "model.nba_monte_carlo.playoff_sim_r3": {"raw_sql": "{{\n    config(\n        materialized = \"view\" if target.name == 'parquet' else \"table\",\n        post_hook = \"COPY (SELECT * FROM {{ this }} ) TO '/tmp/data_catalog/conformed/{{ this.table }}.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\"\n            if target.name == 'parquet' else \" \"\n) }}\n\n-- depends-on: {{ ref( 'playoff_sim_r2' ) }}\n\nWITH cte_playoff_sim AS (\n    {{ playoff_sim('playoffs_r3','/tmp/data_catalog/conformed/playoff_sim_r2.parquet') if target.name == 'parquet'\n        else playoff_sim('playoffs_r3','playoff_sim_r2' )}}\n)\n\n{{ playoff_sim_end( 'cte_playoff_sim' ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.nba_monte_carlo.playoff_sim", "macro.nba_monte_carlo.playoff_sim_end"], "nodes": ["model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.xf_series_to_seed"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [{"sql": " ", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "playoff_sim_r3"], "unique_id": "model.nba_monte_carlo.playoff_sim_r3", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/playoffs/playoff_sim_r3.sql", "original_file_path": "models/conformed/playoffs/playoff_sim_r3.sql", "name": "playoff_sim_r3", "alias": "playoff_sim_r3", "checksum": {"name": "sha256", "checksum": "aa9e2d51054f1fe444642a4d860d7c1905671c49d675f2c2ce345bcf4df66487"}, "tags": [], "refs": [["playoff_sim_r2"], ["random_num_gen"], ["schedules"], ["random_num_gen"], ["playoff_sim_r2"], ["playoff_sim_r2"], ["xf_series_to_seed"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/playoff_sim_r3.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "table", "post-hook": [" "]}, "created_at": 1666979178.6296911, "compiled_sql": "\n\n-- depends-on: \"main\".\"main\".\"playoff_sim_r2\"\n\nWITH cte_playoff_sim AS (\n    \n-- depends-on: \"main\".\"main\".\"random_num_gen\"\n\nWITH cte_step_1 AS (\n    SELECT\n      R.scenario_id,\n      S.game_id,\n      S.series_id,\n      S.visiting_team AS visitor_key,\n      S.home_team AS home_key,\n      EV.winning_team AS visiting_team,\n      EV.elo_rating AS visiting_team_elo_rating,\n      EH.winning_team AS home_team,\n      EH.elo_rating AS home_team_elo_rating,\n      ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating )::real/400)+1))) * 10000 as home_team_win_probability,\n      R.rand_result,\n      CASE\n         WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating )::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n         ELSE EV.winning_team\n      END AS winning_team \n    FROM \"main\".\"main\".\"schedules\" S\n    \n    LEFT JOIN \"main\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN  \"main\".\"main\".\"playoff_sim_r2\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN  \"main\".\"main\".\"playoff_sim_r2\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n    \n    WHERE S.type =  'playoffs_r3' ),\ncte_step_2 AS (\n    SELECT step1.*,\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n    FROM cte_step_1 step1\n),\ncte_final_game AS (\n    SELECT scenario_id,\n        series_id,\n        game_id\n    FROM cte_step_2\n    WHERE series_result = 4\n)\nSELECT step2.* \nFROM cte_step_2 step2\n    INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n        AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\nORDER BY step2.scenario_id, \n    step2.series_id, \n    step2.game_id\n)\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed\n    FROM cte_playoff_sim E\nLEFT JOIN \"main\".\"main\".\"xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"playoff_sim_r3\""}, "model.nba_monte_carlo.season_summary": {"raw_sql": "-- depends-on: {{ ref( 'reg_season_summary' ) }}\n\n{{\n    config(\n        materialized = \"view\" if target.name == 'parquet' else \"table\",\n        post_hook = \"COPY (SELECT * FROM {{ this }} ) TO '/tmp/data_catalog/conformed/{{ this.table }}.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\"\n            if target.name == 'parquet' else \" \"\n) }}\n\nSELECT\n    ratings.elo_rating || ' (' || CASE WHEN original_rating < elo_rating THEN '+' ELSE '' END || (elo_rating-original_rating)::int || ')' AS elo_rating,\n    R.*,\n    P.made_playoffs,\n    P.made_conf_semis,\n    P.made_conf_finals,\n    P.made_finals,\n    P.won_finals\nFROM {{ \"'/tmp/data_catalog/conformed/reg_season_summary.parquet'\" if target.name == 'parquet'\n    else ref( 'reg_season_summary' ) }} R\nLEFT JOIN {{ ref( 'playoff_summary' ) }} P ON P.team = R.team\nLEFT JOIN {{ ref( 'ratings' ) }} ratings ON ratings.team = R.team", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.reg_season_summary", "model.nba_monte_carlo.reg_season_summary", "model.nba_monte_carlo.playoff_summary", "model.nba_monte_carlo.ratings"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [{"sql": " ", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "season_summary"], "unique_id": "model.nba_monte_carlo.season_summary", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/playoffs/season_summary.sql", "original_file_path": "models/conformed/playoffs/season_summary.sql", "name": "season_summary", "alias": "season_summary", "checksum": {"name": "sha256", "checksum": "3abefc422a16cd2f7e7e3b00445c9e80bafa8813db7a2864e0ae3d6b6d467c1d"}, "tags": [], "refs": [["reg_season_summary"], ["reg_season_summary"], ["playoff_summary"], ["ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/season_summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "table", "post-hook": [" "]}, "created_at": 1666979178.6549633, "compiled_sql": "-- depends-on: \"main\".\"main\".\"reg_season_summary\"\n\n\n\nSELECT\n    ratings.elo_rating || ' (' || CASE WHEN original_rating < elo_rating THEN '+' ELSE '' END || (elo_rating-original_rating)::int || ')' AS elo_rating,\n    R.*,\n    P.made_playoffs,\n    P.made_conf_semis,\n    P.made_conf_finals,\n    P.made_finals,\n    P.won_finals\nFROM \"main\".\"main\".\"reg_season_summary\" R\nLEFT JOIN \"main\".\"main\".\"playoff_summary\" P ON P.team = R.team\nLEFT JOIN \"main\".\"main\".\"ratings\" ratings ON ratings.team = R.team", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"season_summary\""}, "model.nba_monte_carlo.playoff_sim_r4": {"raw_sql": "{{\n    config(\n        materialized = \"view\" if target.name == 'parquet' else \"table\",\n        post_hook = \"COPY (SELECT * FROM {{ this }} ) TO '/tmp/data_catalog/conformed/{{ this.table }}.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\"\n            if target.name == 'parquet' else \" \"\n) }}\n\n-- depends-on: {{ ref( 'playoff_sim_r3' ) }}\n\nWITH cte_playoff_sim AS (\n    {{ playoff_sim('playoffs_r4','/tmp/data_catalog/conformed/playoff_sim_r3.parquet') if target.name == 'parquet'\n        else playoff_sim('playoffs_r4','playoff_sim_r3' )}}\n)\n\n{{ playoff_sim_end( 'cte_playoff_sim' ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.nba_monte_carlo.playoff_sim", "macro.nba_monte_carlo.playoff_sim_end"], "nodes": ["model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.xf_series_to_seed"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [{"sql": " ", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "playoff_sim_r4"], "unique_id": "model.nba_monte_carlo.playoff_sim_r4", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/playoffs/playoff_sim_r4.sql", "original_file_path": "models/conformed/playoffs/playoff_sim_r4.sql", "name": "playoff_sim_r4", "alias": "playoff_sim_r4", "checksum": {"name": "sha256", "checksum": "fda9f9d1c25493bc8169ff38543a102497c5cf9478922a2ed407c096b3794109"}, "tags": [], "refs": [["playoff_sim_r3"], ["random_num_gen"], ["schedules"], ["random_num_gen"], ["playoff_sim_r3"], ["playoff_sim_r3"], ["xf_series_to_seed"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/playoff_sim_r4.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "table", "post-hook": [" "]}, "created_at": 1666979178.684019, "compiled_sql": "\n\n-- depends-on: \"main\".\"main\".\"playoff_sim_r3\"\n\nWITH cte_playoff_sim AS (\n    \n-- depends-on: \"main\".\"main\".\"random_num_gen\"\n\nWITH cte_step_1 AS (\n    SELECT\n      R.scenario_id,\n      S.game_id,\n      S.series_id,\n      S.visiting_team AS visitor_key,\n      S.home_team AS home_key,\n      EV.winning_team AS visiting_team,\n      EV.elo_rating AS visiting_team_elo_rating,\n      EH.winning_team AS home_team,\n      EH.elo_rating AS home_team_elo_rating,\n      ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating )::real/400)+1))) * 10000 as home_team_win_probability,\n      R.rand_result,\n      CASE\n         WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating )::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n         ELSE EV.winning_team\n      END AS winning_team \n    FROM \"main\".\"main\".\"schedules\" S\n    \n    LEFT JOIN \"main\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN  \"main\".\"main\".\"playoff_sim_r3\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN  \"main\".\"main\".\"playoff_sim_r3\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n    \n    WHERE S.type =  'playoffs_r4' ),\ncte_step_2 AS (\n    SELECT step1.*,\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n    FROM cte_step_1 step1\n),\ncte_final_game AS (\n    SELECT scenario_id,\n        series_id,\n        game_id\n    FROM cte_step_2\n    WHERE series_result = 4\n)\nSELECT step2.* \nFROM cte_step_2 step2\n    INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n        AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\nORDER BY step2.scenario_id, \n    step2.series_id, \n    step2.game_id\n)\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed\n    FROM cte_playoff_sim E\nLEFT JOIN \"main\".\"main\".\"xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"playoff_sim_r4\""}, "model.nba_monte_carlo.playoff_sim_r1": {"raw_sql": "{{\n    config(\n        materialized = \"view\" if target.name == 'parquet' else \"table\",\n        post_hook = \"COPY (SELECT * FROM {{ this }} ) TO '/tmp/data_catalog/conformed/{{ this.table }}.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\"\n            if target.name == 'parquet' else \" \"\n) }}\n\n-- depends-on: {{ ref( 'initialize_seeding' ) }}\n\nWITH cte_playoff_sim AS (\n    {{ playoff_sim('playoffs_r1','/tmp/data_catalog/conformed/initialize_seeding.parquet') if target.name == 'parquet'\n        else playoff_sim('playoffs_r1','initialize_seeding' )}}\n)\n\n{{ playoff_sim_end( 'cte_playoff_sim' ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.nba_monte_carlo.playoff_sim", "macro.nba_monte_carlo.playoff_sim_end"], "nodes": ["model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.xf_series_to_seed"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [{"sql": " ", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "playoff_sim_r1"], "unique_id": "model.nba_monte_carlo.playoff_sim_r1", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/playoffs/playoff_sim_r1.sql", "original_file_path": "models/conformed/playoffs/playoff_sim_r1.sql", "name": "playoff_sim_r1", "alias": "playoff_sim_r1", "checksum": {"name": "sha256", "checksum": "eabe682de10d9f278de3c88f5a17c9572a2b38ab1c7ace9fd342a329a03dba6e"}, "tags": [], "refs": [["initialize_seeding"], ["random_num_gen"], ["schedules"], ["random_num_gen"], ["initialize_seeding"], ["initialize_seeding"], ["xf_series_to_seed"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/playoff_sim_r1.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "table", "post-hook": [" "]}, "created_at": 1666979178.7191083, "compiled_sql": "\n\n-- depends-on: \"main\".\"main\".\"initialize_seeding\"\n\nWITH cte_playoff_sim AS (\n    \n-- depends-on: \"main\".\"main\".\"random_num_gen\"\n\nWITH cte_step_1 AS (\n    SELECT\n      R.scenario_id,\n      S.game_id,\n      S.series_id,\n      S.visiting_team AS visitor_key,\n      S.home_team AS home_key,\n      EV.winning_team AS visiting_team,\n      EV.elo_rating AS visiting_team_elo_rating,\n      EH.winning_team AS home_team,\n      EH.elo_rating AS home_team_elo_rating,\n      ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating )::real/400)+1))) * 10000 as home_team_win_probability,\n      R.rand_result,\n      CASE\n         WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating )::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n         ELSE EV.winning_team\n      END AS winning_team \n    FROM \"main\".\"main\".\"schedules\" S\n    \n    LEFT JOIN \"main\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN  \"main\".\"main\".\"initialize_seeding\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN  \"main\".\"main\".\"initialize_seeding\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n    \n    WHERE S.type =  'playoffs_r1' ),\ncte_step_2 AS (\n    SELECT step1.*,\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n    FROM cte_step_1 step1\n),\ncte_final_game AS (\n    SELECT scenario_id,\n        series_id,\n        game_id\n    FROM cte_step_2\n    WHERE series_result = 4\n)\nSELECT step2.* \nFROM cte_step_2 step2\n    INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n        AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\nORDER BY step2.scenario_id, \n    step2.series_id, \n    step2.game_id\n)\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed\n    FROM cte_playoff_sim E\nLEFT JOIN \"main\".\"main\".\"xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"playoff_sim_r1\""}, "model.nba_monte_carlo.playoff_summary": {"raw_sql": "-- depends-on: {{ ref( 'initialize_seeding' ) }}\n-- depends-on: {{ ref( 'playoff_sim_r1' ) }}\n-- depends-on: {{ ref( 'playoff_sim_r2' ) }}\n-- depends-on: {{ ref( 'playoff_sim_r3' ) }}\n-- depends-on: {{ ref( 'playoff_sim_r4' ) }}\n\n{{\n    config(\n      materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nWITH cte_playoffs_r1 AS (\n    SELECT\n        winning_team,\n        COUNT(*) AS made_playoffs\n    FROM {{ \"'/tmp/data_catalog/conformed/initialize_seeding.parquet'\" if target.name == 'parquet'\n        else ref( 'initialize_seeding' ) }}\n    GROUP BY ALL\n),\n\ncte_playoffs_r2 AS (\n    SELECT\n        winning_team,\n        COUNT(*) AS made_conf_semis\n    FROM {{ \"'/tmp/data_catalog/conformed/playoff_sim_r1.parquet'\" if target.name == 'parquet'\n        else ref( 'playoff_sim_r1' ) }}\n    GROUP BY ALL\n),\n\ncte_playoffs_r3 AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS made_conf_finals\n    FROM {{ \"'/tmp/data_catalog/conformed/playoff_sim_r2.parquet'\" if target.name == 'parquet'\n        else ref( 'playoff_sim_r2' ) }}\n    GROUP BY ALL\n),\n\ncte_playoffs_r4 AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS made_finals\n    FROM {{ \"'/tmp/data_catalog/conformed/playoff_sim_r3.parquet'\" if target.name == 'parquet'\n        else ref( 'playoff_sim_r3' ) }}\n    GROUP BY ALL\n),\n\ncte_playoffs_finals AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS won_finals\n    FROM {{ \"'/tmp/data_catalog/conformed/playoff_sim_r4.parquet'\" if target.name == 'parquet'\n        else ref( 'playoff_sim_r4' ) }}\n    GROUP BY ALL\n)\n\nSELECT\n    T.team,\n    R1.made_playoffs,\n    R2.made_conf_semis,\n    R3.made_conf_finals,\n    R4.made_finals,\n    F.won_finals\nFROM {{ ref( 'teams' ) }} T\nLEFT JOIN cte_playoffs_r1 R1 ON R1.winning_team = T.team\nLEFT JOIN cte_playoffs_r2 R2 ON R2.winning_team = T.team\nLEFT JOIN cte_playoffs_r3 R3 ON R3.winning_team = T.team\nLEFT JOIN cte_playoffs_r4 R4 ON R4.winning_team = T.team\nLEFT JOIN cte_playoffs_finals F ON F.winning_team = T.team", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.teams"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "playoff_summary"], "unique_id": "model.nba_monte_carlo.playoff_summary", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/playoffs/playoff_summary.sql", "original_file_path": "models/conformed/playoffs/playoff_summary.sql", "name": "playoff_summary", "alias": "playoff_summary", "checksum": {"name": "sha256", "checksum": "d0755d38148b0efb260900c8176fbd3d9f42a5aa0521c35fa9419d87ed32d3a2"}, "tags": [], "refs": [["initialize_seeding"], ["playoff_sim_r1"], ["playoff_sim_r2"], ["playoff_sim_r3"], ["playoff_sim_r4"], ["initialize_seeding"], ["playoff_sim_r1"], ["playoff_sim_r2"], ["playoff_sim_r3"], ["playoff_sim_r4"], ["teams"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/playoff_summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979178.7489007, "compiled_sql": "-- depends-on: \"main\".\"main\".\"initialize_seeding\"\n-- depends-on: \"main\".\"main\".\"playoff_sim_r1\"\n-- depends-on: \"main\".\"main\".\"playoff_sim_r2\"\n-- depends-on: \"main\".\"main\".\"playoff_sim_r3\"\n-- depends-on: \"main\".\"main\".\"playoff_sim_r4\"\n\n\n\nWITH cte_playoffs_r1 AS (\n    SELECT\n        winning_team,\n        COUNT(*) AS made_playoffs\n    FROM \"main\".\"main\".\"initialize_seeding\"\n    GROUP BY ALL\n),\n\ncte_playoffs_r2 AS (\n    SELECT\n        winning_team,\n        COUNT(*) AS made_conf_semis\n    FROM \"main\".\"main\".\"playoff_sim_r1\"\n    GROUP BY ALL\n),\n\ncte_playoffs_r3 AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS made_conf_finals\n    FROM \"main\".\"main\".\"playoff_sim_r2\"\n    GROUP BY ALL\n),\n\ncte_playoffs_r4 AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS made_finals\n    FROM \"main\".\"main\".\"playoff_sim_r3\"\n    GROUP BY ALL\n),\n\ncte_playoffs_finals AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS won_finals\n    FROM \"main\".\"main\".\"playoff_sim_r4\"\n    GROUP BY ALL\n)\n\nSELECT\n    T.team,\n    R1.made_playoffs,\n    R2.made_conf_semis,\n    R3.made_conf_finals,\n    R4.made_finals,\n    F.won_finals\nFROM \"main\".\"main\".\"teams\" T\nLEFT JOIN cte_playoffs_r1 R1 ON R1.winning_team = T.team\nLEFT JOIN cte_playoffs_r2 R2 ON R2.winning_team = T.team\nLEFT JOIN cte_playoffs_r3 R3 ON R3.winning_team = T.team\nLEFT JOIN cte_playoffs_r4 R4 ON R4.winning_team = T.team\nLEFT JOIN cte_playoffs_finals F ON F.winning_team = T.team", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"playoff_summary\""}, "model.nba_monte_carlo.reg_season_end": {"raw_sql": "{{\n    config(\n        materialized = \"view\" if target.name == 'parquet' else \"table\",\n        post_hook = \"COPY (SELECT * FROM {{ this }} ) TO '/tmp/data_catalog/conformed/{{ this.table }}.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\"\n            if target.name == 'parquet' else \" \"\n) }}\n\nWITH cte_wins AS (\n    SELECT\n        S.scenario_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_conf\n            ELSE S.visiting_conf\n        END AS conf,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating,\n        COUNT(*) AS wins\n    FROM {{ ref( 'reg_season_simulator' ) }} S\n    GROUP BY ALL\n),\n\ncte_ranked_wins AS (\n    SELECT\n        *,\n        --no tiebreaker, so however row number handles order ties will need to be dealt with\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, conf ORDER BY wins DESC, winning_team DESC ) AS season_rank\n    FROM cte_wins\n\n),\n\ncte_made_playoffs AS (\n    SELECT\n        *,\n        CASE\n            WHEN season_rank <= 10 THEN 1\n            ELSE 0\n        END AS made_playoffs,\n        CASE\n            WHEN season_rank BETWEEN 7 AND 10 THEN 1\n            ELSE 0\n        END AS made_play_in,\n        conf || '-' || season_rank::text AS seed\n    FROM cte_ranked_wins\n)\n\nSELECT *\nFROM cte_made_playoffs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.reg_season_simulator"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [{"sql": " ", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "reg_season", "reg_season_end"], "unique_id": "model.nba_monte_carlo.reg_season_end", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/reg_season/reg_season_end.sql", "original_file_path": "models/conformed/reg_season/reg_season_end.sql", "name": "reg_season_end", "alias": "reg_season_end", "checksum": {"name": "sha256", "checksum": "93889f976049699be41016c1e574970779ef57bb13803cbe5a97e85eb283429a"}, "tags": [], "refs": [["reg_season_simulator"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/reg_season/reg_season_end.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "table", "post-hook": [" "]}, "created_at": 1666979178.7771761, "compiled_sql": "\n\nWITH cte_wins AS (\n    SELECT\n        S.scenario_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_conf\n            ELSE S.visiting_conf\n        END AS conf,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating,\n        COUNT(*) AS wins\n    FROM \"main\".\"main\".\"reg_season_simulator\" S\n    GROUP BY ALL\n),\n\ncte_ranked_wins AS (\n    SELECT\n        *,\n        --no tiebreaker, so however row number handles order ties will need to be dealt with\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, conf ORDER BY wins DESC, winning_team DESC ) AS season_rank\n    FROM cte_wins\n\n),\n\ncte_made_playoffs AS (\n    SELECT\n        *,\n        CASE\n            WHEN season_rank <= 10 THEN 1\n            ELSE 0\n        END AS made_playoffs,\n        CASE\n            WHEN season_rank BETWEEN 7 AND 10 THEN 1\n            ELSE 0\n        END AS made_play_in,\n        conf || '-' || season_rank::text AS seed\n    FROM cte_ranked_wins\n)\n\nSELECT *\nFROM cte_made_playoffs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"reg_season_end\""}, "model.nba_monte_carlo.reg_season_simulator": {"raw_sql": "-- depends-on: {{ ref( 'random_num_gen' ) }}\n\n{{\n    config(\n      materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT \n    R.scenario_id,\n    S.*,\n    {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating' ) }} as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN LR.include_actuals = true THEN LR.winning_team\n        WHEN {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating' ) }}  >= R.rand_result THEN S.home_team\n        ELSE S.visiting_team\n    END AS winning_team,\n    COALESCE(LR.include_actuals, false) AS include_actuals\nFROM {{ ref( 'schedules' ) }} S\nLEFT JOIN {{ \"'/tmp/data_catalog/conformed/random_num_gen.parquet'\" if target.name == 'parquet'\n        else ref( 'random_num_gen' ) }} R ON R.game_id = S.game_id\nLEFT JOIN {{ ref( 'latest_results' ) }} LR ON LR.game_id = S.game_id\nWHERE S.type = 'reg_season'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.nba_monte_carlo.elo_calc"], "nodes": ["model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.latest_results"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "reg_season", "reg_season_simulator"], "unique_id": "model.nba_monte_carlo.reg_season_simulator", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/reg_season/reg_season_simulator.sql", "original_file_path": "models/conformed/reg_season/reg_season_simulator.sql", "name": "reg_season_simulator", "alias": "reg_season_simulator", "checksum": {"name": "sha256", "checksum": "5cce69d40a04b7fc849321250420d3cc732a41ecc6aa010e3c5e2c6eefb5d4df"}, "tags": [], "refs": [["random_num_gen"], ["schedules"], ["random_num_gen"], ["latest_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/reg_season/reg_season_simulator.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979178.7973056, "compiled_sql": "-- depends-on: \"main\".\"main\".\"random_num_gen\"\n\n\n\nSELECT \n    R.scenario_id,\n    S.*,\n    ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating )::real/400)+1))) * 10000 as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN LR.include_actuals = true THEN LR.winning_team\n        WHEN ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating )::real/400)+1))) * 10000  >= R.rand_result THEN S.home_team\n        ELSE S.visiting_team\n    END AS winning_team,\n    COALESCE(LR.include_actuals, false) AS include_actuals\nFROM \"main\".\"main\".\"schedules\" S\nLEFT JOIN \"main\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\nLEFT JOIN \"main\".\"main\".\"latest_results\" LR ON LR.game_id = S.game_id\nWHERE S.type = 'reg_season'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"reg_season_simulator\""}, "model.nba_monte_carlo.reg_season_summary": {"raw_sql": "-- depends-on: {{ ref( 'reg_season_end' ) }}\n\n{{\n    config(\n        materialized = \"view\" if target.name == 'parquet' else \"table\",\n        post_hook = \"COPY (SELECT * FROM {{ this }} ) TO '/tmp/data_catalog/conformed/{{ this.table }}.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\"\n            if target.name == 'parquet' else \" \"\n) }}\n\n    WITH cte_summary AS (\n    SELECT\n        winning_team AS team,\n        E.conf,\n        ROUND(AVG(wins),1) AS avg_wins,\n        V.win_total AS vegas_wins,\n        ROUND(AVG(V.win_total) - AVG(wins), 1) AS elo_vs_vegas,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_5th,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_95th,\n        COUNT(*) FILTER (WHERE made_playoffs = 1 AND made_play_in = 0) AS made_postseason,\n        COUNT(*) FILTER (WHERE made_play_in = 1) AS made_play_in,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_5th,\n        ROUND(AVG(season_rank), 1) AS avg_seed,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_95th\n    FROM {{ \"'/tmp/data_catalog/conformed/reg_season_end.parquet'\" if target.name == 'parquet'\n            else ref( 'reg_season_end' ) }} E\n    LEFT JOIN {{ ref( 'vegas_wins' ) }} V ON V.team = E.winning_team\n    GROUP BY ALL\n    )\n\nSELECT \n    C.team,\n    C.conf,\n    A.wins || ' - ' || A.losses AS record,\n    C.avg_wins,\n    C.vegas_wins,\n    c.elo_vs_vegas,\n    C.wins_5th || ' to ' || C.wins_95th AS win_range,\n    C.seed_5th || ' to ' || C.seed_95th AS seed_range,\n    c.made_postseason,\n    c.made_play_in\nFROM cte_summary C\nLEFT JOIN {{ ref( 'reg_season_actuals' ) }} A ON A.team = C.team", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.vegas_wins", "model.nba_monte_carlo.reg_season_actuals"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [{"sql": " ", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "reg_season", "reg_season_summary"], "unique_id": "model.nba_monte_carlo.reg_season_summary", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/reg_season/reg_season_summary.sql", "original_file_path": "models/conformed/reg_season/reg_season_summary.sql", "name": "reg_season_summary", "alias": "reg_season_summary", "checksum": {"name": "sha256", "checksum": "b0b3949b776de3fbd28d6f3c22fe07bc90dcb2be1a6ccf0b6d645679a1659f33"}, "tags": [], "refs": [["reg_season_end"], ["reg_season_end"], ["vegas_wins"], ["reg_season_actuals"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/reg_season/reg_season_summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "table", "post-hook": [" "]}, "created_at": 1666979178.821227, "compiled_sql": "-- depends-on: \"main\".\"main\".\"reg_season_end\"\n\n\n\n    WITH cte_summary AS (\n    SELECT\n        winning_team AS team,\n        E.conf,\n        ROUND(AVG(wins),1) AS avg_wins,\n        V.win_total AS vegas_wins,\n        ROUND(AVG(V.win_total) - AVG(wins), 1) AS elo_vs_vegas,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_5th,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_95th,\n        COUNT(*) FILTER (WHERE made_playoffs = 1 AND made_play_in = 0) AS made_postseason,\n        COUNT(*) FILTER (WHERE made_play_in = 1) AS made_play_in,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_5th,\n        ROUND(AVG(season_rank), 1) AS avg_seed,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_95th\n    FROM \"main\".\"main\".\"reg_season_end\" E\n    LEFT JOIN \"main\".\"main\".\"vegas_wins\" V ON V.team = E.winning_team\n    GROUP BY ALL\n    )\n\nSELECT \n    C.team,\n    C.conf,\n    A.wins || ' - ' || A.losses AS record,\n    C.avg_wins,\n    C.vegas_wins,\n    c.elo_vs_vegas,\n    C.wins_5th || ' to ' || C.wins_95th AS win_range,\n    C.seed_5th || ' to ' || C.seed_95th AS seed_range,\n    c.made_postseason,\n    c.made_play_in\nFROM cte_summary C\nLEFT JOIN \"main\".\"main\".\"reg_season_actuals\" A ON A.team = C.team", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"reg_season_summary\""}, "model.nba_monte_carlo.reg_season_actuals": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nWITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'latest_results' ) }}\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'latest_results' ) }}\n    GROUP BY ALL\n)\n\nSELECT\n    T.team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses\nFROM {{ ref( 'teams' ) }} T\nLEFT JOIN cte_wins W ON W.winning_team = T.team\nLEFT JOIN cte_losses L ON L.losing_team = T.Team", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.teams"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "conformed", "reg_season", "reg_season_actuals"], "unique_id": "model.nba_monte_carlo.reg_season_actuals", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "conformed/reg_season/reg_season_actuals.sql", "original_file_path": "models/conformed/reg_season/reg_season_actuals.sql", "name": "reg_season_actuals", "alias": "reg_season_actuals", "checksum": {"name": "sha256", "checksum": "4da639dcf22f863c589ecdaf2c8d2a27f1197748d65974db1b697f41eed1d30a"}, "tags": [], "refs": [["latest_results"], ["latest_results"], ["teams"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/reg_season/reg_season_actuals.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979178.8474636, "compiled_sql": "\n\nWITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM \"main\".\"main\".\"latest_results\"\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM \"main\".\"main\".\"latest_results\"\n    GROUP BY ALL\n)\n\nSELECT\n    T.team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses\nFROM \"main\".\"main\".\"teams\" T\nLEFT JOIN cte_wins W ON W.winning_team = T.team\nLEFT JOIN cte_losses L ON L.losing_team = T.Team", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"reg_season_actuals\""}, "model.nba_monte_carlo.prep_nba_elo_latest": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT *\nFROM {{ ref( 'raw_nba_elo_latest' ) }}\nGROUP BY ALL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.raw_nba_elo_latest"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "prep", "prep_nba_elo_latest"], "unique_id": "model.nba_monte_carlo.prep_nba_elo_latest", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "prep/prep_nba_elo_latest.sql", "original_file_path": "models/prep/prep_nba_elo_latest.sql", "name": "prep_nba_elo_latest", "alias": "prep_nba_elo_latest", "checksum": {"name": "sha256", "checksum": "a1b4ae9eb299d2c97052773cd38b2bd93e3ddaa8fd684703f22d6521281db084"}, "tags": [], "refs": [["raw_nba_elo_latest"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_nba_elo_latest.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1119716, "compiled_sql": "\n\nSELECT *\nFROM \"main\".\"main\".\"raw_nba_elo_latest\"\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"prep_nba_elo_latest\""}, "model.nba_monte_carlo.prep_xf_series_to_seed": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT *\nFROM {{ ref( 'raw_xf_series_to_seed' ) }}\nGROUP BY ALL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.raw_xf_series_to_seed"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "prep", "prep_xf_series_to_seed"], "unique_id": "model.nba_monte_carlo.prep_xf_series_to_seed", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "prep/prep_xf_series_to_seed.sql", "original_file_path": "models/prep/prep_xf_series_to_seed.sql", "name": "prep_xf_series_to_seed", "alias": "prep_xf_series_to_seed", "checksum": {"name": "sha256", "checksum": "88a68e3363db2d55796161a4828c347e0861bdc0ad829fe5df18714af5d899da"}, "tags": [], "refs": [["raw_xf_series_to_seed"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_xf_series_to_seed.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1179886, "compiled_sql": "\n\nSELECT *\nFROM \"main\".\"main\".\"raw_xf_series_to_seed\"\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"prep_xf_series_to_seed\""}, "model.nba_monte_carlo.prep_latest_ratings": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nWITH cte_team1 AS (\n    SELECT\n        date,\n        team1,\n        elo1_post\n    FROM {{ ref( 'prep_nba_elo_latest' ) }}\n    WHERE elo1_post IS NOT NULL\n),\n\ncte_team2 AS (\n    SELECT\n        date,\n        team2,\n        elo2_post\n    FROM {{ ref( 'prep_nba_elo_latest' ) }}\n    WHERE elo1_post IS NOT NULL\n),\n\ncte_combined AS (\n    SELECT * FROM cte_team1\n    UNION ALL\n    SELECT * from cte_team2\n),\n\ncte_days_ranked AS (\n    SELECT \n        *,\n        ROW_NUMBER() OVER (PARTITION BY team1 ORDER BY date DESC) AS rating_id\n    FROM cte_combined\n)\n\nSELECT\n    team1 AS team,\n    elo1_post AS elo_rating,\n    {{ var('latest_ratings') }} AS latest_ratings\nFROM cte_days_ranked\nWHERE rating_id = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_nba_elo_latest", "model.nba_monte_carlo.prep_nba_elo_latest"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "prep", "prep_latest_ratings"], "unique_id": "model.nba_monte_carlo.prep_latest_ratings", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "prep/prep_latest_ratings.sql", "original_file_path": "models/prep/prep_latest_ratings.sql", "name": "prep_latest_ratings", "alias": "prep_latest_ratings", "checksum": {"name": "sha256", "checksum": "959825604e4f9f5a3bf6fba31c08e4b0a427ff3d4c72558a4944d8cfeb696152"}, "tags": [], "refs": [["prep_nba_elo_latest"], ["prep_nba_elo_latest"]], "sources": [], "metrics": [], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_latest_ratings.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1225107, "compiled_sql": "\n\nWITH cte_team1 AS (\n    SELECT\n        date,\n        team1,\n        elo1_post\n    FROM \"main\".\"main\".\"prep_nba_elo_latest\"\n    WHERE elo1_post IS NOT NULL\n),\n\ncte_team2 AS (\n    SELECT\n        date,\n        team2,\n        elo2_post\n    FROM \"main\".\"main\".\"prep_nba_elo_latest\"\n    WHERE elo1_post IS NOT NULL\n),\n\ncte_combined AS (\n    SELECT * FROM cte_team1\n    UNION ALL\n    SELECT * from cte_team2\n),\n\ncte_days_ranked AS (\n    SELECT \n        *,\n        ROW_NUMBER() OVER (PARTITION BY team1 ORDER BY date DESC) AS rating_id\n    FROM cte_combined\n)\n\nSELECT\n    team1 AS team,\n    elo1_post AS elo_rating,\n    True AS latest_ratings\nFROM cte_days_ranked\nWHERE rating_id = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"prep_latest_ratings\""}, "model.nba_monte_carlo.prep_team_ratings": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT *\nFROM {{ ref( 'raw_team_ratings' ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.raw_team_ratings"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "prep", "prep_team_ratings"], "unique_id": "model.nba_monte_carlo.prep_team_ratings", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "prep/prep_team_ratings.sql", "original_file_path": "models/prep/prep_team_ratings.sql", "name": "prep_team_ratings", "alias": "prep_team_ratings", "checksum": {"name": "sha256", "checksum": "246d5f0071c1a53d6ec5ce299940e96ae0e0e94f085ad17b3091151e4f6418cb"}, "tags": [], "refs": [["raw_team_ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_team_ratings.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.1159053, "compiled_sql": "\n\nSELECT *\nFROM \"main\".\"main\".\"raw_team_ratings\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"prep_team_ratings\""}, "model.nba_monte_carlo.prep_schedule": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT *\nFROM {{ ref( 'raw_schedule' ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.raw_schedule"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "prep", "prep_schedule"], "unique_id": "model.nba_monte_carlo.prep_schedule", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "prep/prep_schedule.sql", "original_file_path": "models/prep/prep_schedule.sql", "name": "prep_schedule", "alias": "prep_schedule", "checksum": {"name": "sha256", "checksum": "bc1032e2759a53ff085a37299adcdde29cdc24b001718d3b132c8c3383ba78d0"}, "tags": [], "refs": [["raw_schedule"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "nba_monte_carlo://models/_docs.yml", "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_schedule.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1666979179.114284, "compiled_sql": "\n\nSELECT *\nFROM \"main\".\"main\".\"raw_schedule\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"prep_schedule\""}, "test.nba_monte_carlo.empty_table_prep_nba_elo_latest_.2f897d3ab6": {"raw_sql": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('prep_nba_elo_latest')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.prep_nba_elo_latest"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "empty_table_prep_nba_elo_latest_"], "unique_id": "test.nba_monte_carlo.empty_table_prep_nba_elo_latest_.2f897d3ab6", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "empty_table_prep_nba_elo_latest_.sql", "original_file_path": "models/_docs.yml", "name": "empty_table_prep_nba_elo_latest_", "alias": "empty_table_prep_nba_elo_latest_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["prep_nba_elo_latest"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_prep_nba_elo_latest_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.2185616, "compiled_sql": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"main\".\"main\".\"prep_nba_elo_latest\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.prep_nba_elo_latest"}, "test.nba_monte_carlo.empty_table_prep_schedule_.67a48d6ecc": {"raw_sql": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('prep_schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.prep_schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "empty_table_prep_schedule_"], "unique_id": "test.nba_monte_carlo.empty_table_prep_schedule_.67a48d6ecc", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "empty_table_prep_schedule_.sql", "original_file_path": "models/_docs.yml", "name": "empty_table_prep_schedule_", "alias": "empty_table_prep_schedule_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["prep_schedule"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_prep_schedule_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.248012, "compiled_sql": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"main\".\"main\".\"prep_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.prep_schedule"}, "test.nba_monte_carlo.empty_table_prep_team_ratings_.820075bbe2": {"raw_sql": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('prep_team_ratings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.prep_team_ratings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "empty_table_prep_team_ratings_"], "unique_id": "test.nba_monte_carlo.empty_table_prep_team_ratings_.820075bbe2", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "empty_table_prep_team_ratings_.sql", "original_file_path": "models/_docs.yml", "name": "empty_table_prep_team_ratings_", "alias": "empty_table_prep_team_ratings_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["prep_team_ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_prep_team_ratings_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.2612078, "compiled_sql": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"main\".\"main\".\"prep_team_ratings\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.prep_team_ratings"}, "test.nba_monte_carlo.empty_table_prep_xf_series_to_seed_.aa86cc61a5": {"raw_sql": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('prep_xf_series_to_seed')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.prep_xf_series_to_seed"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "empty_table_prep_xf_series_to_seed_"], "unique_id": "test.nba_monte_carlo.empty_table_prep_xf_series_to_seed_.aa86cc61a5", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "empty_table_prep_xf_series_to_seed_.sql", "original_file_path": "models/_docs.yml", "name": "empty_table_prep_xf_series_to_seed_", "alias": "empty_table_prep_xf_series_to_seed_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["prep_xf_series_to_seed"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_prep_xf_series_to_seed_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.2764893, "compiled_sql": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"main\".\"main\".\"prep_xf_series_to_seed\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.prep_xf_series_to_seed"}, "test.nba_monte_carlo.unique_prep_latest_ratings_team.fe3e9499ca": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('prep_latest_ratings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.prep_latest_ratings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "unique_prep_latest_ratings_team"], "unique_id": "test.nba_monte_carlo.unique_prep_latest_ratings_team.fe3e9499ca", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "unique_prep_latest_ratings_team.sql", "original_file_path": "models/_docs.yml", "name": "unique_prep_latest_ratings_team", "alias": "unique_prep_latest_ratings_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["prep_latest_ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_prep_latest_ratings_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.2893696, "compiled_sql": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"main\".\"main\".\"prep_latest_ratings\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team", "file_key_name": "models.prep_latest_ratings"}, "test.nba_monte_carlo.empty_table_prep_latest_ratings_.d193308c15": {"raw_sql": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('prep_latest_ratings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.prep_latest_ratings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "empty_table_prep_latest_ratings_"], "unique_id": "test.nba_monte_carlo.empty_table_prep_latest_ratings_.d193308c15", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "empty_table_prep_latest_ratings_.sql", "original_file_path": "models/_docs.yml", "name": "empty_table_prep_latest_ratings_", "alias": "empty_table_prep_latest_ratings_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["prep_latest_ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_prep_latest_ratings_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.2962928, "compiled_sql": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"main\".\"main\".\"prep_latest_ratings\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.prep_latest_ratings"}, "test.nba_monte_carlo.unique_latest_results_game_id.1c98eeb270": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "unique_latest_results_game_id"], "unique_id": "test.nba_monte_carlo.unique_latest_results_game_id.1c98eeb270", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "unique_latest_results_game_id.sql", "original_file_path": "models/_docs.yml", "name": "unique_latest_results_game_id", "alias": "unique_latest_results_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["latest_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_latest_results_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.3106613, "compiled_sql": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"main\".\"main\".\"latest_results\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_game_id.a68ef0c628": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_latest_results_game_id"], "unique_id": "test.nba_monte_carlo.not_null_latest_results_game_id.a68ef0c628", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_latest_results_game_id.sql", "original_file_path": "models/_docs.yml", "name": "not_null_latest_results_game_id", "alias": "not_null_latest_results_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["latest_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.3211992, "compiled_sql": "\n    \n    \n\n\n\nselect game_id\nfrom \"main\".\"main\".\"latest_results\"\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_home_team.1a7c351704": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_latest_results_home_team"], "unique_id": "test.nba_monte_carlo.not_null_latest_results_home_team.1a7c351704", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_latest_results_home_team.sql", "original_file_path": "models/_docs.yml", "name": "not_null_latest_results_home_team", "alias": "not_null_latest_results_home_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["latest_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_home_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.327426, "compiled_sql": "\n    \n    \n\n\n\nselect home_team\nfrom \"main\".\"main\".\"latest_results\"\nwhere home_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "home_team", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_home_team_score.8462ec4790": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_score", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_latest_results_home_team_score"], "unique_id": "test.nba_monte_carlo.not_null_latest_results_home_team_score.8462ec4790", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_latest_results_home_team_score.sql", "original_file_path": "models/_docs.yml", "name": "not_null_latest_results_home_team_score", "alias": "not_null_latest_results_home_team_score", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["latest_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_home_team_score.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.33369, "compiled_sql": "\n    \n    \n\n\n\nselect home_team_score\nfrom \"main\".\"main\".\"latest_results\"\nwhere home_team_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "home_team_score", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_visiting_team.cba6550a1c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_latest_results_visiting_team"], "unique_id": "test.nba_monte_carlo.not_null_latest_results_visiting_team.cba6550a1c", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_latest_results_visiting_team.sql", "original_file_path": "models/_docs.yml", "name": "not_null_latest_results_visiting_team", "alias": "not_null_latest_results_visiting_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["latest_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_visiting_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.3423607, "compiled_sql": "\n    \n    \n\n\n\nselect visiting_team\nfrom \"main\".\"main\".\"latest_results\"\nwhere visiting_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "visiting_team", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_visiting_team_score.922086a03c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team_score", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_latest_results_visiting_team_score"], "unique_id": "test.nba_monte_carlo.not_null_latest_results_visiting_team_score.922086a03c", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_latest_results_visiting_team_score.sql", "original_file_path": "models/_docs.yml", "name": "not_null_latest_results_visiting_team_score", "alias": "not_null_latest_results_visiting_team_score", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["latest_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_visiting_team_score.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.349568, "compiled_sql": "\n    \n    \n\n\n\nselect visiting_team_score\nfrom \"main\".\"main\".\"latest_results\"\nwhere visiting_team_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "visiting_team_score", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_date.76604cb0af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_latest_results_date"], "unique_id": "test.nba_monte_carlo.not_null_latest_results_date.76604cb0af", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_latest_results_date.sql", "original_file_path": "models/_docs.yml", "name": "not_null_latest_results_date", "alias": "not_null_latest_results_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["latest_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.3572843, "compiled_sql": "\n    \n    \n\n\n\nselect date\nfrom \"main\".\"main\".\"latest_results\"\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_winning_team.31606125c5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "winning_team", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_latest_results_winning_team"], "unique_id": "test.nba_monte_carlo.not_null_latest_results_winning_team.31606125c5", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_latest_results_winning_team.sql", "original_file_path": "models/_docs.yml", "name": "not_null_latest_results_winning_team", "alias": "not_null_latest_results_winning_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["latest_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_winning_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.3639634, "compiled_sql": "\n    \n    \n\n\n\nselect winning_team\nfrom \"main\".\"main\".\"latest_results\"\nwhere winning_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "winning_team", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_losing_team.63391801ce": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "losing_team", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_latest_results_losing_team"], "unique_id": "test.nba_monte_carlo.not_null_latest_results_losing_team.63391801ce", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_latest_results_losing_team.sql", "original_file_path": "models/_docs.yml", "name": "not_null_latest_results_losing_team", "alias": "not_null_latest_results_losing_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["latest_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_losing_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.3731368, "compiled_sql": "\n    \n    \n\n\n\nselect losing_team\nfrom \"main\".\"main\".\"latest_results\"\nwhere losing_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "losing_team", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.unique_schedules_game_id.891eaf0b48": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('schedules')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.schedules"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "unique_schedules_game_id"], "unique_id": "test.nba_monte_carlo.unique_schedules_game_id.891eaf0b48", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "unique_schedules_game_id.sql", "original_file_path": "models/_docs.yml", "name": "unique_schedules_game_id", "alias": "unique_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["schedules"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_schedules_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.3803945, "compiled_sql": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"main\".\"main\".\"schedules\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.schedules"}, "test.nba_monte_carlo.not_null_schedules_game_id.b5537eedb7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('schedules')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.schedules"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_schedules_game_id"], "unique_id": "test.nba_monte_carlo.not_null_schedules_game_id.b5537eedb7", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_schedules_game_id.sql", "original_file_path": "models/_docs.yml", "name": "not_null_schedules_game_id", "alias": "not_null_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["schedules"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_schedules_game_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.3889203, "compiled_sql": "\n    \n    \n\n\n\nselect game_id\nfrom \"main\".\"main\".\"schedules\"\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "game_id", "file_key_name": "models.schedules"}, "test.nba_monte_carlo.accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a9150d38ba": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["reg_season", "playin_r1", "playin_r2", "playoffs_r1", "playoffs_r2", "playoffs_r3", "playoffs_r4"], "column_name": "type", "model": "{{ get_where_subquery(ref('schedules')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.schedules"]}, "config": {"enabled": true, "alias": "accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4"], "unique_id": "test.nba_monte_carlo.accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a9150d38ba", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2.sql", "original_file_path": "models/_docs.yml", "name": "accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4", "alias": "accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["schedules"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2"}, "created_at": 1666979179.3962443, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        type as value_field,\n        count(*) as n_records\n\n    from \"main\".\"main\".\"schedules\"\n    group by type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'reg_season','playin_r1','playin_r2','playoffs_r1','playoffs_r2','playoffs_r3','playoffs_r4'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "type", "file_key_name": "models.schedules"}, "test.nba_monte_carlo.not_null_schedules_visiting_team.fe363c0b70": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('schedules')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.schedules"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_schedules_visiting_team"], "unique_id": "test.nba_monte_carlo.not_null_schedules_visiting_team.fe363c0b70", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_schedules_visiting_team.sql", "original_file_path": "models/_docs.yml", "name": "not_null_schedules_visiting_team", "alias": "not_null_schedules_visiting_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["schedules"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_schedules_visiting_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.4251266, "compiled_sql": "\n    \n    \n\n\n\nselect visiting_team\nfrom \"main\".\"main\".\"schedules\"\nwhere visiting_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "visiting_team", "file_key_name": "models.schedules"}, "test.nba_monte_carlo.not_null_schedules_home_team.3e630337e9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('schedules')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.schedules"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_schedules_home_team"], "unique_id": "test.nba_monte_carlo.not_null_schedules_home_team.3e630337e9", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_schedules_home_team.sql", "original_file_path": "models/_docs.yml", "name": "not_null_schedules_home_team", "alias": "not_null_schedules_home_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["schedules"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_schedules_home_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.4308395, "compiled_sql": "\n    \n    \n\n\n\nselect home_team\nfrom \"main\".\"main\".\"schedules\"\nwhere home_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "home_team", "file_key_name": "models.schedules"}, "test.nba_monte_carlo.not_null_ratings_team.b4f3c4c6c4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.ratings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_ratings_team"], "unique_id": "test.nba_monte_carlo.not_null_ratings_team.b4f3c4c6c4", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_ratings_team.sql", "original_file_path": "models/_docs.yml", "name": "not_null_ratings_team", "alias": "not_null_ratings_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_ratings_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.437941, "compiled_sql": "\n    \n    \n\n\n\nselect team\nfrom \"main\".\"main\".\"ratings\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.unique_ratings_team.1bd609a155": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.ratings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "unique_ratings_team"], "unique_id": "test.nba_monte_carlo.unique_ratings_team.1bd609a155", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "unique_ratings_team.sql", "original_file_path": "models/_docs.yml", "name": "unique_ratings_team", "alias": "unique_ratings_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_ratings_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.444412, "compiled_sql": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"main\".\"main\".\"ratings\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.not_null_ratings_team_long.7e95b25d06": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.ratings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_ratings_team_long"], "unique_id": "test.nba_monte_carlo.not_null_ratings_team_long.7e95b25d06", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_ratings_team_long.sql", "original_file_path": "models/_docs.yml", "name": "not_null_ratings_team_long", "alias": "not_null_ratings_team_long", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_ratings_team_long.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.4497025, "compiled_sql": "\n    \n    \n\n\n\nselect team_long\nfrom \"main\".\"main\".\"ratings\"\nwhere team_long is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_long", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.unique_ratings_team_long.d5886b2f22": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.ratings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "unique_ratings_team_long"], "unique_id": "test.nba_monte_carlo.unique_ratings_team_long.d5886b2f22", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "unique_ratings_team_long.sql", "original_file_path": "models/_docs.yml", "name": "unique_ratings_team_long", "alias": "unique_ratings_team_long", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_ratings_team_long.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.4548273, "compiled_sql": "\n    \n    \n\nselect\n    team_long as unique_field,\n    count(*) as n_records\n\nfrom \"main\".\"main\".\"ratings\"\nwhere team_long is not null\ngroup by team_long\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_long", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.not_null_ratings_conf.aefb460047": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "conf", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.ratings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_ratings_conf"], "unique_id": "test.nba_monte_carlo.not_null_ratings_conf.aefb460047", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_ratings_conf.sql", "original_file_path": "models/_docs.yml", "name": "not_null_ratings_conf", "alias": "not_null_ratings_conf", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_ratings_conf.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.4601316, "compiled_sql": "\n    \n    \n\n\n\nselect conf\nfrom \"main\".\"main\".\"ratings\"\nwhere conf is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conf", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.accepted_values_ratings_conf__East__West.20846f9fa3": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["East", "West"], "column_name": "conf", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.ratings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "accepted_values_ratings_conf__East__West"], "unique_id": "test.nba_monte_carlo.accepted_values_ratings_conf__East__West.20846f9fa3", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "accepted_values_ratings_conf__East__West.sql", "original_file_path": "models/_docs.yml", "name": "accepted_values_ratings_conf__East__West", "alias": "accepted_values_ratings_conf__East__West", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/accepted_values_ratings_conf__East__West.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.4657135, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        conf as value_field,\n        count(*) as n_records\n\n    from \"main\".\"main\".\"ratings\"\n    group by conf\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'East','West'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conf", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.not_null_ratings_elo_rating.0e2f6eaa14": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "elo_rating", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.ratings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_ratings_elo_rating"], "unique_id": "test.nba_monte_carlo.not_null_ratings_elo_rating.0e2f6eaa14", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_ratings_elo_rating.sql", "original_file_path": "models/_docs.yml", "name": "not_null_ratings_elo_rating", "alias": "not_null_ratings_elo_rating", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ratings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_ratings_elo_rating.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.4791262, "compiled_sql": "\n    \n    \n\n\n\nselect elo_rating\nfrom \"main\".\"main\".\"ratings\"\nwhere elo_rating is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "elo_rating", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.empty_table_post_season_schedule_.ea8961d3e8": {"raw_sql": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('post_season_schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.post_season_schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "empty_table_post_season_schedule_"], "unique_id": "test.nba_monte_carlo.empty_table_post_season_schedule_.ea8961d3e8", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "empty_table_post_season_schedule_.sql", "original_file_path": "models/_docs.yml", "name": "empty_table_post_season_schedule_", "alias": "empty_table_post_season_schedule_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["post_season_schedule"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_post_season_schedule_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.4849322, "compiled_sql": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"main\".\"main\".\"post_season_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.post_season_schedule"}, "test.nba_monte_carlo.empty_table_reg_season_schedule_.1d11e42bef": {"raw_sql": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('reg_season_schedule')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.reg_season_schedule"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "empty_table_reg_season_schedule_"], "unique_id": "test.nba_monte_carlo.empty_table_reg_season_schedule_.1d11e42bef", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "empty_table_reg_season_schedule_.sql", "original_file_path": "models/_docs.yml", "name": "empty_table_reg_season_schedule_", "alias": "empty_table_reg_season_schedule_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["reg_season_schedule"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_reg_season_schedule_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.4968448, "compiled_sql": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"main\".\"main\".\"reg_season_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.reg_season_schedule"}, "test.nba_monte_carlo.empty_table_random_num_gen_.5dd5ce0313": {"raw_sql": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('random_num_gen')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.random_num_gen"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "empty_table_random_num_gen_"], "unique_id": "test.nba_monte_carlo.empty_table_random_num_gen_.5dd5ce0313", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "empty_table_random_num_gen_.sql", "original_file_path": "models/_docs.yml", "name": "empty_table_random_num_gen_", "alias": "empty_table_random_num_gen_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["random_num_gen"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_random_num_gen_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.5098565, "compiled_sql": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"main\".\"main\".\"random_num_gen\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.random_num_gen"}, "test.nba_monte_carlo.empty_table_scenario_gen_.109ff538b2": {"raw_sql": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('scenario_gen')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.scenario_gen"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "empty_table_scenario_gen_"], "unique_id": "test.nba_monte_carlo.empty_table_scenario_gen_.109ff538b2", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "empty_table_scenario_gen_.sql", "original_file_path": "models/_docs.yml", "name": "empty_table_scenario_gen_", "alias": "empty_table_scenario_gen_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["scenario_gen"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_scenario_gen_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.522959, "compiled_sql": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"main\".\"main\".\"scenario_gen\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.scenario_gen"}, "test.nba_monte_carlo.unique_teams_team_long.0d8a0ecdef": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "unique_teams_team_long"], "unique_id": "test.nba_monte_carlo.unique_teams_team_long.0d8a0ecdef", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "unique_teams_team_long.sql", "original_file_path": "models/_docs.yml", "name": "unique_teams_team_long", "alias": "unique_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["teams"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_teams_team_long.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.5347457, "compiled_sql": "\n    \n    \n\nselect\n    team_long as unique_field,\n    count(*) as n_records\n\nfrom \"main\".\"main\".\"teams\"\nwhere team_long is not null\ngroup by team_long\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_long", "file_key_name": "models.teams"}, "test.nba_monte_carlo.not_null_teams_team_long.b38b6aa9e8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_teams_team_long"], "unique_id": "test.nba_monte_carlo.not_null_teams_team_long.b38b6aa9e8", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_teams_team_long.sql", "original_file_path": "models/_docs.yml", "name": "not_null_teams_team_long", "alias": "not_null_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["teams"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_teams_team_long.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.540981, "compiled_sql": "\n    \n    \n\n\n\nselect team_long\nfrom \"main\".\"main\".\"teams\"\nwhere team_long is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_long", "file_key_name": "models.teams"}, "test.nba_monte_carlo.unique_teams_team.a268dab99d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "unique_teams_team"], "unique_id": "test.nba_monte_carlo.unique_teams_team.a268dab99d", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "unique_teams_team.sql", "original_file_path": "models/_docs.yml", "name": "unique_teams_team", "alias": "unique_teams_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["teams"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_teams_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.5482354, "compiled_sql": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"main\".\"main\".\"teams\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team", "file_key_name": "models.teams"}, "test.nba_monte_carlo.not_null_teams_team.b7e6b73c9b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('teams')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.teams"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_teams_team"], "unique_id": "test.nba_monte_carlo.not_null_teams_team.b7e6b73c9b", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_teams_team.sql", "original_file_path": "models/_docs.yml", "name": "not_null_teams_team", "alias": "not_null_teams_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["teams"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_teams_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.5555847, "compiled_sql": "\n    \n    \n\n\n\nselect team\nfrom \"main\".\"main\".\"teams\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team", "file_key_name": "models.teams"}, "test.nba_monte_carlo.unique_vegas_wins_team.c8a4b3b482": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('vegas_wins')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.vegas_wins"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "unique_vegas_wins_team"], "unique_id": "test.nba_monte_carlo.unique_vegas_wins_team.c8a4b3b482", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "unique_vegas_wins_team.sql", "original_file_path": "models/_docs.yml", "name": "unique_vegas_wins_team", "alias": "unique_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["vegas_wins"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_vegas_wins_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.5620453, "compiled_sql": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"main\".\"main\".\"vegas_wins\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team", "file_key_name": "models.vegas_wins"}, "test.nba_monte_carlo.not_null_vegas_wins_team.bdb6178e61": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('vegas_wins')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.vegas_wins"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_vegas_wins_team"], "unique_id": "test.nba_monte_carlo.not_null_vegas_wins_team.bdb6178e61", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_vegas_wins_team.sql", "original_file_path": "models/_docs.yml", "name": "not_null_vegas_wins_team", "alias": "not_null_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["vegas_wins"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_vegas_wins_team.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.5676477, "compiled_sql": "\n    \n    \n\n\n\nselect team\nfrom \"main\".\"main\".\"vegas_wins\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team", "file_key_name": "models.vegas_wins"}, "test.nba_monte_carlo.not_null_vegas_wins_win_total.7be1cafa7d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "win_total", "model": "{{ get_where_subquery(ref('vegas_wins')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.vegas_wins"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_vegas_wins_win_total"], "unique_id": "test.nba_monte_carlo.not_null_vegas_wins_win_total.7be1cafa7d", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_vegas_wins_win_total.sql", "original_file_path": "models/_docs.yml", "name": "not_null_vegas_wins_win_total", "alias": "not_null_vegas_wins_win_total", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["vegas_wins"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_vegas_wins_win_total.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.577076, "compiled_sql": "\n    \n    \n\n\n\nselect win_total\nfrom \"main\".\"main\".\"vegas_wins\"\nwhere win_total is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "win_total", "file_key_name": "models.vegas_wins"}, "test.nba_monte_carlo.not_null_xf_series_to_seed_series_id.9a2758d5f3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('xf_series_to_seed')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.xf_series_to_seed"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_xf_series_to_seed_series_id"], "unique_id": "test.nba_monte_carlo.not_null_xf_series_to_seed_series_id.9a2758d5f3", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_xf_series_to_seed_series_id.sql", "original_file_path": "models/_docs.yml", "name": "not_null_xf_series_to_seed_series_id", "alias": "not_null_xf_series_to_seed_series_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["xf_series_to_seed"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_xf_series_to_seed_series_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.5880961, "compiled_sql": "\n    \n    \n\n\n\nselect series_id\nfrom \"main\".\"main\".\"xf_series_to_seed\"\nwhere series_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "series_id", "file_key_name": "models.xf_series_to_seed"}, "test.nba_monte_carlo.unique_xf_series_to_seed_series_id.5088423c66": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('xf_series_to_seed')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.xf_series_to_seed"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "unique_xf_series_to_seed_series_id"], "unique_id": "test.nba_monte_carlo.unique_xf_series_to_seed_series_id.5088423c66", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "unique_xf_series_to_seed_series_id.sql", "original_file_path": "models/_docs.yml", "name": "unique_xf_series_to_seed_series_id", "alias": "unique_xf_series_to_seed_series_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["xf_series_to_seed"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_xf_series_to_seed_series_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.5959077, "compiled_sql": "\n    \n    \n\nselect\n    series_id as unique_field,\n    count(*) as n_records\n\nfrom \"main\".\"main\".\"xf_series_to_seed\"\nwhere series_id is not null\ngroup by series_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "series_id", "file_key_name": "models.xf_series_to_seed"}, "test.nba_monte_carlo.not_null_xf_series_to_seed_seed.9ad3cbf832": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "seed", "model": "{{ get_where_subquery(ref('xf_series_to_seed')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nba_monte_carlo.xf_series_to_seed"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["nba_monte_carlo", "not_null_xf_series_to_seed_seed"], "unique_id": "test.nba_monte_carlo.not_null_xf_series_to_seed_seed.9ad3cbf832", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "not_null_xf_series_to_seed_seed.sql", "original_file_path": "models/_docs.yml", "name": "not_null_xf_series_to_seed_seed", "alias": "not_null_xf_series_to_seed_seed", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["xf_series_to_seed"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_xf_series_to_seed_seed.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666979179.6028278, "compiled_sql": "\n    \n    \n\n\n\nselect seed\nfrom \"main\".\"main\".\"xf_series_to_seed\"\nwhere seed is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "seed", "file_key_name": "models.xf_series_to_seed"}, "model.nba_monte_carlo.raw_team_ratings": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT *\nFROM {{ \"'/tmp/data_catalog/psa/team_ratings/*.parquet'\" }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "raw", "raw_team_ratings"], "unique_id": "model.nba_monte_carlo.raw_team_ratings", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "raw/raw_team_ratings.sql", "original_file_path": "models/raw/raw_team_ratings.sql", "name": "raw_team_ratings", "alias": "raw_team_ratings", "checksum": {"name": "sha256", "checksum": "42ab5546634690452751896453a73c6229d4dde4d4c055083d11dc54d4b36576"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/raw/raw_team_ratings.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1667196444.689006, "compiled_sql": "\n\nSELECT *\nFROM '/tmp/data_catalog/psa/team_ratings/*.parquet'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"raw_team_ratings\""}, "model.nba_monte_carlo.raw_schedule": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT *\nFROM {{ \"'/tmp/data_catalog/psa/nba_schedule_2023/*.parquet'\" }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "raw", "raw_schedule"], "unique_id": "model.nba_monte_carlo.raw_schedule", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "raw/raw_schedule.sql", "original_file_path": "models/raw/raw_schedule.sql", "name": "raw_schedule", "alias": "raw_schedule", "checksum": {"name": "sha256", "checksum": "0d93824b1b6f309da56210438d9cf740d4e1f54bffcd724d6f7955871d30efd3"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/raw/raw_schedule.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1667196444.7490225, "compiled_sql": "\n\nSELECT *\nFROM '/tmp/data_catalog/psa/nba_schedule_2023/*.parquet'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"raw_schedule\""}, "model.nba_monte_carlo.raw_nba_elo_latest": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT *\nFROM {{ \"'/tmp/data_catalog/psa/nba_elo_latest/*.parquet'\" }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "raw", "raw_nba_elo_latest"], "unique_id": "model.nba_monte_carlo.raw_nba_elo_latest", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "raw/raw_nba_elo_latest.sql", "original_file_path": "models/raw/raw_nba_elo_latest.sql", "name": "raw_nba_elo_latest", "alias": "raw_nba_elo_latest", "checksum": {"name": "sha256", "checksum": "7cb575a13d97519377f8bc24c0ade1984e3a7e9b0f144f831212fe1a298480e8"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/raw/raw_nba_elo_latest.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1667196444.7665753, "compiled_sql": "\n\nSELECT *\nFROM '/tmp/data_catalog/psa/nba_elo_latest/*.parquet'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"raw_nba_elo_latest\""}, "model.nba_monte_carlo.raw_xf_series_to_seed": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT *\nFROM {{ \"'/tmp/data_catalog/psa/xf_series_to_seed/*.parquet'\" }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "raw", "raw_xf_series_to_seed"], "unique_id": "model.nba_monte_carlo.raw_xf_series_to_seed", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "raw/raw_xf_series_to_seed.sql", "original_file_path": "models/raw/raw_xf_series_to_seed.sql", "name": "raw_xf_series_to_seed", "alias": "raw_xf_series_to_seed", "checksum": {"name": "sha256", "checksum": "e85a84c36e8b791512fa0a11ae48f8a0a75bc8150e9c32dd0a2120578dadbd0f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/raw/raw_xf_series_to_seed.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1667196444.7829838, "compiled_sql": "\n\nSELECT *\nFROM '/tmp/data_catalog/psa/xf_series_to_seed/*.parquet'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"raw_xf_series_to_seed\""}, "model.nba_monte_carlo.prep_elo_post": {"raw_sql": "{{\n    config(\n        materialized = \"ephemeral\" if target.name == 'parquet' else \"view\"\n) }}\n\nSELECT\n    *,\n    {{ var('latest_ratings') }} AS latest_ratings\nFROM {{ \"'/tmp/data_catalog/prep/elo_post.parquet'\" }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "nba_monte_carlo": false, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["nba_monte_carlo", "prep", "prep_elo_post"], "unique_id": "model.nba_monte_carlo.prep_elo_post", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "prep/prep_elo_post.sql", "original_file_path": "models/prep/prep_elo_post.sql", "name": "prep_elo_post", "alias": "prep_elo_post", "checksum": {"name": "sha256", "checksum": "baff2ca367c1b734d455c021581107c4f47a92fd0abe0530cd5a0eff2fb41bd2"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_elo_post.sql", "build_path": null, "deferred": false, "unrendered_config": {"nba_monte_carlo": false, "materialized": "view"}, "created_at": 1667196444.7983923, "compiled_sql": "\n\nSELECT\n    *,\n    True AS latest_ratings\nFROM '/tmp/data_catalog/prep/elo_post.parquet'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"prep_elo_post\""}}, "sources": {"source.nba_monte_carlo.nba.schedule": {"fqn": ["nba_monte_carlo", "nba", "schedule"], "database": "main", "schema": "psa", "unique_id": "source.nba_monte_carlo.nba.schedule", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "name": "schedule", "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_schedule_2023", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "this is the nba schedule", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"main\".\"psa\".\"nba_schedule_2023\"", "created_at": 1666979179.6499288}, "source.nba_monte_carlo.nba.team_ratings": {"fqn": ["nba_monte_carlo", "nba", "team_ratings"], "database": "main", "schema": "psa", "unique_id": "source.nba_monte_carlo.nba.team_ratings", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "name": "team_ratings", "source_name": "nba", "source_description": "", "loader": "", "identifier": "team_ratings", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "team ELO ratings & win totals", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"main\".\"psa\".\"team_ratings\"", "created_at": 1666979179.650309}, "source.nba_monte_carlo.nba.xf_series_to_seed": {"fqn": ["nba_monte_carlo", "nba", "xf_series_to_seed"], "database": "main", "schema": "psa", "unique_id": "source.nba_monte_carlo.nba.xf_series_to_seed", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "name": "xf_series_to_seed", "source_name": "nba", "source_description": "", "loader": "", "identifier": "xf_series_to_seed", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "cross ref table to match series to seeds", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"main\".\"psa\".\"xf_series_to_seed\"", "created_at": 1666979179.6508243}, "source.nba_monte_carlo.nba.nba_elo_latest": {"fqn": ["nba_monte_carlo", "nba", "nba_elo_latest"], "database": "main", "schema": "psa", "unique_id": "source.nba_monte_carlo.nba.nba_elo_latest", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "name": "nba_elo_latest", "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_elo_latest", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ratings from 538 repo", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"main\".\"psa\".\"nba_elo_latest\"", "created_at": 1666979179.6511438}, "source.nba_monte_carlo.nba.latest_RAPTOR_by_player": {"fqn": ["nba_monte_carlo", "nba", "latest_RAPTOR_by_player"], "database": "main", "schema": "psa", "unique_id": "source.nba_monte_carlo.nba.latest_RAPTOR_by_player", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "name": "latest_RAPTOR_by_player", "source_name": "nba", "source_description": "", "loader": "", "identifier": "latest_RAPTOR_by_player", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "538 RAPTOR ratings by player", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"main\".\"psa\".\"latest_RAPTOR_by_player\"", "created_at": 1666979179.6515644}, "source.nba_monte_carlo.nba.latest_RAPTOR_by_team": {"fqn": ["nba_monte_carlo", "nba", "latest_RAPTOR_by_team"], "database": "main", "schema": "psa", "unique_id": "source.nba_monte_carlo.nba.latest_RAPTOR_by_team", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "name": "latest_RAPTOR_by_team", "source_name": "nba", "source_description": "", "loader": "", "identifier": "latest_RAPTOR_by_team", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "538 RAPTOR ratings by player by team & game type", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"main\".\"psa\".\"latest_RAPTOR_by_team\"", "created_at": 1666979179.651857}, "source.nba_monte_carlo.nba.elo_post": {"fqn": ["nba_monte_carlo", "nba", "elo_post"], "database": "main", "schema": "psa", "unique_id": "source.nba_monte_carlo.nba.elo_post", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "name": "elo_post", "source_name": "nba", "source_description": "", "loader": "", "identifier": "elo_post", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "elo after running proc for record actual results", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"main\".\"psa\".\"elo_post\"", "created_at": 1666979179.6522865}}, "macros": {"macro.nba_monte_carlo.test_empty_table": {"unique_id": "macro.nba_monte_carlo.test_empty_table", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "name": "test_empty_table", "macro_sql": "{% test empty_table(model) %}\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM {{ model }}\n    HAVING COUNT(*) = 0\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.783476}, "macro.nba_monte_carlo.elo_calc": {"unique_id": "macro.nba_monte_carlo.elo_calc", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "name": "elo_calc", "macro_sql": "{%- macro elo_calc(home_team, visiting_team) -%}\n   ( 1 - (1 / (10 ^ (-( {{visiting_team}} - {{home_team}} )::real/400)+1))) * 10000\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.8530748}, "macro.nba_monte_carlo.elo_diff": {"unique_id": "macro.nba_monte_carlo.elo_diff", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "name": "elo_diff", "macro_sql": "{%- macro elo_diff(home_team, visiting_team, result)  -%}\n   50.0 * (( {{result}} ) - (1 / (10 ^ ( - ({{visiting_team}} - {{home_team}})::real / 400) + 1)))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.854669}, "macro.nba_monte_carlo.playoff_sim": {"unique_id": "macro.nba_monte_carlo.playoff_sim", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "name": "playoff_sim", "macro_sql": "{% macro playoff_sim(round,seed_file) %}\n-- depends-on: {{ ref( 'random_num_gen' ) }}\n\nWITH cte_step_1 AS (\n    SELECT\n      R.scenario_id,\n      S.game_id,\n      S.series_id,\n      S.visiting_team AS visitor_key,\n      S.home_team AS home_key,\n      EV.winning_team AS visiting_team,\n      EV.elo_rating AS visiting_team_elo_rating,\n      EH.winning_team AS home_team,\n      EH.elo_rating AS home_team_elo_rating,\n      {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating' ) }} as home_team_win_probability,\n      R.rand_result,\n      CASE\n         WHEN {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating' ) }} >= R.rand_result THEN EH.winning_team\n         ELSE EV.winning_team\n      END AS winning_team \n    FROM {{ ref( 'schedules' ) }} S\n    {% if target.name == 'parquet' %}\n    LEFT JOIN '/tmp/data_catalog/conformed/random_num_gen.parquet' R ON R.game_id = S.game_id\n    LEFT JOIN '{{ seed_file }}' EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN '{{ seed_file }}' EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n    {% elif target.name != 'parquet' %}\n    LEFT JOIN {{ ref( 'random_num_gen' ) }} R ON R.game_id = S.game_id\n    LEFT JOIN  {{ ref( seed_file ) }} EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN  {{ ref( seed_file ) }} EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n    {% endif %}\n    WHERE S.type =  '{{ round }}' ),\ncte_step_2 AS (\n    SELECT step1.*,\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n    FROM cte_step_1 step1\n),\ncte_final_game AS (\n    SELECT scenario_id,\n        series_id,\n        game_id\n    FROM cte_step_2\n    WHERE series_result = 4\n)\nSELECT step2.* \nFROM cte_step_2 step2\n    INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n        AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\nORDER BY step2.scenario_id, \n    step2.series_id, \n    step2.game_id\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.nba_monte_carlo.elo_calc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.862165}, "macro.nba_monte_carlo.playoff_sim_end": {"unique_id": "macro.nba_monte_carlo.playoff_sim_end", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "name": "playoff_sim_end", "macro_sql": "{%- macro playoff_sim_end(precedent) -%}\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed\n    FROM {{ precedent }} E\nLEFT JOIN {{ ref( 'xf_series_to_seed' ) }} XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.8639889}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/snapshot_merge.sql", "original_file_path": "macros/snapshot_merge.sql", "name": "duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {% set insert_sql %}\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type = 'insert';\n    {% endset %}\n\n    {% do adapter.add_query(insert_sql, auto_begin=False) %}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id = {{ target.identifier }}.dbt_scd_id\n      and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n      and {{ target.identifier }}.dbt_valid_to is null;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.886122}, "macro.dbt_duckdb.duckdb__create_schema": {"unique_id": "macro.dbt_duckdb.duckdb__create_schema", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.942285}, "macro.dbt_duckdb.duckdb__drop_schema": {"unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.9456234}, "macro.dbt_duckdb.duckdb__list_schemas": {"unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from information_schema.schemata\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.947736}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from information_schema.schemata\n        where schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.954065}, "macro.dbt_duckdb.duckdb__create_table_as": {"unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=False, schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.9600089}, "macro.dbt_duckdb.duckdb__create_view_as": {"unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.include(database=False) }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.9629586}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.966075}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.9686017}, "macro.dbt_duckdb.duckdb__drop_relation": {"unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation.include(database=False) }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.9705322}, "macro.dbt_duckdb.duckdb__truncate_relation": {"unique_id": "macro.dbt_duckdb.duckdb__truncate_relation", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__truncate_relation", "macro_sql": "{% macro duckdb__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    DELETE FROM {{ relation.include(database=False) }} WHERE 1=1\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.9721487}, "macro.dbt_duckdb.duckdb__rename_relation": {"unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.9744265}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.9771278}, "macro.dbt_duckdb.duckdb__current_timestamp": {"unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.977609}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.9800808}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.9812822}, "macro.dbt_duckdb.duckdb__get_catalog": {"unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        'main' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979175.987446}, "macro.dbt_duckdb.duckdb_load_csv_rows": {"unique_id": "macro.dbt_duckdb.duckdb_load_csv_rows", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "name": "duckdb_load_csv_rows", "macro_sql": "{% macro duckdb_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    ?\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.0052874}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "name": "duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n  {{ return(duckdb_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.006916}, "macro.dbt_duckdb.duckdb__listagg": {"unique_id": "macro.dbt_duckdb.duckdb__listagg", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n        regexp_replace(\n          trim(cast(\n            (array_agg(\n              {{ measure }}\n              {% if order_by_clause -%}\n              {{ order_by_clause }}\n              {%- endif %}\n            )[1:{{ limit_num }}])\n            as string), '[]'),\n        ', ',\n        {{ delimiter_text }},\n        'g')\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.0161335}, "macro.dbt_duckdb.duckdb__split_part": {"unique_id": "macro.dbt_duckdb.duckdb__split_part", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/splitpart.sql", "original_file_path": "macros/utils/splitpart.sql", "name": "duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    coalesce(string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ], '')\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.0222888}, "macro.dbt_duckdb.duckdb__datediff": {"unique_id": "macro.dbt_duckdb.duckdb__datediff", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.0541482}, "macro.dbt_duckdb.duckdb__any_value": {"unique_id": "macro.dbt_duckdb.duckdb__any_value", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.0564985}, "macro.dbt_duckdb.duckdb__dateadd": {"unique_id": "macro.dbt_duckdb.duckdb__dateadd", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.0591707}, "macro.dbt_duckdb.duckdb__last_day": {"unique_id": "macro.dbt_duckdb.duckdb__last_day", "package_name": "dbt_duckdb", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/lastday.sql", "original_file_path": "macros/utils/lastday.sql", "name": "duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.06478}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.084148}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.0853806}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.0879097}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.0893285}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.0919368}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.0937698}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.0990324}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1012416}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1103017}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.142618}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1438835}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1454349}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1475635}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.149348}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1520758}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1537604}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1552634}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1564608}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1575823}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1588907}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1608474}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.162743}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1684408}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1706946}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.17184}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1745093}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1825862}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.183925}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.185708}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1868162}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.188566}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1919606}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1964986}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.1974447}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.199181}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2029796}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.216295}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.217603}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2193143}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2203252}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2230263}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2242212}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2248704}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2263265}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2275155}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2291586}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2304435}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2321875}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2391849}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2405293}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2423782}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2438574}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.252254}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.256356}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2572148}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2582302}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2610912}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2664156}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2681231}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2708042}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.272862}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.289008}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2911384}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2928867}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2939944}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2953055}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.2972279}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3008366}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3046222}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.306864}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3079317}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3145225}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.316333}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3183627}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3221874}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3238106}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.327719}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.329524}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3436162}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.352904}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3583627}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3599632}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.367854}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3713777}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3734496}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3758943}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.379602}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.383618}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.390133}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3939824}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.395893}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.3979497}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.4064462}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.407664}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.4085217}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.4093294}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.411004}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.4145527}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.416952}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.4209552}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.4234784}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.4388537}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.4827497}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.4895046}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.490969}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.4947166}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.496115}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.496904}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.4977274}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.4987805}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.5001235}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.5008867}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.5048366}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.5060604}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.5160658}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.5380564}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.5430098}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.544977}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.584494}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.608767}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6098382}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.611211}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6124616}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6130424}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.617285}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6181934}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6191664}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.627954}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6385372}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6643643}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6663716}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6676383}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6684713}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.669666}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6703603}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6717112}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6776264}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6790574}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6806338}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.6831467}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.7145257}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.7218518}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.72871}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.7332547}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.768074}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.7830908}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.7856266}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.7929325}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.7950432}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.7994137}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.833343}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.8390546}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.846775}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.852808}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.8567812}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.867428}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.8708653}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.873148}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.898848}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9021742}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9032495}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.904313}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9058092}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9110086}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9127388}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.914054}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9165454}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9421983}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9477901}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9502409}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9548483}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9557898}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.957065}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9593244}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9599056}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9625802}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9635231}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9656663}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9663901}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.968508}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9690845}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.972494}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9731019}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9758768}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9768355}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9790108}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9798117}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9831393}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9846687}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9855964}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9876685}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9882205}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9901927}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.990928}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9937432}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9946125}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.9969416}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979176.997783}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.000253}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0010476}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.005}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0061164}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0083876}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0092711}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0171711}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0185316}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0198658}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0215669}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0224805}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0232837}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0241783}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0254405}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0264425}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0272827}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0281637}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0291572}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0312052}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0317273}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0336611}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0350766}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.038028}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0389614}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0434763}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0455465}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.048003}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666979177.0495713}, "macro.nba_monte_carlo.elo_rollforward": {"unique_id": "macro.nba_monte_carlo.elo_rollforward", "package_name": "nba_monte_carlo", "root_path": "/workspaces/nba-monte-carlo/transform", "path": "macros/elo_rollforward.sql", "original_file_path": "macros/elo_rollforward.sql", "name": "elo_rollforward", "macro_sql": "{% macro elo_rollforward(dry_run='false') %}\n\n-- get the schedule loaded (will loop through this)\n{% set sql_statement %}\n    SELECT\n        (S._smart_source_lineno - 1) AS game_id,\n        S.team2 AS visiting_team,\n        S.team1 AS home_team,\n        CASE WHEN score1 > score2 THEN team1 ELSE team2 END AS winning_team,\n        CASE\n            WHEN score2 > score1 THEN 1\n            ELSE 0\n        END AS game_result\n    FROM {{ \"'/tmp/data_catalog/psa/nba_elo_latest/*.parquet'\" }} S\n    WHERE score1 IS NOT NULL\n    GROUP BY ALL\n    ORDER BY S._smart_source_lineno\n{% endset %}\n{% do log(sql_statement, info=True) %}\n\n{% set log_table %}\n    CREATE OR REPLACE TABLE results_log(\n        game_id INTEGER, \n        visiting_team VARCHAR(3), \n        visiting_team_elo_rating REAL,\n        home_team VARCHAR(3),\n        home_team_elo_rating REAL,\n        winning_team VARCHAR(3),\n        elo_change REAL\n    )\n{% endset %}\n{% do log(log_table, info=True) %}\n{% do run_query(log_table) %}\n\n-- load elo ratings into a temporary table\n{% set temp_ratings %}\n    CREATE OR REPLACE TEMPORARY TABLE workings_ratings AS (\n        SELECT team, elo_rating, elo_rating AS original_rating\n        FROM {{ \"'/tmp/data_catalog/psa/team_ratings/*.parquet'\" }}\n        GROUP BY ALL\n    )\n{% endset %}\n{% do run_query(temp_ratings) %}\n{% do log(temp_ratings, info=True) %}\n\n{%- set updates = run_query(sql_statement) -%}\n\n{% for i in updates.rows  -%}\n    {% set game %}\n        SELECT \n            {{ i[0] }} AS game_id,\n            '{{ i[1] }}' AS visiting_team,\n            RV.elo_rating,\n           '{{ i[2] }}' AS home_team,\n            RH.elo_rating,\n            '{{ i[3] }}' AS winning_team,\n            {{ i[4] }} AS result\n        FROM workings_ratings RH\n            LEFT JOIN workings_ratings RV ON RV.team = '{{ i[1] }}'\n        WHERE RH.team = '{{ i[2] }}'\n    {% endset %}\n    {% set workings_game = run_query(game) %}\n    {% do log(game, info=True) %}\n    {% for j in workings_game.rows %}\n        {% set update_proc %}\n            UPDATE workings_ratings\n                SET elo_rating = elo_rating - {{ elo_diff( j[4] , j[2] , j[6] ) }}\n                WHERE team = '{{ j[3] }}';\n            UPDATE workings_ratings\n                SET elo_rating = elo_rating + {{ elo_diff( j[4] , j[2] , j[6] ) }}\n                WHERE team = '{{ j[1] }}';\n            INSERT INTO results_log VALUES \n                ({{ j[0] }},\n                '{{ j[1] }}',\n                {{ j[2] }},\n                '{{ j[3] }}',\n                {{ j[4] }},\n                '{{ j[5] }}',\n                {{ elo_diff( j[4] , j[2] , j[6] ) }});\n        {% endset %}\n        {%- do log(\"running update below...\", info=True)  -%}\n        {% do log(update_proc, info=True) %}\n        {% if dry_run == 'false' %}\n            {% do run_query(update_proc) %}\n        {% endif %}\n    {% endfor %}\n    {% set update_proc = true %}\n{% endfor %} \n{% set output %}\n    COPY (SELECT * FROM workings_ratings ) TO '/tmp/data_catalog/prep/elo_post.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\n    COPY (SELECT * FROM results_log) TO '/tmp/data_catalog/prep/results_log.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\n{% endset %}\n{% do log(output, info=True) %}\n{% do run_query(output) %}\n{% do log(\"elo rollforward completed\", info=True) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.nba_monte_carlo.elo_diff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667196444.6420753}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/workspaces/nba-monte-carlo/.meltano/utilities/dbt-duckdb/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.nba_monte_carlo.playin_sim_r1_end": ["model.nba_monte_carlo.playin_sim_r1"], "model.nba_monte_carlo.playin_sim_r2": ["model.nba_monte_carlo.playin_sim_r1_end", "model.nba_monte_carlo.playin_sim_r1_end", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules"], "model.nba_monte_carlo.playin_sim_r2_end": ["model.nba_monte_carlo.playin_sim_r1_end", "model.nba_monte_carlo.playin_sim_r2"], "model.nba_monte_carlo.playin_sim_r1": ["model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.schedules"], "model.nba_monte_carlo.random_num_gen": ["model.nba_monte_carlo.scenario_gen", "model.nba_monte_carlo.schedules"], "model.nba_monte_carlo.vegas_wins": ["model.nba_monte_carlo.ratings"], "model.nba_monte_carlo.xf_series_to_seed": ["model.nba_monte_carlo.prep_xf_series_to_seed"], "model.nba_monte_carlo.reg_season_schedule": ["model.nba_monte_carlo.prep_nba_elo_latest", "model.nba_monte_carlo.ratings", "model.nba_monte_carlo.ratings"], "model.nba_monte_carlo.teams": ["model.nba_monte_carlo.prep_schedule", "model.nba_monte_carlo.ratings"], "model.nba_monte_carlo.ratings": ["model.nba_monte_carlo.prep_elo_post", "model.nba_monte_carlo.prep_team_ratings"], "model.nba_monte_carlo.schedules": ["model.nba_monte_carlo.post_season_schedule", "model.nba_monte_carlo.reg_season_schedule"], "model.nba_monte_carlo.scenario_gen": [], "model.nba_monte_carlo.post_season_schedule": ["model.nba_monte_carlo.prep_schedule"], "model.nba_monte_carlo.latest_results": ["model.nba_monte_carlo.prep_nba_elo_latest"], "model.nba_monte_carlo.playoff_sim_r2": ["model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.xf_series_to_seed"], "model.nba_monte_carlo.initialize_seeding": ["model.nba_monte_carlo.playin_sim_r2_end", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.reg_season_end"], "model.nba_monte_carlo.playoff_sim_r3": ["model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.xf_series_to_seed"], "model.nba_monte_carlo.season_summary": ["model.nba_monte_carlo.playoff_summary", "model.nba_monte_carlo.ratings", "model.nba_monte_carlo.reg_season_summary", "model.nba_monte_carlo.reg_season_summary"], "model.nba_monte_carlo.playoff_sim_r4": ["model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.xf_series_to_seed"], "model.nba_monte_carlo.playoff_sim_r1": ["model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.xf_series_to_seed"], "model.nba_monte_carlo.playoff_summary": ["model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.teams"], "model.nba_monte_carlo.reg_season_end": ["model.nba_monte_carlo.reg_season_simulator"], "model.nba_monte_carlo.reg_season_simulator": ["model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules"], "model.nba_monte_carlo.reg_season_summary": ["model.nba_monte_carlo.reg_season_actuals", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.vegas_wins"], "model.nba_monte_carlo.reg_season_actuals": ["model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.teams"], "model.nba_monte_carlo.prep_nba_elo_latest": ["model.nba_monte_carlo.raw_nba_elo_latest"], "model.nba_monte_carlo.prep_xf_series_to_seed": ["model.nba_monte_carlo.raw_xf_series_to_seed"], "model.nba_monte_carlo.prep_latest_ratings": ["model.nba_monte_carlo.prep_nba_elo_latest", "model.nba_monte_carlo.prep_nba_elo_latest"], "model.nba_monte_carlo.prep_team_ratings": ["model.nba_monte_carlo.raw_team_ratings"], "model.nba_monte_carlo.prep_schedule": ["model.nba_monte_carlo.raw_schedule"], "test.nba_monte_carlo.empty_table_prep_nba_elo_latest_.2f897d3ab6": ["model.nba_monte_carlo.prep_nba_elo_latest"], "test.nba_monte_carlo.empty_table_prep_schedule_.67a48d6ecc": ["model.nba_monte_carlo.prep_schedule"], "test.nba_monte_carlo.empty_table_prep_team_ratings_.820075bbe2": ["model.nba_monte_carlo.prep_team_ratings"], "test.nba_monte_carlo.empty_table_prep_xf_series_to_seed_.aa86cc61a5": ["model.nba_monte_carlo.prep_xf_series_to_seed"], "test.nba_monte_carlo.unique_prep_latest_ratings_team.fe3e9499ca": ["model.nba_monte_carlo.prep_latest_ratings"], "test.nba_monte_carlo.empty_table_prep_latest_ratings_.d193308c15": ["model.nba_monte_carlo.prep_latest_ratings"], "test.nba_monte_carlo.unique_latest_results_game_id.1c98eeb270": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_game_id.a68ef0c628": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_home_team.1a7c351704": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_home_team_score.8462ec4790": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_visiting_team.cba6550a1c": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_visiting_team_score.922086a03c": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_date.76604cb0af": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_winning_team.31606125c5": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_losing_team.63391801ce": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.unique_schedules_game_id.891eaf0b48": ["model.nba_monte_carlo.schedules"], "test.nba_monte_carlo.not_null_schedules_game_id.b5537eedb7": ["model.nba_monte_carlo.schedules"], "test.nba_monte_carlo.accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a9150d38ba": ["model.nba_monte_carlo.schedules"], "test.nba_monte_carlo.not_null_schedules_visiting_team.fe363c0b70": ["model.nba_monte_carlo.schedules"], "test.nba_monte_carlo.not_null_schedules_home_team.3e630337e9": ["model.nba_monte_carlo.schedules"], "test.nba_monte_carlo.not_null_ratings_team.b4f3c4c6c4": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.unique_ratings_team.1bd609a155": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.not_null_ratings_team_long.7e95b25d06": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.unique_ratings_team_long.d5886b2f22": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.not_null_ratings_conf.aefb460047": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.accepted_values_ratings_conf__East__West.20846f9fa3": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.not_null_ratings_elo_rating.0e2f6eaa14": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.empty_table_post_season_schedule_.ea8961d3e8": ["model.nba_monte_carlo.post_season_schedule"], "test.nba_monte_carlo.empty_table_reg_season_schedule_.1d11e42bef": ["model.nba_monte_carlo.reg_season_schedule"], "test.nba_monte_carlo.empty_table_random_num_gen_.5dd5ce0313": ["model.nba_monte_carlo.random_num_gen"], "test.nba_monte_carlo.empty_table_scenario_gen_.109ff538b2": ["model.nba_monte_carlo.scenario_gen"], "test.nba_monte_carlo.unique_teams_team_long.0d8a0ecdef": ["model.nba_monte_carlo.teams"], "test.nba_monte_carlo.not_null_teams_team_long.b38b6aa9e8": ["model.nba_monte_carlo.teams"], "test.nba_monte_carlo.unique_teams_team.a268dab99d": ["model.nba_monte_carlo.teams"], "test.nba_monte_carlo.not_null_teams_team.b7e6b73c9b": ["model.nba_monte_carlo.teams"], "test.nba_monte_carlo.unique_vegas_wins_team.c8a4b3b482": ["model.nba_monte_carlo.vegas_wins"], "test.nba_monte_carlo.not_null_vegas_wins_team.bdb6178e61": ["model.nba_monte_carlo.vegas_wins"], "test.nba_monte_carlo.not_null_vegas_wins_win_total.7be1cafa7d": ["model.nba_monte_carlo.vegas_wins"], "test.nba_monte_carlo.not_null_xf_series_to_seed_series_id.9a2758d5f3": ["model.nba_monte_carlo.xf_series_to_seed"], "test.nba_monte_carlo.unique_xf_series_to_seed_series_id.5088423c66": ["model.nba_monte_carlo.xf_series_to_seed"], "test.nba_monte_carlo.not_null_xf_series_to_seed_seed.9ad3cbf832": ["model.nba_monte_carlo.xf_series_to_seed"], "model.nba_monte_carlo.raw_team_ratings": [], "model.nba_monte_carlo.raw_schedule": [], "model.nba_monte_carlo.raw_nba_elo_latest": [], "model.nba_monte_carlo.raw_xf_series_to_seed": [], "model.nba_monte_carlo.prep_elo_post": [], "source.nba_monte_carlo.nba.schedule": [], "source.nba_monte_carlo.nba.team_ratings": [], "source.nba_monte_carlo.nba.xf_series_to_seed": [], "source.nba_monte_carlo.nba.nba_elo_latest": [], "source.nba_monte_carlo.nba.latest_RAPTOR_by_player": [], "source.nba_monte_carlo.nba.latest_RAPTOR_by_team": [], "source.nba_monte_carlo.nba.elo_post": []}, "child_map": {"model.nba_monte_carlo.playin_sim_r1_end": ["model.nba_monte_carlo.playin_sim_r2", "model.nba_monte_carlo.playin_sim_r2", "model.nba_monte_carlo.playin_sim_r2_end"], "model.nba_monte_carlo.playin_sim_r2": ["model.nba_monte_carlo.playin_sim_r2_end"], "model.nba_monte_carlo.playin_sim_r2_end": ["model.nba_monte_carlo.initialize_seeding"], "model.nba_monte_carlo.playin_sim_r1": ["model.nba_monte_carlo.playin_sim_r1_end"], "model.nba_monte_carlo.random_num_gen": ["model.nba_monte_carlo.playin_sim_r1", "model.nba_monte_carlo.playin_sim_r1", "model.nba_monte_carlo.playin_sim_r2", "model.nba_monte_carlo.playin_sim_r2", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.reg_season_simulator", "model.nba_monte_carlo.reg_season_simulator", "test.nba_monte_carlo.empty_table_random_num_gen_.5dd5ce0313"], "model.nba_monte_carlo.vegas_wins": ["model.nba_monte_carlo.reg_season_summary", "test.nba_monte_carlo.not_null_vegas_wins_team.bdb6178e61", "test.nba_monte_carlo.not_null_vegas_wins_win_total.7be1cafa7d", "test.nba_monte_carlo.unique_vegas_wins_team.c8a4b3b482"], "model.nba_monte_carlo.xf_series_to_seed": ["model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r4", "test.nba_monte_carlo.not_null_xf_series_to_seed_seed.9ad3cbf832", "test.nba_monte_carlo.not_null_xf_series_to_seed_series_id.9a2758d5f3", "test.nba_monte_carlo.unique_xf_series_to_seed_series_id.5088423c66"], "model.nba_monte_carlo.reg_season_schedule": ["model.nba_monte_carlo.schedules", "test.nba_monte_carlo.empty_table_reg_season_schedule_.1d11e42bef"], "model.nba_monte_carlo.teams": ["model.nba_monte_carlo.playoff_summary", "model.nba_monte_carlo.reg_season_actuals", "test.nba_monte_carlo.not_null_teams_team.b7e6b73c9b", "test.nba_monte_carlo.not_null_teams_team_long.b38b6aa9e8", "test.nba_monte_carlo.unique_teams_team.a268dab99d", "test.nba_monte_carlo.unique_teams_team_long.0d8a0ecdef"], "model.nba_monte_carlo.ratings": ["model.nba_monte_carlo.reg_season_schedule", "model.nba_monte_carlo.reg_season_schedule", "model.nba_monte_carlo.season_summary", "model.nba_monte_carlo.teams", "model.nba_monte_carlo.vegas_wins", "test.nba_monte_carlo.accepted_values_ratings_conf__East__West.20846f9fa3", "test.nba_monte_carlo.not_null_ratings_conf.aefb460047", "test.nba_monte_carlo.not_null_ratings_elo_rating.0e2f6eaa14", "test.nba_monte_carlo.not_null_ratings_team.b4f3c4c6c4", "test.nba_monte_carlo.not_null_ratings_team_long.7e95b25d06", "test.nba_monte_carlo.unique_ratings_team.1bd609a155", "test.nba_monte_carlo.unique_ratings_team_long.d5886b2f22"], "model.nba_monte_carlo.schedules": ["model.nba_monte_carlo.playin_sim_r1", "model.nba_monte_carlo.playin_sim_r2", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.reg_season_simulator", "test.nba_monte_carlo.accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a9150d38ba", "test.nba_monte_carlo.not_null_schedules_game_id.b5537eedb7", "test.nba_monte_carlo.not_null_schedules_home_team.3e630337e9", "test.nba_monte_carlo.not_null_schedules_visiting_team.fe363c0b70", "test.nba_monte_carlo.unique_schedules_game_id.891eaf0b48"], "model.nba_monte_carlo.scenario_gen": ["model.nba_monte_carlo.random_num_gen", "test.nba_monte_carlo.empty_table_scenario_gen_.109ff538b2"], "model.nba_monte_carlo.post_season_schedule": ["model.nba_monte_carlo.schedules", "test.nba_monte_carlo.empty_table_post_season_schedule_.ea8961d3e8"], "model.nba_monte_carlo.latest_results": ["model.nba_monte_carlo.reg_season_actuals", "model.nba_monte_carlo.reg_season_actuals", "model.nba_monte_carlo.reg_season_simulator", "test.nba_monte_carlo.not_null_latest_results_date.76604cb0af", "test.nba_monte_carlo.not_null_latest_results_game_id.a68ef0c628", "test.nba_monte_carlo.not_null_latest_results_home_team.1a7c351704", "test.nba_monte_carlo.not_null_latest_results_home_team_score.8462ec4790", "test.nba_monte_carlo.not_null_latest_results_losing_team.63391801ce", "test.nba_monte_carlo.not_null_latest_results_visiting_team.cba6550a1c", "test.nba_monte_carlo.not_null_latest_results_visiting_team_score.922086a03c", "test.nba_monte_carlo.not_null_latest_results_winning_team.31606125c5", "test.nba_monte_carlo.unique_latest_results_game_id.1c98eeb270"], "model.nba_monte_carlo.playoff_sim_r2": ["model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_summary", "model.nba_monte_carlo.playoff_summary"], "model.nba_monte_carlo.initialize_seeding": ["model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_summary", "model.nba_monte_carlo.playoff_summary"], "model.nba_monte_carlo.playoff_sim_r3": ["model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.playoff_summary", "model.nba_monte_carlo.playoff_summary"], "model.nba_monte_carlo.season_summary": [], "model.nba_monte_carlo.playoff_sim_r4": ["model.nba_monte_carlo.playoff_summary", "model.nba_monte_carlo.playoff_summary"], "model.nba_monte_carlo.playoff_sim_r1": ["model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_summary", "model.nba_monte_carlo.playoff_summary"], "model.nba_monte_carlo.playoff_summary": ["model.nba_monte_carlo.season_summary"], "model.nba_monte_carlo.reg_season_end": ["model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.playin_sim_r1", "model.nba_monte_carlo.playin_sim_r1", "model.nba_monte_carlo.playin_sim_r1", "model.nba_monte_carlo.reg_season_summary", "model.nba_monte_carlo.reg_season_summary"], "model.nba_monte_carlo.reg_season_simulator": ["model.nba_monte_carlo.reg_season_end"], "model.nba_monte_carlo.reg_season_summary": ["model.nba_monte_carlo.season_summary", "model.nba_monte_carlo.season_summary"], "model.nba_monte_carlo.reg_season_actuals": ["model.nba_monte_carlo.reg_season_summary"], "model.nba_monte_carlo.prep_nba_elo_latest": ["model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.prep_latest_ratings", "model.nba_monte_carlo.prep_latest_ratings", "model.nba_monte_carlo.reg_season_schedule", "test.nba_monte_carlo.empty_table_prep_nba_elo_latest_.2f897d3ab6"], "model.nba_monte_carlo.prep_xf_series_to_seed": ["model.nba_monte_carlo.xf_series_to_seed", "test.nba_monte_carlo.empty_table_prep_xf_series_to_seed_.aa86cc61a5"], "model.nba_monte_carlo.prep_latest_ratings": ["test.nba_monte_carlo.empty_table_prep_latest_ratings_.d193308c15", "test.nba_monte_carlo.unique_prep_latest_ratings_team.fe3e9499ca"], "model.nba_monte_carlo.prep_team_ratings": ["model.nba_monte_carlo.ratings", "test.nba_monte_carlo.empty_table_prep_team_ratings_.820075bbe2"], "model.nba_monte_carlo.prep_schedule": ["model.nba_monte_carlo.post_season_schedule", "model.nba_monte_carlo.teams", "test.nba_monte_carlo.empty_table_prep_schedule_.67a48d6ecc"], "test.nba_monte_carlo.empty_table_prep_nba_elo_latest_.2f897d3ab6": [], "test.nba_monte_carlo.empty_table_prep_schedule_.67a48d6ecc": [], "test.nba_monte_carlo.empty_table_prep_team_ratings_.820075bbe2": [], "test.nba_monte_carlo.empty_table_prep_xf_series_to_seed_.aa86cc61a5": [], "test.nba_monte_carlo.unique_prep_latest_ratings_team.fe3e9499ca": [], "test.nba_monte_carlo.empty_table_prep_latest_ratings_.d193308c15": [], "test.nba_monte_carlo.unique_latest_results_game_id.1c98eeb270": [], "test.nba_monte_carlo.not_null_latest_results_game_id.a68ef0c628": [], "test.nba_monte_carlo.not_null_latest_results_home_team.1a7c351704": [], "test.nba_monte_carlo.not_null_latest_results_home_team_score.8462ec4790": [], "test.nba_monte_carlo.not_null_latest_results_visiting_team.cba6550a1c": [], "test.nba_monte_carlo.not_null_latest_results_visiting_team_score.922086a03c": [], "test.nba_monte_carlo.not_null_latest_results_date.76604cb0af": [], "test.nba_monte_carlo.not_null_latest_results_winning_team.31606125c5": [], "test.nba_monte_carlo.not_null_latest_results_losing_team.63391801ce": [], "test.nba_monte_carlo.unique_schedules_game_id.891eaf0b48": [], "test.nba_monte_carlo.not_null_schedules_game_id.b5537eedb7": [], "test.nba_monte_carlo.accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a9150d38ba": [], "test.nba_monte_carlo.not_null_schedules_visiting_team.fe363c0b70": [], "test.nba_monte_carlo.not_null_schedules_home_team.3e630337e9": [], "test.nba_monte_carlo.not_null_ratings_team.b4f3c4c6c4": [], "test.nba_monte_carlo.unique_ratings_team.1bd609a155": [], "test.nba_monte_carlo.not_null_ratings_team_long.7e95b25d06": [], "test.nba_monte_carlo.unique_ratings_team_long.d5886b2f22": [], "test.nba_monte_carlo.not_null_ratings_conf.aefb460047": [], "test.nba_monte_carlo.accepted_values_ratings_conf__East__West.20846f9fa3": [], "test.nba_monte_carlo.not_null_ratings_elo_rating.0e2f6eaa14": [], "test.nba_monte_carlo.empty_table_post_season_schedule_.ea8961d3e8": [], "test.nba_monte_carlo.empty_table_reg_season_schedule_.1d11e42bef": [], "test.nba_monte_carlo.empty_table_random_num_gen_.5dd5ce0313": [], "test.nba_monte_carlo.empty_table_scenario_gen_.109ff538b2": [], "test.nba_monte_carlo.unique_teams_team_long.0d8a0ecdef": [], "test.nba_monte_carlo.not_null_teams_team_long.b38b6aa9e8": [], "test.nba_monte_carlo.unique_teams_team.a268dab99d": [], "test.nba_monte_carlo.not_null_teams_team.b7e6b73c9b": [], "test.nba_monte_carlo.unique_vegas_wins_team.c8a4b3b482": [], "test.nba_monte_carlo.not_null_vegas_wins_team.bdb6178e61": [], "test.nba_monte_carlo.not_null_vegas_wins_win_total.7be1cafa7d": [], "test.nba_monte_carlo.not_null_xf_series_to_seed_series_id.9a2758d5f3": [], "test.nba_monte_carlo.unique_xf_series_to_seed_series_id.5088423c66": [], "test.nba_monte_carlo.not_null_xf_series_to_seed_seed.9ad3cbf832": [], "model.nba_monte_carlo.raw_team_ratings": ["model.nba_monte_carlo.prep_team_ratings"], "model.nba_monte_carlo.raw_schedule": ["model.nba_monte_carlo.prep_schedule"], "model.nba_monte_carlo.raw_nba_elo_latest": ["model.nba_monte_carlo.prep_nba_elo_latest"], "model.nba_monte_carlo.raw_xf_series_to_seed": ["model.nba_monte_carlo.prep_xf_series_to_seed"], "model.nba_monte_carlo.prep_elo_post": ["model.nba_monte_carlo.ratings"], "source.nba_monte_carlo.nba.schedule": [], "source.nba_monte_carlo.nba.team_ratings": [], "source.nba_monte_carlo.nba.xf_series_to_seed": [], "source.nba_monte_carlo.nba.nba_elo_latest": [], "source.nba_monte_carlo.nba.latest_RAPTOR_by_player": [], "source.nba_monte_carlo.nba.latest_RAPTOR_by_team": [], "source.nba_monte_carlo.nba.elo_post": []}}