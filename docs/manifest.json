{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.4", "generated_at": "2025-08-28T04:09:28.876247Z", "invocation_id": "8b0e182c-e823-4acf-9cae-970bead0100a", "env": {}, "project_name": "sports_sims", "project_id": "03f8c6e5ade1b9abeae6a7bc17e1660e", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "duckdb"}, "nodes": {"model.sports_sims.nba_xf_series_to_seed": {"database": "mdsbox", "schema": "main", "name": "nba_xf_series_to_seed", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_xf_series_to_seed.sql", "original_file_path": "models/nba/prep/nba_xf_series_to_seed.sql", "unique_id": "model.sports_sims.nba_xf_series_to_seed", "fqn": ["sports_sims", "nba", "prep", "nba_xf_series_to_seed"], "alias": "nba_xf_series_to_seed", "checksum": {"name": "sha256", "checksum": "2b6dc60dbcaf2ff6f42499742f36572c0ff2d04e8d3edbedaebde0e08fd714ee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "seed": {"name": "seed", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_xf_series_to_seed.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.184834, "relation_name": "\"mdsbox\".\"main\".\"nba_xf_series_to_seed\"", "raw_code": "select series_id, seed from {{ ref(\"nba_raw_xf_series_to_seed\") }}", "language": "sql", "refs": [{"name": "nba_raw_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_xf_series_to_seed.sql", "compiled": true, "compiled_code": "select series_id, seed from \"mdsbox\".\"main\".\"nba_raw_xf_series_to_seed\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["series_id"], "time_spine": null}, "model.sports_sims.nba_reg_season_schedule": {"database": "mdsbox", "schema": "main", "name": "nba_reg_season_schedule", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_reg_season_schedule.sql", "original_file_path": "models/nba/prep/nba_reg_season_schedule.sql", "unique_id": "model.sports_sims.nba_reg_season_schedule", "fqn": ["sports_sims", "nba", "prep", "nba_reg_season_schedule"], "alias": "nba_reg_season_schedule", "checksum": {"name": "sha256", "checksum": "ef37e90f2926018f99ccc7c0b64f9197765efdcc775660469ea92c6f80933a48"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_reg_season_schedule.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.184033, "relation_name": "\"mdsbox\".\"main\".\"nba_reg_season_schedule\"", "raw_code": "select\n    s.id as game_id,\n    s.date as date,\n    case\n        when s.notes = 'In-Season Tournament'\n        then 'tournament'\n        when s.notes = 'Knockout Rounds'\n        then 'knockout'\n        else 'reg_season'\n    end as type,\n    0 as series_id,\n    v.conf as visiting_conf,\n    v.team as visiting_team,\n    coalesce(r.visiting_team_elo_rating, v.elo_rating::int) as visiting_team_elo_rating,\n    h.conf as home_conf,\n    h.team as home_team,\n    coalesce(r.home_team_elo_rating, h.elo_rating::int) as home_team_elo_rating\nfrom {{ ref(\"nba_raw_schedule\") }} as s\nleft join {{ ref(\"nba_ratings\") }} v on v.team_long = s.vistm\nleft join {{ ref(\"nba_ratings\") }} h on h.team_long = s.hometm\nleft join {{ ref(\"nba_elo_rollforward\") }} r on r.game_id = s.id\nwhere s.type = 'reg_season'\ngroup by all", "language": "sql", "refs": [{"name": "nba_raw_schedule", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_elo_rollforward", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_schedule", "model.sports_sims.nba_ratings", "model.sports_sims.nba_elo_rollforward"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_reg_season_schedule.sql", "compiled": true, "compiled_code": "select\n    s.id as game_id,\n    s.date as date,\n    case\n        when s.notes = 'In-Season Tournament'\n        then 'tournament'\n        when s.notes = 'Knockout Rounds'\n        then 'knockout'\n        else 'reg_season'\n    end as type,\n    0 as series_id,\n    v.conf as visiting_conf,\n    v.team as visiting_team,\n    coalesce(r.visiting_team_elo_rating, v.elo_rating::int) as visiting_team_elo_rating,\n    h.conf as home_conf,\n    h.team as home_team,\n    coalesce(r.home_team_elo_rating, h.elo_rating::int) as home_team_elo_rating\nfrom \"mdsbox\".\"main\".\"nba_raw_schedule\" as s\nleft join \"mdsbox\".\"main\".\"nba_ratings\" v on v.team_long = s.vistm\nleft join \"mdsbox\".\"main\".\"nba_ratings\" h on h.team_long = s.hometm\nleft join \"mdsbox\".\"main\".\"nba_elo_rollforward\" r on r.game_id = s.id\nwhere s.type = 'reg_season'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_results_by_team": {"database": "mdsbox", "schema": "main", "name": "nba_results_by_team", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_results_by_team.sql", "original_file_path": "models/nba/prep/nba_results_by_team.sql", "unique_id": "model.sports_sims.nba_results_by_team", "fqn": ["sports_sims", "nba", "prep", "nba_results_by_team"], "alias": "nba_results_by_team", "checksum": {"name": "sha256", "checksum": "50778c8c2471f8019bb1d7459972e4bfc848c2845a91daf206fadd27c9bd89cb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/prep/nba_results_by_team.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.925039, "relation_name": "\"mdsbox\".\"main\".\"nba_results_by_team\"", "raw_code": "from {{ ref(\"nba_results_log\") }}\nselect\n    game_id,\n    'home' as team_type,\n    hmtm as team,\n    home_team as team_long,\n    home_team_score as score,\n    case when home_team = winning_team then 'WIN' else 'LOSS' end as game_results,\n    home_team_score - visiting_team_score as margin,\n    type\nunion all\nfrom {{ ref(\"nba_results_log\") }}\nselect\n    game_id,\n    'visitor' as team_type,\n    vstm as team,\n    visiting_team as team_long,\n    visiting_team_score as score,\n    case when visiting_team = winning_team then 'WIN' else 'LOSS' end as game_results,\n    visiting_team_score - home_team_score as margin,\n    type", "language": "sql", "refs": [{"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_results_log"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_results_by_team.sql", "compiled": true, "compiled_code": "from \"mdsbox\".\"main\".\"nba_results_log\"\nselect\n    game_id,\n    'home' as team_type,\n    hmtm as team,\n    home_team as team_long,\n    home_team_score as score,\n    case when home_team = winning_team then 'WIN' else 'LOSS' end as game_results,\n    home_team_score - visiting_team_score as margin,\n    type\nunion all\nfrom \"mdsbox\".\"main\".\"nba_results_log\"\nselect\n    game_id,\n    'visitor' as team_type,\n    vstm as team,\n    visiting_team as team_long,\n    visiting_team_score as score,\n    case when visiting_team = winning_team then 'WIN' else 'LOSS' end as game_results,\n    visiting_team_score - home_team_score as margin,\n    type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_schedules": {"database": "mdsbox", "schema": "main", "name": "nba_schedules", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_schedules.sql", "original_file_path": "models/nba/prep/nba_schedules.sql", "unique_id": "model.sports_sims.nba_schedules", "fqn": ["sports_sims", "nba", "prep", "nba_schedules"], "alias": "nba_schedules", "checksum": {"name": "sha256", "checksum": "48fb95cb732dbb66ae0417fc1370c817171feca8b9e3248bc4c4e7aaa1d56254"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "visiting_conf": {"name": "visiting_conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "visiting_team_elo_rating": {"name": "visiting_team_elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "home_conf": {"name": "home_conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "home_team_elo_rating": {"name": "home_team_elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_schedules.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.1834931, "relation_name": "\"mdsbox\".\"main\".\"nba_schedules\"", "raw_code": "select *\nfrom {{ ref(\"nba_reg_season_schedule\") }}\nunion all\nselect *\nfrom {{ ref(\"nba_post_season_schedule\") }}", "language": "sql", "refs": [{"name": "nba_reg_season_schedule", "package": null, "version": null}, {"name": "nba_post_season_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_reg_season_schedule", "model.sports_sims.nba_post_season_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_schedules.sql", "compiled": true, "compiled_code": "select *\nfrom \"mdsbox\".\"main\".\"nba_reg_season_schedule\"\nunion all\nselect *\nfrom \"mdsbox\".\"main\".\"nba_post_season_schedule\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["game_id"], "time_spine": null}, "model.sports_sims.nba_seasons": {"database": "mdsbox", "schema": "main", "name": "nba_seasons", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_seasons.sql", "original_file_path": "models/nba/prep/nba_seasons.sql", "unique_id": "model.sports_sims.nba_seasons", "fqn": ["sports_sims", "nba", "prep", "nba_seasons"], "alias": "nba_seasons", "checksum": {"name": "sha256", "checksum": "a5290135e20ee76daa04ea9d1648be1825a3509ceac459632c5d7af9680dd90d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/prep/nba_seasons.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.926754, "relation_name": "\"mdsbox\".\"main\".\"nba_seasons\"", "raw_code": "select a.season from {{ ref(\"nba_elo_history\") }} a group by all order by a.season", "language": "sql", "refs": [{"name": "nba_elo_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_elo_history"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_seasons.sql", "compiled": true, "compiled_code": "select a.season from \"mdsbox\".\"main\".\"nba_elo_history\" a group by all order by a.season", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_post_season_schedule": {"database": "mdsbox", "schema": "main", "name": "nba_post_season_schedule", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_post_season_schedule.sql", "original_file_path": "models/nba/prep/nba_post_season_schedule.sql", "unique_id": "model.sports_sims.nba_post_season_schedule", "fqn": ["sports_sims", "nba", "prep", "nba_post_season_schedule"], "alias": "nba_post_season_schedule", "checksum": {"name": "sha256", "checksum": "87489b2b0ead12bc426b155a2a171277d76b63effb389bc0e3b9915ae539b4c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_post_season_schedule.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.183891, "relation_name": "\"mdsbox\".\"main\".\"nba_post_season_schedule\"", "raw_code": "select\n    s.id::int as game_id,\n    s.date,\n    s.type,\n    s.series_id,\n    null as visiting_conf,\n    s.vistm as visiting_team,\n    null as visiting_team_elo_rating,\n    null as home_conf,\n    s.hometm as home_team,\n    null as home_team_elo_rating\nfrom {{ ref(\"nba_raw_schedule\") }} as s\n-- LEFT JOIN {{ ref( 'nba_ratings' ) }} V ON V.team = S.VisTm\n-- LEFT JOIN {{ ref( 'nba_ratings' ) }} H ON H.team = S.HomeTm\n-- LEFT JOIN {{ ref( 'nba_elo_rollforward' ) }} R ON R.game_id = S.id\nwhere s.type <> 'reg_season'\ngroup by all", "language": "sql", "refs": [{"name": "nba_raw_schedule", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_elo_rollforward", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_schedule", "model.sports_sims.nba_ratings", "model.sports_sims.nba_elo_rollforward"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_post_season_schedule.sql", "compiled": true, "compiled_code": "select\n    s.id::int as game_id,\n    s.date,\n    s.type,\n    s.series_id,\n    null as visiting_conf,\n    s.vistm as visiting_team,\n    null as visiting_team_elo_rating,\n    null as home_conf,\n    s.hometm as home_team,\n    null as home_team_elo_rating\nfrom \"mdsbox\".\"main\".\"nba_raw_schedule\" as s\n-- LEFT JOIN \"mdsbox\".\"main\".\"nba_ratings\" V ON V.team = S.VisTm\n-- LEFT JOIN \"mdsbox\".\"main\".\"nba_ratings\" H ON H.team = S.HomeTm\n-- LEFT JOIN \"mdsbox\".\"main\".\"nba_elo_rollforward\" R ON R.game_id = S.id\nwhere s.type <> 'reg_season'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_latest_results": {"database": "mdsbox", "schema": "main", "name": "nba_latest_results", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_latest_results.sql", "original_file_path": "models/nba/prep/nba_latest_results.sql", "unique_id": "model.sports_sims.nba_latest_results", "fqn": ["sports_sims", "nba", "prep", "nba_latest_results"], "alias": "nba_latest_results", "checksum": {"name": "sha256", "checksum": "fe23bdb305dcdc0d08ede0db5e278ae12f2fe3f15391e2414326888694c114ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "home_team_score": {"name": "home_team_score", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "visiting_team_score": {"name": "visiting_team_score", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "winning_team": {"name": "winning_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "losing_team": {"name": "losing_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_latest_results.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.183201, "relation_name": "\"mdsbox\".\"main\".\"nba_latest_results\"", "raw_code": "with\n    cte_inner as (\n        select\n            s.id as game_id,\n            s.\"date\" as game_date,\n            s.hometm as home_team,\n            case\n                when s.hometm = r.winner then r.winner_pts else r.loser_pts\n            end as home_team_score,\n            s.vistm as visiting_team,\n            case\n                when s.vistm = r.winner then r.winner_pts else r.loser_pts\n            end as visiting_team_score,\n            r.winner as winning_team,\n            r.loser as losing_team,\n            {{ var(\"include_actuals\") }} as include_actuals\n        from {{ ref(\"nba_raw_schedule\") }} s\n        left join\n            {{ ref(\"nba_raw_results\") }} r\n            on r.\"date\" = s.\"date\"\n            and (s.vistm = r.winner or s.vistm = r.loser)\n        where home_team_score is not null\n        group by all\n    ),\n    cte_outer as (\n        select\n            i.*,\n            case\n                when visiting_team_score > home_team_score\n                then 1\n                when visiting_team_score = home_team_score\n                then 0.5\n                else 0\n            end as game_result,\n            abs(visiting_team_score - home_team_score) as margin,\n            w.team as winning_team_short,\n            l.team as losing_team_short\n        from cte_inner i\n        left join {{ ref(\"nba_teams\") }} w on w.team_long = i.winning_team\n        left join {{ ref(\"nba_teams\") }} l on l.team_long = i.losing_team\n    )\nselect\n    *,\n    case\n        when margin < 4 and game_result = 1\n        then 0.581\n        when margin < 4 and game_result = 0\n        then 0.419\n        when margin < 6 and game_result = 1\n        then 0.647\n        when margin < 6 and game_result = 0\n        then 0.353\n        when margin < 9 and game_result = 1\n        then 0.745\n        when margin < 9 and game_result = 0\n        then 0.255\n        when margin < 12 and game_result = 1\n        then 0.876\n        when margin < 12 and game_result = 0\n        then 0.124\n        else game_result\n    end as game_result_v2\nfrom cte_outer", "language": "sql", "refs": [{"name": "nba_raw_schedule", "package": null, "version": null}, {"name": "nba_raw_results", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_schedule", "model.sports_sims.nba_raw_results", "model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_latest_results.sql", "compiled": true, "compiled_code": "with\n    cte_inner as (\n        select\n            s.id as game_id,\n            s.\"date\" as game_date,\n            s.hometm as home_team,\n            case\n                when s.hometm = r.winner then r.winner_pts else r.loser_pts\n            end as home_team_score,\n            s.vistm as visiting_team,\n            case\n                when s.vistm = r.winner then r.winner_pts else r.loser_pts\n            end as visiting_team_score,\n            r.winner as winning_team,\n            r.loser as losing_team,\n            True as include_actuals\n        from \"mdsbox\".\"main\".\"nba_raw_schedule\" s\n        left join\n            \"mdsbox\".\"main\".\"nba_raw_results\" r\n            on r.\"date\" = s.\"date\"\n            and (s.vistm = r.winner or s.vistm = r.loser)\n        where home_team_score is not null\n        group by all\n    ),\n    cte_outer as (\n        select\n            i.*,\n            case\n                when visiting_team_score > home_team_score\n                then 1\n                when visiting_team_score = home_team_score\n                then 0.5\n                else 0\n            end as game_result,\n            abs(visiting_team_score - home_team_score) as margin,\n            w.team as winning_team_short,\n            l.team as losing_team_short\n        from cte_inner i\n        left join \"mdsbox\".\"main\".\"nba_teams\" w on w.team_long = i.winning_team\n        left join \"mdsbox\".\"main\".\"nba_teams\" l on l.team_long = i.losing_team\n    )\nselect\n    *,\n    case\n        when margin < 4 and game_result = 1\n        then 0.581\n        when margin < 4 and game_result = 0\n        then 0.419\n        when margin < 6 and game_result = 1\n        then 0.647\n        when margin < 6 and game_result = 0\n        then 0.353\n        when margin < 9 and game_result = 1\n        then 0.745\n        when margin < 9 and game_result = 0\n        then 0.255\n        when margin < 12 and game_result = 1\n        then 0.876\n        when margin < 12 and game_result = 0\n        then 0.124\n        else game_result\n    end as game_result_v2\nfrom cte_outer", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["game_id"], "time_spine": null}, "model.sports_sims.nba_latest_elo": {"database": "mdsbox", "schema": "main", "name": "nba_latest_elo", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_latest_elo.sql", "original_file_path": "models/nba/prep/nba_latest_elo.sql", "unique_id": "model.sports_sims.nba_latest_elo", "fqn": ["sports_sims", "nba", "prep", "nba_latest_elo"], "alias": "nba_latest_elo", "checksum": {"name": "sha256", "checksum": "9eaf96ea33dcc4c128820b65e49382705b6cd8877fc9aea727da7c2595f2b37e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_latest_elo.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.182444, "relation_name": "\"mdsbox\".\"main\".\"nba_latest_elo\"", "raw_code": "with\n    home_rating as (\n        select\n            home_team as team,\n            max(game_id) game_id,\n            max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n        from {{ ref(\"nba_elo_rollforward\") }}\n        group by all\n    ),\n    visiting_rating as (\n        select\n            visiting_team as team,\n            max(game_id) game_id,\n            max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n        from {{ ref(\"nba_elo_rollforward\") }}\n        group by all\n    ),\n    union_rating as (\n        select *\n        from home_rating\n        union all\n        select *\n        from visiting_rating\n    ),\n    final_rating as (\n        select team, max_by(elo_rating, game_id) as elo_rating\n        from union_rating\n        group by all\n    )\nselect\n    f.team as team_long,\n    o.team,\n    f.elo_rating as elo_rating,\n    o.elo_rating as original_rating,\n    {{ var(\"latest_ratings\") }} as latest_ratings\nfrom final_rating f\ninner join {{ ref(\"nba_raw_team_ratings\") }} o on f.team = o.team_long", "language": "sql", "refs": [{"name": "nba_elo_rollforward", "package": null, "version": null}, {"name": "nba_elo_rollforward", "package": null, "version": null}, {"name": "nba_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_latest_elo.sql", "compiled": true, "compiled_code": "with\n    home_rating as (\n        select\n            home_team as team,\n            max(game_id) game_id,\n            max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n        from \"mdsbox\".\"main\".\"nba_elo_rollforward\"\n        group by all\n    ),\n    visiting_rating as (\n        select\n            visiting_team as team,\n            max(game_id) game_id,\n            max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n        from \"mdsbox\".\"main\".\"nba_elo_rollforward\"\n        group by all\n    ),\n    union_rating as (\n        select *\n        from home_rating\n        union all\n        select *\n        from visiting_rating\n    ),\n    final_rating as (\n        select team, max_by(elo_rating, game_id) as elo_rating\n        from union_rating\n        group by all\n    )\nselect\n    f.team as team_long,\n    o.team,\n    f.elo_rating as elo_rating,\n    o.elo_rating as original_rating,\n    True as latest_ratings\nfrom final_rating f\ninner join \"mdsbox\".\"main\".\"nba_raw_team_ratings\" o on f.team = o.team_long", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["team"], "time_spine": null}, "model.sports_sims.nba_ratings": {"database": "mdsbox", "schema": "main", "name": "nba_ratings", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_ratings.sql", "original_file_path": "models/nba/prep/nba_ratings.sql", "unique_id": "model.sports_sims.nba_ratings", "fqn": ["sports_sims", "nba", "prep", "nba_ratings"], "alias": "nba_ratings", "checksum": {"name": "sha256", "checksum": "96ff56aaafc9a31d4aebffc4748a81159d50357229b55e9783ac5f1f8cfee844"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "conf": {"name": "conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "elo_rating": {"name": "elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_ratings.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.183743, "relation_name": "\"mdsbox\".\"main\".\"nba_ratings\"", "raw_code": "select\n    orig.team,\n    orig.team_long,\n    orig.conf,\n    case\n        when latest.latest_ratings = true and latest.elo_rating is not null\n        then latest.elo_rating\n        else orig.elo_rating\n    end as elo_rating,\n    orig.elo_rating as original_rating,\n    orig.win_total\nfrom {{ ref(\"nba_raw_team_ratings\") }} orig\nleft join {{ ref(\"nba_latest_elo\") }} latest on latest.team = orig.team\ngroup by all", "language": "sql", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}, {"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_team_ratings", "model.sports_sims.nba_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_ratings.sql", "compiled": true, "compiled_code": "select\n    orig.team,\n    orig.team_long,\n    orig.conf,\n    case\n        when latest.latest_ratings = true and latest.elo_rating is not null\n        then latest.elo_rating\n        else orig.elo_rating\n    end as elo_rating,\n    orig.elo_rating as original_rating,\n    orig.win_total\nfrom \"mdsbox\".\"main\".\"nba_raw_team_ratings\" orig\nleft join \"mdsbox\".\"main\".\"nba_latest_elo\" latest on latest.team = orig.team\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["team", "team_long"], "time_spine": null}, "model.sports_sims.nba_random_num_gen": {"database": "mdsbox", "schema": "main", "name": "nba_random_num_gen", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_random_num_gen.sql", "original_file_path": "models/nba/prep/nba_random_num_gen.sql", "unique_id": "model.sports_sims.nba_random_num_gen", "fqn": ["sports_sims", "nba", "prep", "nba_random_num_gen"], "alias": "nba_random_num_gen", "checksum": {"name": "sha256", "checksum": "4e54685cee85abd85b18e308b7aa5b070d54f19e8c15566c33778d7362cddd4e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_random_num_gen.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.184172, "relation_name": "\"mdsbox\".\"main\".\"nba_random_num_gen\"", "raw_code": "{{ config(materialized=\"table\") }}\n\nwith\n    cte_scenario_gen as (\n        select i.generate_series as scenario_id\n        from generate_series(1, {{ var(\"scenarios\") }}) as i\n    )\nselect\n    i.scenario_id,\n    s.game_id,\n    (random() * 10000)::smallint as rand_result,\n    {{ var(\"sim_start_game_id\") }} as sim_start_game_id\nfrom cte_scenario_gen as i\ncross join\n    {{ ref(\"nba_schedules\") }} as s\n    -- LEFT JOIN {{ ref( 'nba_latest_results' )}} AS R ON R.game_id = S.game_id\n    -- WHERE R.game_id IS NULL OR (R.game_id IS NOT NULL AND i.scenario_id = 1)", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_schedules", "model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_random_num_gen.sql", "compiled": true, "compiled_code": "\n\nwith\n    cte_scenario_gen as (\n        select i.generate_series as scenario_id\n        from generate_series(1, 10000) as i\n    )\nselect\n    i.scenario_id,\n    s.game_id,\n    (random() * 10000)::smallint as rand_result,\n    0 as sim_start_game_id\nfrom cte_scenario_gen as i\ncross join\n    \"mdsbox\".\"main\".\"nba_schedules\" as s\n    -- LEFT JOIN \"mdsbox\".\"main\".\"nba_latest_results\" AS R ON R.game_id = S.game_id\n    -- WHERE R.game_id IS NULL OR (R.game_id IS NOT NULL AND i.scenario_id = 1)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_results_log": {"database": "mdsbox", "schema": "main", "name": "nba_results_log", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_results_log.sql", "original_file_path": "models/nba/prep/nba_results_log.sql", "unique_id": "model.sports_sims.nba_results_log", "fqn": ["sports_sims", "nba", "prep", "nba_results_log"], "alias": "nba_results_log", "checksum": {"name": "sha256", "checksum": "b1f4957dc0b2fe2dc07b3f6b0c040c3ca29ba2e501eaff1bc160b609053a44e9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/prep/nba_results_log.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.938138, "relation_name": "\"mdsbox\".\"main\".\"nba_results_log\"", "raw_code": "with\n    cte_avg_elo as (\n        select avg(elo_rating) as elo_rating from {{ ref(\"nba_latest_elo\") }}\n    )\nselect\n    rl.*,\n    a.elo_rating as avg,\n    case\n        when rl.visiting_team_elo_rating > rl.home_team_elo_rating\n        then rl.visiting_team\n        else rl.home_team\n    end as favored_team,\n    case\n        when rl.visiting_team_elo_rating > a.elo_rating then 1 else 0\n    end as visiting_team_above_avg,\n    case\n        when rl.home_team_elo_rating > a.elo_rating then 1 else 0\n    end as home_team_above_avg,\n    case\n        when rl.winning_team = rl.home_team then rl.visiting_team else rl.home_team\n    end as losing_team,\n    lr.game_date,\n    lr.home_team_score,\n    lr.visiting_team_score,\n    h.team as hmtm,\n    v.team as vstm,\n    s.type\nfrom {{ ref(\"nba_elo_rollforward\") }} rl\nleft join cte_avg_elo a on 1 = 1\nleft join {{ ref(\"nba_latest_results\") }} lr on lr.game_id = rl.game_id\nleft join {{ ref(\"nba_teams\") }} h on h.team_long = rl.home_team\nleft join {{ ref(\"nba_teams\") }} v on v.team_long = rl.visiting_team\nleft join {{ ref(\"nba_schedules\") }} s on s.game_id = rl.game_id", "language": "sql", "refs": [{"name": "nba_latest_elo", "package": null, "version": null}, {"name": "nba_elo_rollforward", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_latest_elo", "model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_latest_results", "model.sports_sims.nba_teams", "model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_results_log.sql", "compiled": true, "compiled_code": "with\n    cte_avg_elo as (\n        select avg(elo_rating) as elo_rating from \"mdsbox\".\"main\".\"nba_latest_elo\"\n    )\nselect\n    rl.*,\n    a.elo_rating as avg,\n    case\n        when rl.visiting_team_elo_rating > rl.home_team_elo_rating\n        then rl.visiting_team\n        else rl.home_team\n    end as favored_team,\n    case\n        when rl.visiting_team_elo_rating > a.elo_rating then 1 else 0\n    end as visiting_team_above_avg,\n    case\n        when rl.home_team_elo_rating > a.elo_rating then 1 else 0\n    end as home_team_above_avg,\n    case\n        when rl.winning_team = rl.home_team then rl.visiting_team else rl.home_team\n    end as losing_team,\n    lr.game_date,\n    lr.home_team_score,\n    lr.visiting_team_score,\n    h.team as hmtm,\n    v.team as vstm,\n    s.type\nfrom \"mdsbox\".\"main\".\"nba_elo_rollforward\" rl\nleft join cte_avg_elo a on 1 = 1\nleft join \"mdsbox\".\"main\".\"nba_latest_results\" lr on lr.game_id = rl.game_id\nleft join \"mdsbox\".\"main\".\"nba_teams\" h on h.team_long = rl.home_team\nleft join \"mdsbox\".\"main\".\"nba_teams\" v on v.team_long = rl.visiting_team\nleft join \"mdsbox\".\"main\".\"nba_schedules\" s on s.game_id = rl.game_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_reg_season_actuals": {"database": "mdsbox", "schema": "main", "name": "nba_reg_season_actuals", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_reg_season_actuals.sql", "original_file_path": "models/nba/prep/nba_reg_season_actuals.sql", "unique_id": "model.sports_sims.nba_reg_season_actuals", "fqn": ["sports_sims", "nba", "prep", "nba_reg_season_actuals"], "alias": "nba_reg_season_actuals", "checksum": {"name": "sha256", "checksum": "ab4d5a3cfeea8a746bf2bfaf4250c8483dad3256baaaa2bfa7936723be4435be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/prep/nba_reg_season_actuals.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.939125, "relation_name": "\"mdsbox\".\"main\".\"nba_reg_season_actuals\"", "raw_code": "with\n    cte_wins as (\n        select winning_team, count(*) as wins\n        from {{ ref(\"nba_latest_results\") }}\n        group by all\n    ),\n\n    cte_losses as (\n        select losing_team, count(*) as losses\n        from {{ ref(\"nba_latest_results\") }}\n        group by all\n    )\n\nselect t.team, coalesce(w.wins, 0) as wins, coalesce(l.losses, 0) as losses\nfrom {{ ref(\"nba_teams\") }} t\nleft join cte_wins w on w.winning_team = t.team_long\nleft join cte_losses l on l.losing_team = t.team_long", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_reg_season_actuals.sql", "compiled": true, "compiled_code": "with\n    cte_wins as (\n        select winning_team, count(*) as wins\n        from \"mdsbox\".\"main\".\"nba_latest_results\"\n        group by all\n    ),\n\n    cte_losses as (\n        select losing_team, count(*) as losses\n        from \"mdsbox\".\"main\".\"nba_latest_results\"\n        group by all\n    )\n\nselect t.team, coalesce(w.wins, 0) as wins, coalesce(l.losses, 0) as losses\nfrom \"mdsbox\".\"main\".\"nba_teams\" t\nleft join cte_wins w on w.winning_team = t.team_long\nleft join cte_losses l on l.losing_team = t.team_long", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_elo_history": {"database": "mdsbox", "schema": "main", "name": "nba_elo_history", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_elo_history.sql", "original_file_path": "models/nba/prep/nba_elo_history.sql", "unique_id": "model.sports_sims.nba_elo_history", "fqn": ["sports_sims", "nba", "prep", "nba_elo_history"], "alias": "nba_elo_history", "checksum": {"name": "sha256", "checksum": "5efed3b1ce57f5d6c2f997f8ea404b70c03a13f39345909e50e008de08fb7d27"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/prep/nba_elo_history.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.939892, "relation_name": "\"mdsbox\".\"main\".\"nba_elo_history\"", "raw_code": "{{ config(materialized=\"table\") }}\n\nselect a.*\nfrom {{ source(\"nba\", \"nba_elo\") }} a\nunion all\nselect\n    l.game_date as date,\n    2024 as season,\n    null as nuetral,\n    'r' as playoff,\n    l.hmtm as team1,\n    l.vstm as team2,\n    r.home_team_elo_rating as elo1_pre,\n    r.visiting_team_elo_rating as elo2_pre,\n    null as elo_prob1,\n    null as elo_prob2,\n    case\n        when l.home_team_score > l.visiting_team_score\n        then r.home_team_elo_rating - r.elo_change\n        else r.home_team_elo_rating + r.elo_change\n    end as elo1_post,\n    case\n        when l.home_team_score > l.visiting_team_score\n        then r.visiting_team_elo_rating + r.elo_change\n        else r.visiting_team_elo_rating - r.elo_change\n    end as elo2_post,\n    l.home_team_score as score1,\n    l.visiting_team_score as score2\nfrom {{ ref(\"nba_elo_rollforward\") }} r\nleft join {{ ref(\"nba_results_log\") }} l on r.game_id = l.game_id", "language": "sql", "refs": [{"name": "nba_elo_rollforward", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}], "sources": [["nba", "nba_elo"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba.nba_elo", "model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_results_log"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_elo_history.sql", "compiled": true, "compiled_code": "\n\nselect a.*\nfrom '../data/nba/nba_elo.csv' a\nunion all\nselect\n    l.game_date as date,\n    2024 as season,\n    null as nuetral,\n    'r' as playoff,\n    l.hmtm as team1,\n    l.vstm as team2,\n    r.home_team_elo_rating as elo1_pre,\n    r.visiting_team_elo_rating as elo2_pre,\n    null as elo_prob1,\n    null as elo_prob2,\n    case\n        when l.home_team_score > l.visiting_team_score\n        then r.home_team_elo_rating - r.elo_change\n        else r.home_team_elo_rating + r.elo_change\n    end as elo1_post,\n    case\n        when l.home_team_score > l.visiting_team_score\n        then r.visiting_team_elo_rating + r.elo_change\n        else r.visiting_team_elo_rating - r.elo_change\n    end as elo2_post,\n    l.home_team_score as score1,\n    l.visiting_team_score as score2\nfrom \"mdsbox\".\"main\".\"nba_elo_rollforward\" r\nleft join \"mdsbox\".\"main\".\"nba_results_log\" l on r.game_id = l.game_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_season_teams": {"database": "mdsbox", "schema": "main", "name": "nba_season_teams", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_season_teams.sql", "original_file_path": "models/nba/prep/nba_season_teams.sql", "unique_id": "model.sports_sims.nba_season_teams", "fqn": ["sports_sims", "nba", "prep", "nba_season_teams"], "alias": "nba_season_teams", "checksum": {"name": "sha256", "checksum": "b27cc0a8e05a75122911b49fa78d35962ff18c66e03cafe55096c264adbe4b1c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/prep/nba_season_teams.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.940761, "relation_name": "\"mdsbox\".\"main\".\"nba_season_teams\"", "raw_code": "select c.*\nfrom\n    (\n        select a.season, a.team1 as team\n        from {{ ref(\"nba_elo_history\") }} a\n        union all\n        select b.season, b.team2\n        from {{ ref(\"nba_elo_history\") }} b\n    ) as c\ngroup by all\norder by c.team", "language": "sql", "refs": [{"name": "nba_elo_history", "package": null, "version": null}, {"name": "nba_elo_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_elo_history"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_season_teams.sql", "compiled": true, "compiled_code": "select c.*\nfrom\n    (\n        select a.season, a.team1 as team\n        from \"mdsbox\".\"main\".\"nba_elo_history\" a\n        union all\n        select b.season, b.team2\n        from \"mdsbox\".\"main\".\"nba_elo_history\" b\n    ) as c\ngroup by all\norder by c.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_teams": {"database": "mdsbox", "schema": "main", "name": "nba_teams", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_teams.sql", "original_file_path": "models/nba/prep/nba_teams.sql", "unique_id": "model.sports_sims.nba_teams", "fqn": ["sports_sims", "nba", "prep", "nba_teams"], "alias": "nba_teams", "checksum": {"name": "sha256", "checksum": "0dadd5dd5c0e4b03ababbaa240c2271561df57ee3d0ff1671837630baf135126"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_teams.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.184364, "relation_name": "\"mdsbox\".\"main\".\"nba_teams\"", "raw_code": "select r.team_long, r.team, tournament_group, conf, alt_key, division\nfrom {{ ref(\"nba_raw_team_ratings\") }} r", "language": "sql", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_teams.sql", "compiled": true, "compiled_code": "select r.team_long, r.team, tournament_group, conf, alt_key, division\nfrom \"mdsbox\".\"main\".\"nba_raw_team_ratings\" r", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["team", "team_long"], "time_spine": null}, "model.sports_sims.nba_vegas_wins": {"database": "mdsbox", "schema": "main", "name": "nba_vegas_wins", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_vegas_wins.sql", "original_file_path": "models/nba/prep/nba_vegas_wins.sql", "unique_id": "model.sports_sims.nba_vegas_wins", "fqn": ["sports_sims", "nba", "prep", "nba_vegas_wins"], "alias": "nba_vegas_wins", "checksum": {"name": "sha256", "checksum": "8962e3cdcbccce13d0cd8c09a1d1c68a0b45801c82c1e15f44c7c0c07b9057c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "win_total": {"name": "win_total", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/prep/nba_vegas_wins.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.184557, "relation_name": "\"mdsbox\".\"main\".\"nba_vegas_wins\"", "raw_code": "select team, win_total::double as win_total from {{ ref(\"nba_ratings\") }} group by all", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_vegas_wins.sql", "compiled": true, "compiled_code": "select team, win_total::double as win_total from \"mdsbox\".\"main\".\"nba_ratings\" group by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["team"], "time_spine": null}, "model.sports_sims.reg_season_actuals_enriched": {"database": "mdsbox", "schema": "main", "name": "reg_season_actuals_enriched", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/reg_season_actuals_enriched.sql", "original_file_path": "models/nba/analysis/reg_season_actuals_enriched.sql", "unique_id": "model.sports_sims.reg_season_actuals_enriched", "fqn": ["sports_sims", "nba", "analysis", "reg_season_actuals_enriched"], "alias": "reg_season_actuals_enriched", "checksum": {"name": "sha256", "checksum": "b659cd52c1a9a8d5a10fa98f7c66d3fe0fa9fe7070ba43132d649e3e2d2f6ed2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/reg_season_actuals_enriched.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.942842, "relation_name": "\"mdsbox\".\"main\".\"reg_season_actuals_enriched\"", "raw_code": "{{ config(materialized=\"table\") }}\n\nwith\n    cte_wins as (\n        select winning_team, count(*) as wins\n        from {{ ref(\"nba_latest_results\") }}\n        group by all\n    ),\n\n    cte_losses as (\n        select losing_team, count(*) as losses\n        from {{ ref(\"nba_latest_results\") }}\n        group by all\n    ),\n\n    cte_favored_wins as (\n        select lr.winning_team, count(*) as wins\n        from {{ ref(\"nba_latest_results\") }} lr\n        inner join\n            {{ ref(\"nba_results_log\") }} r\n            on r.game_id = lr.game_id\n            and r.favored_team = lr.winning_team\n        group by all\n    ),\n\n    cte_favored_losses as (\n        select lr.losing_team, count(*) as losses\n        from {{ ref(\"nba_latest_results\") }} lr\n        inner join\n            {{ ref(\"nba_results_log\") }} r\n            on r.game_id = lr.game_id\n            and r.favored_team = lr.losing_team\n        group by all\n    ),\n\n    cte_avg_opponent_wins as (\n        select lr.winning_team, count(*) as wins\n        from {{ ref(\"nba_latest_results\") }} lr\n        inner join\n            {{ ref(\"nba_results_log\") }} r\n            on r.game_id = lr.game_id\n            and (\n                (lr.winning_team = r.home_team and r.visiting_team_above_avg = 1)\n                or (lr.winning_team = r.visiting_team and r.home_team_above_avg = 1)\n            )\n        group by all\n    ),\n\n    cte_avg_opponent_losses as (\n        select lr.losing_team, count(*) as losses\n        from {{ ref(\"nba_latest_results\") }} lr\n        inner join\n            {{ ref(\"nba_results_log\") }} r\n            on r.game_id = lr.game_id\n            and (\n                (lr.losing_team = r.visiting_team and r.home_team_above_avg = 1)\n                or (lr.losing_team = r.home_team and r.visiting_team_above_avg = 1)\n            )\n        group by all\n    ),\n\n    cte_home_wins as (\n        select lr.home_team, count(*) as wins\n        from {{ ref(\"nba_latest_results\") }} lr\n        where lr.home_team = lr.winning_team\n        group by all\n    ),\n\n    cte_home_losses as (\n        select lr.home_team, count(*) as losses\n        from {{ ref(\"nba_latest_results\") }} lr\n        where lr.home_team = lr.losing_team\n        group by all\n    )\n\nselect\n    t.team,\n    coalesce(w.wins, 0) as wins,\n    coalesce(l.losses, 0) as losses,\n    coalesce(fw.wins, 0) as wins_as_favorite,\n    coalesce(fl.losses, 0) as losses_as_favorite,\n    coalesce(w.wins, 0) - coalesce(fw.wins, 0) as wins_as_underdog,\n    coalesce(l.losses, 0) - coalesce(fl.losses, 0) as losses_as_underdog,\n    coalesce(aw.wins, 0) as wins_vs_good_teams,\n    coalesce(al.losses, 0) as losses_vs_good_teams,\n    coalesce(w.wins, 0) - coalesce(aw.wins, 0) as wins_vs_bad_teams,\n    coalesce(l.losses, 0) - coalesce(al.losses, 0) as losses_vs_bad_teams,\n    coalesce(hw.wins, 0) as home_wins,\n    coalesce(hl.losses, 0) as home_losses,\n    coalesce(w.wins, 0) - coalesce(hw.wins, 0) as away_wins,\n    coalesce(l.losses, 0) - coalesce(hl.losses, 0) as away_losses\nfrom {{ ref(\"nba_teams\") }} t\nleft join cte_wins w on w.winning_team = t.team_long\nleft join cte_losses l on l.losing_team = t.team_long\nleft join cte_favored_wins fw on fw.winning_team = t.team_long\nleft join cte_favored_losses fl on fl.losing_team = t.team_long\nleft join cte_avg_opponent_wins aw on aw.winning_team = t.team_long\nleft join cte_avg_opponent_losses al on al.losing_team = t.team_long\nleft join cte_home_wins hw on hw.home_team = t.team_long\nleft join cte_home_losses hl on hl.home_team = t.team_long", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_results_log", "model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/reg_season_actuals_enriched.sql", "compiled": true, "compiled_code": "\n\nwith\n    cte_wins as (\n        select winning_team, count(*) as wins\n        from \"mdsbox\".\"main\".\"nba_latest_results\"\n        group by all\n    ),\n\n    cte_losses as (\n        select losing_team, count(*) as losses\n        from \"mdsbox\".\"main\".\"nba_latest_results\"\n        group by all\n    ),\n\n    cte_favored_wins as (\n        select lr.winning_team, count(*) as wins\n        from \"mdsbox\".\"main\".\"nba_latest_results\" lr\n        inner join\n            \"mdsbox\".\"main\".\"nba_results_log\" r\n            on r.game_id = lr.game_id\n            and r.favored_team = lr.winning_team\n        group by all\n    ),\n\n    cte_favored_losses as (\n        select lr.losing_team, count(*) as losses\n        from \"mdsbox\".\"main\".\"nba_latest_results\" lr\n        inner join\n            \"mdsbox\".\"main\".\"nba_results_log\" r\n            on r.game_id = lr.game_id\n            and r.favored_team = lr.losing_team\n        group by all\n    ),\n\n    cte_avg_opponent_wins as (\n        select lr.winning_team, count(*) as wins\n        from \"mdsbox\".\"main\".\"nba_latest_results\" lr\n        inner join\n            \"mdsbox\".\"main\".\"nba_results_log\" r\n            on r.game_id = lr.game_id\n            and (\n                (lr.winning_team = r.home_team and r.visiting_team_above_avg = 1)\n                or (lr.winning_team = r.visiting_team and r.home_team_above_avg = 1)\n            )\n        group by all\n    ),\n\n    cte_avg_opponent_losses as (\n        select lr.losing_team, count(*) as losses\n        from \"mdsbox\".\"main\".\"nba_latest_results\" lr\n        inner join\n            \"mdsbox\".\"main\".\"nba_results_log\" r\n            on r.game_id = lr.game_id\n            and (\n                (lr.losing_team = r.visiting_team and r.home_team_above_avg = 1)\n                or (lr.losing_team = r.home_team and r.visiting_team_above_avg = 1)\n            )\n        group by all\n    ),\n\n    cte_home_wins as (\n        select lr.home_team, count(*) as wins\n        from \"mdsbox\".\"main\".\"nba_latest_results\" lr\n        where lr.home_team = lr.winning_team\n        group by all\n    ),\n\n    cte_home_losses as (\n        select lr.home_team, count(*) as losses\n        from \"mdsbox\".\"main\".\"nba_latest_results\" lr\n        where lr.home_team = lr.losing_team\n        group by all\n    )\n\nselect\n    t.team,\n    coalesce(w.wins, 0) as wins,\n    coalesce(l.losses, 0) as losses,\n    coalesce(fw.wins, 0) as wins_as_favorite,\n    coalesce(fl.losses, 0) as losses_as_favorite,\n    coalesce(w.wins, 0) - coalesce(fw.wins, 0) as wins_as_underdog,\n    coalesce(l.losses, 0) - coalesce(fl.losses, 0) as losses_as_underdog,\n    coalesce(aw.wins, 0) as wins_vs_good_teams,\n    coalesce(al.losses, 0) as losses_vs_good_teams,\n    coalesce(w.wins, 0) - coalesce(aw.wins, 0) as wins_vs_bad_teams,\n    coalesce(l.losses, 0) - coalesce(al.losses, 0) as losses_vs_bad_teams,\n    coalesce(hw.wins, 0) as home_wins,\n    coalesce(hl.losses, 0) as home_losses,\n    coalesce(w.wins, 0) - coalesce(hw.wins, 0) as away_wins,\n    coalesce(l.losses, 0) - coalesce(hl.losses, 0) as away_losses\nfrom \"mdsbox\".\"main\".\"nba_teams\" t\nleft join cte_wins w on w.winning_team = t.team_long\nleft join cte_losses l on l.losing_team = t.team_long\nleft join cte_favored_wins fw on fw.winning_team = t.team_long\nleft join cte_favored_losses fl on fl.losing_team = t.team_long\nleft join cte_avg_opponent_wins aw on aw.winning_team = t.team_long\nleft join cte_avg_opponent_losses al on al.losing_team = t.team_long\nleft join cte_home_wins hw on hw.home_team = t.team_long\nleft join cte_home_losses hl on hl.home_team = t.team_long", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.reg_season_end": {"database": "mdsbox", "schema": "main", "name": "reg_season_end", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/reg_season_end.sql", "original_file_path": "models/nba/analysis/reg_season_end.sql", "unique_id": "model.sports_sims.reg_season_end", "fqn": ["sports_sims", "nba", "analysis", "reg_season_end"], "alias": "reg_season_end", "checksum": {"name": "sha256", "checksum": "b5e75f5c905d0b44f86c5464bad9a2779b44dfe210a283baffd878aa78192573"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/reg_season_end.sql", "unrendered_config": {"tags": "nba", "materialized": "view"}, "created_at": 1756344404.943935, "relation_name": "\"mdsbox\".\"main\".\"reg_season_end\"", "raw_code": "with\n    cte_wins as (\n        select\n            s.scenario_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team then s.home_conf else s.visiting_conf\n            end as conf,\n            /*    CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n            count(*) as wins\n        from {{ ref(\"reg_season_simulator\") }} s\n        group by all\n    ),\n\n    cte_ranked_wins as (\n        select\n            scenario_id,\n            team as winning_team,\n            conference as conf,\n            wins,\n            rank as season_rank\n        from {{ ref(\"nba_tiebreakers_optimized\") }}\n\n    ),\n\n    cte_made_playoffs as (\n        select\n            *,\n            case when season_rank <= 10 then 1 else 0 end as made_playoffs,\n            case when season_rank between 7 and 10 then 1 else 0 end as made_play_in,\n            conf || '-' || season_rank::text as seed\n        from cte_ranked_wins\n    )\n\nselect mp.*, le.elo_rating, {{ var(\"sim_start_game_id\") }} as sim_start_game_id\nfrom cte_made_playoffs mp\nleft join {{ ref(\"nba_latest_elo\") }} le on le.team = mp.winning_team", "language": "sql", "refs": [{"name": "reg_season_simulator", "package": null, "version": null}, {"name": "nba_tiebreakers_optimized", "package": null, "version": null}, {"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_simulator", "model.sports_sims.nba_tiebreakers_optimized", "model.sports_sims.nba_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/reg_season_end.sql", "compiled": true, "compiled_code": "with\n    cte_wins as (\n        select\n            s.scenario_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team then s.home_conf else s.visiting_conf\n            end as conf,\n            /*    CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n            count(*) as wins\n        from \"mdsbox\".\"main\".\"reg_season_simulator\" s\n        group by all\n    ),\n\n    cte_ranked_wins as (\n        select\n            scenario_id,\n            team as winning_team,\n            conference as conf,\n            wins,\n            rank as season_rank\n        from \"mdsbox\".\"main\".\"nba_tiebreakers_optimized\"\n\n    ),\n\n    cte_made_playoffs as (\n        select\n            *,\n            case when season_rank <= 10 then 1 else 0 end as made_playoffs,\n            case when season_rank between 7 and 10 then 1 else 0 end as made_play_in,\n            conf || '-' || season_rank::text as seed\n        from cte_ranked_wins\n    )\n\nselect mp.*, le.elo_rating, 0 as sim_start_game_id\nfrom cte_made_playoffs mp\nleft join \"mdsbox\".\"main\".\"nba_latest_elo\" le on le.team = mp.winning_team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_team_stats": {"database": "mdsbox", "schema": "main", "name": "nba_team_stats", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/nba_team_stats.sql", "original_file_path": "models/nba/analysis/nba_team_stats.sql", "unique_id": "model.sports_sims.nba_team_stats", "fqn": ["sports_sims", "nba", "analysis", "nba_team_stats"], "alias": "nba_team_stats", "checksum": {"name": "sha256", "checksum": "d2b2c676e2c0a1c89c9467b3a6d00b67cfd393c1b29558757dec2e6ac679d04b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/nba_team_stats.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.9458182, "relation_name": "\"mdsbox\".\"main\".\"nba_team_stats\"", "raw_code": "{{ config(materialized=\"table\") }}\n\nwith\n    cte_games as (\n        select\n            team1,\n            team2,\n            score1,\n            score2,\n            playoff,\n            case when score1 > score2 then team1 else team2 end as winner,\n            case when score1 < score2 then team1 else team2 end as loser,\n            case when team1 = t.team then elo1_pre else elo2_pre end as elo,\n            case when team1 = t.team then score1 else score2 end as pf,\n            case when team1 = t.team then score2 else score1 end as pa,\n            t.team || ':' || t.season as key,\n            t.team,\n            t.season\n        from {{ ref(\"nba_elo_history\") }} h\n        left join\n            {{ ref(\"nba_season_teams\") }} t\n            on (t.team = h.team1 or t.team = h.team2)\n            and h.season = t.season\n    )\nselect\n    key,\n    count(*) as ct,\n    count(*) filter (where winner = team and playoff = 'r') as wins,\n    - count(*) filter (where loser = team and playoff = 'r') as losses,\n    count(*) filter (\n        where winner = team and team1 = team and playoff = 'r'\n    ) as home_wins, - count(*) filter (\n        where loser = team and team1 = team and playoff = 'r'\n    ) as home_losses,\n    count(*) filter (\n        where winner = team and team2 = team and playoff = 'r'\n    ) as away_wins, - count(*) filter (\n        where loser = team and team2 = team and playoff = 'r'\n    ) as away_losses,\n    count(*) filter (where winner = team and playoff <> 'r') as playoff_wins,\n    - count(*) filter (where loser = team and playoff <> 'r') as playoff_losses,\n    avg(pf) as pf,\n    avg(- pa) as pa,\n    avg(pf) - avg(pa) as margin,\n    min(elo) as min_elo,\n    avg(elo) as avg_elo,\n    max(elo) as max_elo,\n    team as team,\n    season as season\nfrom cte_games\ngroup by all", "language": "sql", "refs": [{"name": "nba_elo_history", "package": null, "version": null}, {"name": "nba_season_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_elo_history", "model.sports_sims.nba_season_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/nba_team_stats.sql", "compiled": true, "compiled_code": "\n\nwith\n    cte_games as (\n        select\n            team1,\n            team2,\n            score1,\n            score2,\n            playoff,\n            case when score1 > score2 then team1 else team2 end as winner,\n            case when score1 < score2 then team1 else team2 end as loser,\n            case when team1 = t.team then elo1_pre else elo2_pre end as elo,\n            case when team1 = t.team then score1 else score2 end as pf,\n            case when team1 = t.team then score2 else score1 end as pa,\n            t.team || ':' || t.season as key,\n            t.team,\n            t.season\n        from \"mdsbox\".\"main\".\"nba_elo_history\" h\n        left join\n            \"mdsbox\".\"main\".\"nba_season_teams\" t\n            on (t.team = h.team1 or t.team = h.team2)\n            and h.season = t.season\n    )\nselect\n    key,\n    count(*) as ct,\n    count(*) filter (where winner = team and playoff = 'r') as wins,\n    - count(*) filter (where loser = team and playoff = 'r') as losses,\n    count(*) filter (\n        where winner = team and team1 = team and playoff = 'r'\n    ) as home_wins, - count(*) filter (\n        where loser = team and team1 = team and playoff = 'r'\n    ) as home_losses,\n    count(*) filter (\n        where winner = team and team2 = team and playoff = 'r'\n    ) as away_wins, - count(*) filter (\n        where loser = team and team2 = team and playoff = 'r'\n    ) as away_losses,\n    count(*) filter (where winner = team and playoff <> 'r') as playoff_wins,\n    - count(*) filter (where loser = team and playoff <> 'r') as playoff_losses,\n    avg(pf) as pf,\n    avg(- pa) as pa,\n    avg(pf) - avg(pa) as margin,\n    min(elo) as min_elo,\n    avg(elo) as avg_elo,\n    max(elo) as max_elo,\n    team as team,\n    season as season\nfrom cte_games\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.playoff_summary": {"database": "mdsbox", "schema": "main", "name": "playoff_summary", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/playoff_summary.sql", "original_file_path": "models/nba/analysis/playoff_summary.sql", "unique_id": "model.sports_sims.playoff_summary", "fqn": ["sports_sims", "nba", "analysis", "playoff_summary"], "alias": "playoff_summary", "checksum": {"name": "sha256", "checksum": "79aecf43355c92c99e4ccd61742816e0a42ef34404c605f425200bc2e10eda87"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/playoff_summary.sql", "unrendered_config": {"tags": "nba", "materialized": "view"}, "created_at": 1756344404.946752, "relation_name": "\"mdsbox\".\"main\".\"playoff_summary\"", "raw_code": "with\n    cte_playoffs_r1 as (\n        select winning_team, count(*) as made_playoffs\n        from {{ ref(\"initialize_seeding\") }}\n        group by all\n    ),\n\n    cte_playoffs_r2 as (\n        select winning_team, count(*) as made_conf_semis\n        from {{ ref(\"playoff_sim_r1\") }}\n        group by all\n    ),\n\n    cte_playoffs_r3 as (\n        select winning_team, count(*) as made_conf_finals\n        from {{ ref(\"playoff_sim_r2\") }}\n        group by all\n    ),\n\n    cte_playoffs_r4 as (\n        select winning_team, count(*) as made_finals\n        from {{ ref(\"playoff_sim_r3\") }}\n        group by all\n    ),\n\n    cte_playoffs_finals as (\n        select winning_team, count(*) as won_finals\n        from {{ ref(\"playoff_sim_r4\") }}\n        group by all\n    )\n\nselect\n    t.team,\n    r1.made_playoffs,\n    r2.made_conf_semis,\n    r3.made_conf_finals,\n    r4.made_finals,\n    f.won_finals\nfrom {{ ref(\"nba_teams\") }} t\nleft join cte_playoffs_r1 r1 on r1.winning_team = t.team\nleft join cte_playoffs_r2 r2 on r2.winning_team = t.team\nleft join cte_playoffs_r3 r3 on r3.winning_team = t.team\nleft join cte_playoffs_r4 r4 on r4.winning_team = t.team\nleft join cte_playoffs_finals f on f.winning_team = t.team", "language": "sql", "refs": [{"name": "initialize_seeding", "package": null, "version": null}, {"name": "playoff_sim_r1", "package": null, "version": null}, {"name": "playoff_sim_r2", "package": null, "version": null}, {"name": "playoff_sim_r3", "package": null, "version": null}, {"name": "playoff_sim_r4", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.initialize_seeding", "model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4", "model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/playoff_summary.sql", "compiled": true, "compiled_code": "with\n    cte_playoffs_r1 as (\n        select winning_team, count(*) as made_playoffs\n        from \"mdsbox\".\"main\".\"initialize_seeding\"\n        group by all\n    ),\n\n    cte_playoffs_r2 as (\n        select winning_team, count(*) as made_conf_semis\n        from \"mdsbox\".\"main\".\"playoff_sim_r1\"\n        group by all\n    ),\n\n    cte_playoffs_r3 as (\n        select winning_team, count(*) as made_conf_finals\n        from \"mdsbox\".\"main\".\"playoff_sim_r2\"\n        group by all\n    ),\n\n    cte_playoffs_r4 as (\n        select winning_team, count(*) as made_finals\n        from \"mdsbox\".\"main\".\"playoff_sim_r3\"\n        group by all\n    ),\n\n    cte_playoffs_finals as (\n        select winning_team, count(*) as won_finals\n        from \"mdsbox\".\"main\".\"playoff_sim_r4\"\n        group by all\n    )\n\nselect\n    t.team,\n    r1.made_playoffs,\n    r2.made_conf_semis,\n    r3.made_conf_finals,\n    r4.made_finals,\n    f.won_finals\nfrom \"mdsbox\".\"main\".\"nba_teams\" t\nleft join cte_playoffs_r1 r1 on r1.winning_team = t.team\nleft join cte_playoffs_r2 r2 on r2.winning_team = t.team\nleft join cte_playoffs_r3 r3 on r3.winning_team = t.team\nleft join cte_playoffs_r4 r4 on r4.winning_team = t.team\nleft join cte_playoffs_finals f on f.winning_team = t.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.season_summary": {"database": "mdsbox", "schema": "main", "name": "season_summary", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/season_summary.sql", "original_file_path": "models/nba/analysis/season_summary.sql", "unique_id": "model.sports_sims.season_summary", "fqn": ["sports_sims", "nba", "analysis", "season_summary"], "alias": "season_summary", "checksum": {"name": "sha256", "checksum": "609993ca96ffeaf244ad60dd51cc1e49d5adbca5adbfe2f67b2d0d13dc473846"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "COPY {{ this }} TO '../data/data_catalog/{{ this.identifier }}_{{ var('nba_start_date') }}.parquet'", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/season_summary.sql", "unrendered_config": {"tags": "nba", "materialized": "table", "post-hook": "COPY {{ this }} TO '../data/data_catalog/{{ this.identifier }}_{{ var('nba_start_date') }}.parquet'"}, "created_at": 1756344404.9480882, "relation_name": "\"mdsbox\".\"main\".\"season_summary\"", "raw_code": "{{\n    config(\n        materialized=\"table\",\n        post_hook=\"COPY {{ this }} TO '../data/data_catalog/{{ this.identifier }}_{{ var('nba_start_date') }}.parquet'\",\n    )\n}}\n\nselect\n    round(ratings.elo_rating, 0)::int\n    || ' ('\n    || case when original_rating < elo_rating then '+' else '' end\n    || (elo_rating - original_rating)::int\n    || ')' as elo_rating,\n    r.*,\n    p.made_playoffs,\n    p.made_conf_semis,\n    p.made_conf_finals,\n    p.made_finals,\n    p.won_finals\nfrom {{ ref(\"reg_season_summary\") }} r\nleft join {{ ref(\"playoff_summary\") }} p on p.team = r.team\nleft join {{ ref(\"nba_ratings\") }} ratings on ratings.team = r.team", "language": "sql", "refs": [{"name": "reg_season_summary", "package": null, "version": null}, {"name": "playoff_summary", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_summary", "model.sports_sims.playoff_summary", "model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/season_summary.sql", "compiled": true, "compiled_code": "\n\nselect\n    round(ratings.elo_rating, 0)::int\n    || ' ('\n    || case when original_rating < elo_rating then '+' else '' end\n    || (elo_rating - original_rating)::int\n    || ')' as elo_rating,\n    r.*,\n    p.made_playoffs,\n    p.made_conf_semis,\n    p.made_conf_finals,\n    p.made_finals,\n    p.won_finals\nfrom \"mdsbox\".\"main\".\"reg_season_summary\" r\nleft join \"mdsbox\".\"main\".\"playoff_summary\" p on p.team = r.team\nleft join \"mdsbox\".\"main\".\"nba_ratings\" ratings on ratings.team = r.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.team_matchups": {"database": "mdsbox", "schema": "main", "name": "team_matchups", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/team_matchups.sql", "original_file_path": "models/nba/analysis/team_matchups.sql", "unique_id": "model.sports_sims.team_matchups", "fqn": ["sports_sims", "nba", "analysis", "team_matchups"], "alias": "team_matchups", "checksum": {"name": "sha256", "checksum": "56520736193a32ac33e97108bd78c3dbe25c0bc11c7c6e128d523cd1d24c9fd2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/team_matchups.sql", "unrendered_config": {"tags": "nba", "materialized": "view"}, "created_at": 1756344404.9509618, "relation_name": "\"mdsbox\".\"main\".\"team_matchups\"", "raw_code": "select\n    home.team as home_team,\n    home.elo_rating as home_elo_rating,\n    away.team as away_team,\n    away.elo_rating as away_elo_rating,\n    {{ elo_calc(\"home_elo_rating\", \"away_elo_rating\", var(\"nba_elo_offset\")) }}\n    as home_team_win_probability,\n    home_elo_rating - away_elo_rating as elo_diff,\n    elo_diff + 100 as elo_diff_hfa,\n    home_team_win_probability / 10000 as home_win,\n    {{ american_odds(\"home_team_win_probability/10000\") }} as american_odds,\n    round(\n        case\n            when home_team_win_probability / 10000 >= 0.50\n            then round(-30.564 * home_team_win_probability / 10000 + 14.763, 1)\n            else round(-30.564 * home_team_win_probability / 10000 + 15.801, 1)\n        end\n        * 2,\n        0\n    )\n    / 2.0 as implied_line\nfrom {{ ref(\"nba_ratings\") }} home\njoin {{ ref(\"nba_ratings\") }} away on 1 = 1\nwhere home.team <> away.team", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc", "macro.sports_sims.american_odds"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/team_matchups.sql", "compiled": true, "compiled_code": "select\n    home.team as home_team,\n    home.elo_rating as home_elo_rating,\n    away.team as away_team,\n    away.elo_rating as away_elo_rating,\n    ( 1 - (1 / (10 ^ (-( away_elo_rating - home_elo_rating - 100)::real/400)+1))) * 10000\n    as home_team_win_probability,\n    home_elo_rating - away_elo_rating as elo_diff,\n    elo_diff + 100 as elo_diff_hfa,\n    home_team_win_probability / 10000 as home_win,\n    CASE WHEN home_team_win_probability/10000 >= 0.5 \n        THEN '-' || ROUND( home_team_win_probability/10000 / ( 1.0 - home_team_win_probability/10000 ) * 100 )::int\n        ELSE '+' || ((( 1.0 - home_team_win_probability/10000 ) / (home_team_win_probability/10000::real ) * 100)::int)\n    END as american_odds,\n    round(\n        case\n            when home_team_win_probability / 10000 >= 0.50\n            then round(-30.564 * home_team_win_probability / 10000 + 14.763, 1)\n            else round(-30.564 * home_team_win_probability / 10000 + 15.801, 1)\n        end\n        * 2,\n        0\n    )\n    / 2.0 as implied_line\nfrom \"mdsbox\".\"main\".\"nba_ratings\" home\njoin \"mdsbox\".\"main\".\"nba_ratings\" away on 1 = 1\nwhere home.team <> away.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.tournament_end": {"database": "mdsbox", "schema": "main", "name": "tournament_end", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/tournament_end.sql", "original_file_path": "models/nba/analysis/tournament_end.sql", "unique_id": "model.sports_sims.tournament_end", "fqn": ["sports_sims", "nba", "analysis", "tournament_end"], "alias": "tournament_end", "checksum": {"name": "sha256", "checksum": "e331d9da3778b846550b7995c5e4640d473341066479e71ea273b4e4230e6296"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/tournament_end.sql", "unrendered_config": {"tags": "nba", "materialized": "view"}, "created_at": 1756344404.9542751, "relation_name": "\"mdsbox\".\"main\".\"tournament_end\"", "raw_code": "with\n    cte_wins as (\n        select\n            s.scenario_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team then s.home_conf else s.visiting_conf\n            end as conf,\n            count(*) as wins,\n            sum(case when include_actuals = true then 1 else 0 end) as actual_wins\n        from {{ ref(\"reg_season_simulator\") }} s\n        where s.type = 'tournament'\n        group by all\n    ),\n\n    cte_losses as (\n        select\n            s.scenario_id,\n            case\n                when s.home_team = s.winning_team then s.visiting_team else s.home_team\n            end as losing_team,\n            case\n                when s.winning_team = s.home_team then s.visiting_conf else s.home_conf\n            end as conf,\n            count(*) as losses,\n            sum(case when include_actuals = true then 1 else 0 end) as actual_losses\n        from {{ ref(\"reg_season_simulator\") }} s\n        where s.type = 'tournament'\n        group by all\n    ),\n\n    cte_results_with_group as (\n        select\n            scenarios.scenario_id,\n            t.team as winning_team,\n            t.conf,\n            coalesce(w.wins, 0) as wins,\n            coalesce(l.losses, 0) as losses,\n            t.tournament_group,\n            coalesce(w.actual_wins, 0) as actual_wins,\n            coalesce(l.actual_losses, 0) as actual_losses\n        from {{ ref(\"nba_teams\") }} t\n        left join\n            (\n                select i.generate_series as scenario_id\n                from generate_series(1, {{ var(\"scenarios\") }}) as i\n            ) as scenarios\n            on 1 = 1\n        left join\n            cte_wins w\n            on t.team = w.winning_team\n            and scenarios.scenario_id = w.scenario_id\n        left join\n            cte_losses l\n            on t.team = l.losing_team\n            and scenarios.scenario_id = l.scenario_id\n    ),\n\n    cte_home_margin as (\n        select\n            t.team,\n            coalesce(\n                sum(coalesce(- h.actual_margin, - h.implied_line)), 0\n            ) as home_pt_diff\n        from {{ ref(\"nba_teams\") }} t\n        left join\n            {{ ref(\"reg_season_predictions\") }} h\n            on h.home_team = t.team\n            and h.type = 'tournament'\n            -- conditional join on reg season predictions\n            and case\n                when h.actual_margin is null\n                then h.winning_team = h.home_team\n                else 1 = 1\n            end\n        group by all\n    ),\n\n    cte_visitor_margin as (\n        select\n            t.team,\n            coalesce(\n                sum(coalesce(v.actual_margin, v.implied_line)), 0\n            ) as visitor_pt_diff\n        from {{ ref(\"nba_teams\") }} t\n        left join\n            {{ ref(\"reg_season_predictions\") }} v\n            on v.visiting_team = t.team\n            and v.type = 'tournament'\n            -- conditional join on reg season predictions\n            and case\n                when v.actual_margin is null\n                then v.winning_team = v.home_team\n                else 1 = 1\n            end\n        group by all\n    ),\n\n    cte_head_to_head as (\n        select\n            g.scenario_id,\n            g.winning_team,\n            case\n                when g.winning_team = g.home_team then g.visiting_team else g.home_team\n            end as losing_team\n        from {{ ref(\"reg_season_simulator\") }} g\n        where type = 'tournament'\n    ),\n\n    cte_head_to_head_wins as (\n        select h.scenario_id, h.winning_team as team, count(*) as h2h_wins\n        from cte_head_to_head h\n        inner join\n            cte_wins w\n            on h.winning_team = w.winning_team\n            and h.scenario_id = w.scenario_id\n            and h.losing_team in (\n                select winning_team\n                from cte_wins\n                where\n                    wins = w.wins\n                    and winning_team != w.winning_team\n                    and scenario_id = w.scenario_id\n            )\n        group by all\n    ),\n\n    cte_fuzz as (\n        select\n            r.scenario_id,\n            r.winning_team,\n            ((r.wins - r.actual_wins) * floor(random() * 5))\n            + ((r.losses - r.actual_losses) * floor(random() * -5)) as fuzz\n        from cte_results_with_group r\n    ),\n\n    /* tiebreaking criteria: https://www.nba.com/news/in-season-tournament-101\n\n  \u2022 Head-to-head record in the Group Stage;\n  \u2022 Point differential in the Group Stage;\n  \u2022 Total points scored in the Group Stage;\n  \u2022 Regular season record from the 2022-23 NBA regular season; and\n  \u2022 Random drawing (in the unlikely scenario that two or more teams are still tied following the previous tiebreakers).\n\n*/\n    cte_ranked_wins as (\n        select\n            r.*,\n            h2h.h2h_wins,\n            -- fuzzing pt diff by scenario via brute force (7 pt swing either way)\n            home_pt_diff + visitor_pt_diff + f.fuzz as pt_diff,\n            -- no tiebreaker, so however row number handles order ties will need to be\n            -- dealt with\n            row_number() over (\n                partition by r.scenario_id, tournament_group\n                order by wins desc, h2h_wins desc, pt_diff desc\n            ) as group_rank\n        from cte_results_with_group r\n        left join cte_home_margin h on h.team = r.winning_team\n        left join cte_visitor_margin v on v.team = r.winning_team\n        left join\n            cte_head_to_head_wins h2h\n            on h2h.team = r.winning_team\n            and h2h.scenario_id = r.scenario_id\n        left join\n            cte_fuzz f\n            on f.scenario_id = r.scenario_id\n            and f.winning_team = r.winning_team\n    ),\n\n    cte_wildcard as (\n        select\n            scenario_id,\n            winning_team,\n            conf,\n            wins,\n            pt_diff,\n            group_rank,\n            row_number() over (\n                partition by scenario_id, conf\n                order by wins desc, pt_diff desc, random()\n            ) as wildcard_rank\n        from cte_ranked_wins r\n        where group_rank = 2\n    ),\n\n    cte_made_tournament as (\n        select\n            w.*,\n            case when w.group_rank = 1 then 1 else 0 end as made_tournament,\n            case\n                when wc.wildcard_rank = 1 and wc.wildcard_rank is not null then 1 else 0\n            end as made_wildcard,\n            w.tournament_group || '-' || w.group_rank::text as seed\n        from cte_ranked_wins w\n        left join\n            cte_wildcard wc\n            on wc.winning_team = w.winning_team\n            and wc.scenario_id = w.scenario_id\n    )\n\nselect mp.*, le.elo_rating, {{ var(\"sim_start_game_id\") }} as sim_start_game_id\nfrom cte_made_tournament mp\nleft join {{ ref(\"nba_latest_elo\") }} le on le.team = mp.winning_team", "language": "sql", "refs": [{"name": "reg_season_simulator", "package": null, "version": null}, {"name": "reg_season_simulator", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "reg_season_predictions", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "reg_season_predictions", "package": null, "version": null}, {"name": "reg_season_simulator", "package": null, "version": null}, {"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_simulator", "model.sports_sims.nba_teams", "model.sports_sims.reg_season_predictions", "model.sports_sims.nba_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/tournament_end.sql", "compiled": true, "compiled_code": "with\n    cte_wins as (\n        select\n            s.scenario_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team then s.home_conf else s.visiting_conf\n            end as conf,\n            count(*) as wins,\n            sum(case when include_actuals = true then 1 else 0 end) as actual_wins\n        from \"mdsbox\".\"main\".\"reg_season_simulator\" s\n        where s.type = 'tournament'\n        group by all\n    ),\n\n    cte_losses as (\n        select\n            s.scenario_id,\n            case\n                when s.home_team = s.winning_team then s.visiting_team else s.home_team\n            end as losing_team,\n            case\n                when s.winning_team = s.home_team then s.visiting_conf else s.home_conf\n            end as conf,\n            count(*) as losses,\n            sum(case when include_actuals = true then 1 else 0 end) as actual_losses\n        from \"mdsbox\".\"main\".\"reg_season_simulator\" s\n        where s.type = 'tournament'\n        group by all\n    ),\n\n    cte_results_with_group as (\n        select\n            scenarios.scenario_id,\n            t.team as winning_team,\n            t.conf,\n            coalesce(w.wins, 0) as wins,\n            coalesce(l.losses, 0) as losses,\n            t.tournament_group,\n            coalesce(w.actual_wins, 0) as actual_wins,\n            coalesce(l.actual_losses, 0) as actual_losses\n        from \"mdsbox\".\"main\".\"nba_teams\" t\n        left join\n            (\n                select i.generate_series as scenario_id\n                from generate_series(1, 10000) as i\n            ) as scenarios\n            on 1 = 1\n        left join\n            cte_wins w\n            on t.team = w.winning_team\n            and scenarios.scenario_id = w.scenario_id\n        left join\n            cte_losses l\n            on t.team = l.losing_team\n            and scenarios.scenario_id = l.scenario_id\n    ),\n\n    cte_home_margin as (\n        select\n            t.team,\n            coalesce(\n                sum(coalesce(- h.actual_margin, - h.implied_line)), 0\n            ) as home_pt_diff\n        from \"mdsbox\".\"main\".\"nba_teams\" t\n        left join\n            \"mdsbox\".\"main\".\"reg_season_predictions\" h\n            on h.home_team = t.team\n            and h.type = 'tournament'\n            -- conditional join on reg season predictions\n            and case\n                when h.actual_margin is null\n                then h.winning_team = h.home_team\n                else 1 = 1\n            end\n        group by all\n    ),\n\n    cte_visitor_margin as (\n        select\n            t.team,\n            coalesce(\n                sum(coalesce(v.actual_margin, v.implied_line)), 0\n            ) as visitor_pt_diff\n        from \"mdsbox\".\"main\".\"nba_teams\" t\n        left join\n            \"mdsbox\".\"main\".\"reg_season_predictions\" v\n            on v.visiting_team = t.team\n            and v.type = 'tournament'\n            -- conditional join on reg season predictions\n            and case\n                when v.actual_margin is null\n                then v.winning_team = v.home_team\n                else 1 = 1\n            end\n        group by all\n    ),\n\n    cte_head_to_head as (\n        select\n            g.scenario_id,\n            g.winning_team,\n            case\n                when g.winning_team = g.home_team then g.visiting_team else g.home_team\n            end as losing_team\n        from \"mdsbox\".\"main\".\"reg_season_simulator\" g\n        where type = 'tournament'\n    ),\n\n    cte_head_to_head_wins as (\n        select h.scenario_id, h.winning_team as team, count(*) as h2h_wins\n        from cte_head_to_head h\n        inner join\n            cte_wins w\n            on h.winning_team = w.winning_team\n            and h.scenario_id = w.scenario_id\n            and h.losing_team in (\n                select winning_team\n                from cte_wins\n                where\n                    wins = w.wins\n                    and winning_team != w.winning_team\n                    and scenario_id = w.scenario_id\n            )\n        group by all\n    ),\n\n    cte_fuzz as (\n        select\n            r.scenario_id,\n            r.winning_team,\n            ((r.wins - r.actual_wins) * floor(random() * 5))\n            + ((r.losses - r.actual_losses) * floor(random() * -5)) as fuzz\n        from cte_results_with_group r\n    ),\n\n    /* tiebreaking criteria: https://www.nba.com/news/in-season-tournament-101\n\n  \u2022 Head-to-head record in the Group Stage;\n  \u2022 Point differential in the Group Stage;\n  \u2022 Total points scored in the Group Stage;\n  \u2022 Regular season record from the 2022-23 NBA regular season; and\n  \u2022 Random drawing (in the unlikely scenario that two or more teams are still tied following the previous tiebreakers).\n\n*/\n    cte_ranked_wins as (\n        select\n            r.*,\n            h2h.h2h_wins,\n            -- fuzzing pt diff by scenario via brute force (7 pt swing either way)\n            home_pt_diff + visitor_pt_diff + f.fuzz as pt_diff,\n            -- no tiebreaker, so however row number handles order ties will need to be\n            -- dealt with\n            row_number() over (\n                partition by r.scenario_id, tournament_group\n                order by wins desc, h2h_wins desc, pt_diff desc\n            ) as group_rank\n        from cte_results_with_group r\n        left join cte_home_margin h on h.team = r.winning_team\n        left join cte_visitor_margin v on v.team = r.winning_team\n        left join\n            cte_head_to_head_wins h2h\n            on h2h.team = r.winning_team\n            and h2h.scenario_id = r.scenario_id\n        left join\n            cte_fuzz f\n            on f.scenario_id = r.scenario_id\n            and f.winning_team = r.winning_team\n    ),\n\n    cte_wildcard as (\n        select\n            scenario_id,\n            winning_team,\n            conf,\n            wins,\n            pt_diff,\n            group_rank,\n            row_number() over (\n                partition by scenario_id, conf\n                order by wins desc, pt_diff desc, random()\n            ) as wildcard_rank\n        from cte_ranked_wins r\n        where group_rank = 2\n    ),\n\n    cte_made_tournament as (\n        select\n            w.*,\n            case when w.group_rank = 1 then 1 else 0 end as made_tournament,\n            case\n                when wc.wildcard_rank = 1 and wc.wildcard_rank is not null then 1 else 0\n            end as made_wildcard,\n            w.tournament_group || '-' || w.group_rank::text as seed\n        from cte_ranked_wins w\n        left join\n            cte_wildcard wc\n            on wc.winning_team = w.winning_team\n            and wc.scenario_id = w.scenario_id\n    )\n\nselect mp.*, le.elo_rating, 0 as sim_start_game_id\nfrom cte_made_tournament mp\nleft join \"mdsbox\".\"main\".\"nba_latest_elo\" le on le.team = mp.winning_team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.reg_season_summary": {"database": "mdsbox", "schema": "main", "name": "reg_season_summary", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/reg_season_summary.sql", "original_file_path": "models/nba/analysis/reg_season_summary.sql", "unique_id": "model.sports_sims.reg_season_summary", "fqn": ["sports_sims", "nba", "analysis", "reg_season_summary"], "alias": "reg_season_summary", "checksum": {"name": "sha256", "checksum": "8396650d6025444848e78e07d623a75937c4fdb9b7e5bf634e80dd319e3a5128"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/reg_season_summary.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.956856, "relation_name": "\"mdsbox\".\"main\".\"reg_season_summary\"", "raw_code": "{{\n    config(\n        materialized=\"table\"\n    )\n}}\n\nwith\n    cte_summary as (\n        select\n            winning_team as team,\n            e.conf,\n            round(avg(wins), 1) as avg_wins,\n            v.win_total as vegas_wins,\n            round(avg(v.win_total) - (avg(wins)), 1) as elo_vs_vegas,\n            round(\n                percentile_cont(0.05) within group (order by wins asc), 1\n            ) as wins_5th,\n            round(\n                percentile_cont(0.95) within group (order by wins asc), 1\n            ) as wins_95th,\n            count(*) filter (\n                where made_playoffs = 1 and made_play_in = 0\n            ) as made_postseason,\n            count(*) filter (where made_play_in = 1) as made_play_in,\n            round(\n                percentile_cont(0.05) within group (order by season_rank asc), 1\n            ) as seed_5th,\n            round(avg(season_rank), 1) as avg_seed,\n            round(\n                percentile_cont(0.95) within group (order by season_rank asc), 1\n            ) as seed_95th\n        from {{ ref(\"reg_season_end\") }} e\n        left join {{ ref(\"nba_vegas_wins\") }} v on v.team = e.winning_team\n        group by all\n    )\n\nselect\n    c.team,\n    c.conf,\n    a.wins || ' - ' || a.losses as record,\n    c.avg_wins,\n    c.vegas_wins,\n    c.elo_vs_vegas,\n    c.wins_5th::int || ' to ' || c.wins_95th::int as win_range,\n    c.seed_5th::int || ' to ' || c.seed_95th::int as seed_range,\n    c.made_postseason,\n    c.made_play_in,\n    '{{ var(\"nba_start_date\") }}'::date as nba_sim_start_date\nfrom cte_summary c\nleft join {{ ref(\"nba_reg_season_actuals\") }} a on a.team = c.team", "language": "sql", "refs": [{"name": "reg_season_end", "package": null, "version": null}, {"name": "nba_vegas_wins", "package": null, "version": null}, {"name": "nba_reg_season_actuals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_end", "model.sports_sims.nba_vegas_wins", "model.sports_sims.nba_reg_season_actuals"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/reg_season_summary.sql", "compiled": true, "compiled_code": "\n\nwith\n    cte_summary as (\n        select\n            winning_team as team,\n            e.conf,\n            round(avg(wins), 1) as avg_wins,\n            v.win_total as vegas_wins,\n            round(avg(v.win_total) - (avg(wins)), 1) as elo_vs_vegas,\n            round(\n                percentile_cont(0.05) within group (order by wins asc), 1\n            ) as wins_5th,\n            round(\n                percentile_cont(0.95) within group (order by wins asc), 1\n            ) as wins_95th,\n            count(*) filter (\n                where made_playoffs = 1 and made_play_in = 0\n            ) as made_postseason,\n            count(*) filter (where made_play_in = 1) as made_play_in,\n            round(\n                percentile_cont(0.05) within group (order by season_rank asc), 1\n            ) as seed_5th,\n            round(avg(season_rank), 1) as avg_seed,\n            round(\n                percentile_cont(0.95) within group (order by season_rank asc), 1\n            ) as seed_95th\n        from \"mdsbox\".\"main\".\"reg_season_end\" e\n        left join \"mdsbox\".\"main\".\"nba_vegas_wins\" v on v.team = e.winning_team\n        group by all\n    )\n\nselect\n    c.team,\n    c.conf,\n    a.wins || ' - ' || a.losses as record,\n    c.avg_wins,\n    c.vegas_wins,\n    c.elo_vs_vegas,\n    c.wins_5th::int || ' to ' || c.wins_95th::int as win_range,\n    c.seed_5th::int || ' to ' || c.seed_95th::int as seed_range,\n    c.made_postseason,\n    c.made_play_in,\n    '2025-04-15'::date as nba_sim_start_date\nfrom cte_summary c\nleft join \"mdsbox\".\"main\".\"nba_reg_season_actuals\" a on a.team = c.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.reg_season_predictions": {"database": "mdsbox", "schema": "main", "name": "reg_season_predictions", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/reg_season_predictions.sql", "original_file_path": "models/nba/analysis/reg_season_predictions.sql", "unique_id": "model.sports_sims.reg_season_predictions", "fqn": ["sports_sims", "nba", "analysis", "reg_season_predictions"], "alias": "reg_season_predictions", "checksum": {"name": "sha256", "checksum": "223fadbf509648d7fe5c7c1130b97dbdce01fbfc19cc5bc30fd46e712c7b0c5a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/reg_season_predictions.sql", "unrendered_config": {"tags": "nba", "materialized": "view"}, "created_at": 1756344404.95871, "relation_name": "\"mdsbox\".\"main\".\"reg_season_predictions\"", "raw_code": "with\n    cte_team_scores as (\n        select t.team, coalesce(avg(r.score),115) as pts --add 115 to account for missing data\n        from {{ ref( \"nba_teams\")}} t\n        left join {{ ref(\"nba_results_by_team\") }} r on r.team = t.team\n        group by all\n    ),\n    cte_interim_calcs as (\n        select\n            game_id,\n            date,\n            home_team,\n            home_team_elo_rating,\n            visiting_team,\n            visiting_team_elo_rating,\n            home_team_win_probability,\n            winning_team,\n            include_actuals,\n            count(*) as occurances,\n            {{ american_odds(\"home_team_win_probability/10000\") }} as american_odds,\n            type,\n            actual_home_team_score,\n            actual_visiting_team_score,\n            case\n                when actual_home_team_score > actual_visiting_team_score\n                then actual_margin * -1\n                else actual_margin\n            end as actual_margin,\n            (h.pts + v.pts) / 2.0 as avg_score,\n            round(\n                case\n                    when home_team_win_probability / 10000 >= 0.50\n                    then round(-30.564 * home_team_win_probability / 10000 + 14.763, 1)\n                    else round(-30.564 * home_team_win_probability / 10000 + 15.801, 1)\n                end\n                * 2,\n                0\n            )\n            / 2.0 as implied_line\n        from {{ ref(\"reg_season_simulator\") }} s\n        left join cte_team_scores h on h.team = s.home_team\n        left join cte_team_scores v on v.team = s.visiting_team\n        group by all\n    ),\n    cte_final as (\n        select\n            *,\n            round(avg_score - (implied_line / 2.0), 0) as home_score,\n            round(avg_score + (implied_line / 2.0), 0) as visiting_score\n        from cte_interim_calcs\n    )\nselect\n    *,\n    home_team\n    || ' '\n    || home_score::int\n    || ' - '\n    || visiting_score::int\n    || ' '\n    || visiting_team as predicted_score\nfrom cte_final", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}, {"name": "nba_results_by_team", "package": null, "version": null}, {"name": "reg_season_simulator", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.american_odds"], "nodes": ["model.sports_sims.nba_teams", "model.sports_sims.nba_results_by_team", "model.sports_sims.reg_season_simulator"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/reg_season_predictions.sql", "compiled": true, "compiled_code": "with\n    cte_team_scores as (\n        select t.team, coalesce(avg(r.score),115) as pts --add 115 to account for missing data\n        from \"mdsbox\".\"main\".\"nba_teams\" t\n        left join \"mdsbox\".\"main\".\"nba_results_by_team\" r on r.team = t.team\n        group by all\n    ),\n    cte_interim_calcs as (\n        select\n            game_id,\n            date,\n            home_team,\n            home_team_elo_rating,\n            visiting_team,\n            visiting_team_elo_rating,\n            home_team_win_probability,\n            winning_team,\n            include_actuals,\n            count(*) as occurances,\n            CASE WHEN home_team_win_probability/10000 >= 0.5 \n        THEN '-' || ROUND( home_team_win_probability/10000 / ( 1.0 - home_team_win_probability/10000 ) * 100 )::int\n        ELSE '+' || ((( 1.0 - home_team_win_probability/10000 ) / (home_team_win_probability/10000::real ) * 100)::int)\n    END as american_odds,\n            type,\n            actual_home_team_score,\n            actual_visiting_team_score,\n            case\n                when actual_home_team_score > actual_visiting_team_score\n                then actual_margin * -1\n                else actual_margin\n            end as actual_margin,\n            (h.pts + v.pts) / 2.0 as avg_score,\n            round(\n                case\n                    when home_team_win_probability / 10000 >= 0.50\n                    then round(-30.564 * home_team_win_probability / 10000 + 14.763, 1)\n                    else round(-30.564 * home_team_win_probability / 10000 + 15.801, 1)\n                end\n                * 2,\n                0\n            )\n            / 2.0 as implied_line\n        from \"mdsbox\".\"main\".\"reg_season_simulator\" s\n        left join cte_team_scores h on h.team = s.home_team\n        left join cte_team_scores v on v.team = s.visiting_team\n        group by all\n    ),\n    cte_final as (\n        select\n            *,\n            round(avg_score - (implied_line / 2.0), 0) as home_score,\n            round(avg_score + (implied_line / 2.0), 0) as visiting_score\n        from cte_interim_calcs\n    )\nselect\n    *,\n    home_team\n    || ' '\n    || home_score::int\n    || ' - '\n    || visiting_score::int\n    || ' '\n    || visiting_team as predicted_score\nfrom cte_final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.playin_sim_r1": {"database": "mdsbox", "schema": "main", "name": "playin_sim_r1", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playin/playin_sim_r1.sql", "original_file_path": "models/nba/simulator/playin/playin_sim_r1.sql", "unique_id": "model.sports_sims.playin_sim_r1", "fqn": ["sports_sims", "nba", "simulator", "playin", "playin_sim_r1"], "alias": "playin_sim_r1", "checksum": {"name": "sha256", "checksum": "7f214979a68c4d3129fcc43d2a819c92c0df05d54be70ce24af11acd330c91c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playin/playin_sim_r1.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.960515, "relation_name": "\"mdsbox\".\"main\".\"playin_sim_r1\"", "raw_code": "select\n    r.scenario_id,\n    s.game_id,\n    ev.conf as conf,\n    ev.winning_team as visiting_team,\n    ev.elo_rating as visiting_team_elo_rating,\n    eh.winning_team as home_team,\n    eh.elo_rating as home_team_elo_rating,\n    {{ elo_calc(\"EH.elo_rating\", \"EV.elo_rating\", var(\"nba_elo_offset\")) }}\n    as home_team_win_probability,\n    r.rand_result,\n    case\n        when\n            {{ elo_calc(\"EH.elo_rating\", \"EV.elo_rating\", var(\"nba_elo_offset\")) }}\n            >= r.rand_result\n        then eh.winning_team\n        else ev.winning_team\n    end as winning_team\nfrom {{ ref(\"nba_schedules\") }} s\nleft join {{ ref(\"nba_random_num_gen\") }} r on r.game_id = s.game_id\nleft join\n    {{ ref(\"reg_season_end\") }} eh\n    on s.home_team = eh.seed\n    and r.scenario_id = eh.scenario_id\nleft join\n    {{ ref(\"reg_season_end\") }} ev\n    on s.visiting_team = ev.seed\n    and r.scenario_id = ev.scenario_id\nwhere s.type = 'playin_r1'", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "reg_season_end", "package": null, "version": null}, {"name": "reg_season_end", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc"], "nodes": ["model.sports_sims.nba_schedules", "model.sports_sims.nba_random_num_gen", "model.sports_sims.reg_season_end"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playin/playin_sim_r1.sql", "compiled": true, "compiled_code": "select\n    r.scenario_id,\n    s.game_id,\n    ev.conf as conf,\n    ev.winning_team as visiting_team,\n    ev.elo_rating as visiting_team_elo_rating,\n    eh.winning_team as home_team,\n    eh.elo_rating as home_team_elo_rating,\n    ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000\n    as home_team_win_probability,\n    r.rand_result,\n    case\n        when\n            ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000\n            >= r.rand_result\n        then eh.winning_team\n        else ev.winning_team\n    end as winning_team\nfrom \"mdsbox\".\"main\".\"nba_schedules\" s\nleft join \"mdsbox\".\"main\".\"nba_random_num_gen\" r on r.game_id = s.game_id\nleft join\n    \"mdsbox\".\"main\".\"reg_season_end\" eh\n    on s.home_team = eh.seed\n    and r.scenario_id = eh.scenario_id\nleft join\n    \"mdsbox\".\"main\".\"reg_season_end\" ev\n    on s.visiting_team = ev.seed\n    and r.scenario_id = ev.scenario_id\nwhere s.type = 'playin_r1'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.playin_sim_r2": {"database": "mdsbox", "schema": "main", "name": "playin_sim_r2", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playin/playin_sim_r2.sql", "original_file_path": "models/nba/simulator/playin/playin_sim_r2.sql", "unique_id": "model.sports_sims.playin_sim_r2", "fqn": ["sports_sims", "nba", "simulator", "playin", "playin_sim_r2"], "alias": "playin_sim_r2", "checksum": {"name": "sha256", "checksum": "d62c384a128f0f1f91ea02d88838f504caddb7bbcda12030925e2dafe6882abf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playin/playin_sim_r2.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.962521, "relation_name": "\"mdsbox\".\"main\".\"playin_sim_r2\"", "raw_code": "select\n    r.scenario_id,\n    s.game_id,\n    s.home_team[7:] as home_team_id,\n    s.visiting_team[8:] as visiting_team_id,\n    ev.conf as conf,\n    ev.remaining_team as visiting_team,\n    ev.winning_team_elo_rating as visiting_team_elo_rating,\n    eh.remaining_team as home_team,\n    eh.losing_team_elo_rating as home_team_elo_rating,\n    {{\n        elo_calc(\n            \"EH.losing_team_elo_rating\",\n            \"EV.winning_team_elo_rating\",\n            var(\"nba_elo_offset\"),\n        )\n    }} as home_team_win_probability,\n    r.rand_result,\n    case\n        when\n            {{\n                elo_calc(\n                    \"EH.losing_team_elo_rating\",\n                    \"EV.winning_team_elo_rating\",\n                    var(\"nba_elo_offset\"),\n                )\n            }} >= r.rand_result\n        then eh.remaining_team\n        else ev.remaining_team\n    end as winning_team\nfrom {{ ref(\"nba_schedules\") }} s\nleft join {{ ref(\"nba_random_num_gen\") }} r on r.game_id = s.game_id\nleft join\n    {{ ref(\"playin_sim_r1_end\") }} eh\n    on r.scenario_id = eh.scenario_id\n    and eh.game_id = s.home_team[7:]\nleft join\n    {{ ref(\"playin_sim_r1_end\") }} ev\n    on r.scenario_id = ev.scenario_id\n    and ev.game_id = s.visiting_team[8:]\nwhere s.type = 'playin_r2'", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "playin_sim_r1_end", "package": null, "version": null}, {"name": "playin_sim_r1_end", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc"], "nodes": ["model.sports_sims.nba_schedules", "model.sports_sims.nba_random_num_gen", "model.sports_sims.playin_sim_r1_end"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playin/playin_sim_r2.sql", "compiled": true, "compiled_code": "select\n    r.scenario_id,\n    s.game_id,\n    s.home_team[7:] as home_team_id,\n    s.visiting_team[8:] as visiting_team_id,\n    ev.conf as conf,\n    ev.remaining_team as visiting_team,\n    ev.winning_team_elo_rating as visiting_team_elo_rating,\n    eh.remaining_team as home_team,\n    eh.losing_team_elo_rating as home_team_elo_rating,\n    ( 1 - (1 / (10 ^ (-( EV.winning_team_elo_rating - EH.losing_team_elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n    r.rand_result,\n    case\n        when\n            ( 1 - (1 / (10 ^ (-( EV.winning_team_elo_rating - EH.losing_team_elo_rating - 100)::real/400)+1))) * 10000 >= r.rand_result\n        then eh.remaining_team\n        else ev.remaining_team\n    end as winning_team\nfrom \"mdsbox\".\"main\".\"nba_schedules\" s\nleft join \"mdsbox\".\"main\".\"nba_random_num_gen\" r on r.game_id = s.game_id\nleft join\n    \"mdsbox\".\"main\".\"playin_sim_r1_end\" eh\n    on r.scenario_id = eh.scenario_id\n    and eh.game_id = s.home_team[7:]\nleft join\n    \"mdsbox\".\"main\".\"playin_sim_r1_end\" ev\n    on r.scenario_id = ev.scenario_id\n    and ev.game_id = s.visiting_team[8:]\nwhere s.type = 'playin_r2'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.playin_sim_r2_end": {"database": "mdsbox", "schema": "main", "name": "playin_sim_r2_end", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playin/playin_sim_r2_end.sql", "original_file_path": "models/nba/simulator/playin/playin_sim_r2_end.sql", "unique_id": "model.sports_sims.playin_sim_r2_end", "fqn": ["sports_sims", "nba", "simulator", "playin", "playin_sim_r2_end"], "alias": "playin_sim_r2_end", "checksum": {"name": "sha256", "checksum": "4defbbe4d14a354b1b32157a5c5eb2faa36946155ab174dbb60810761ed807ab"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playin/playin_sim_r2_end.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.964572, "relation_name": "\"mdsbox\".\"main\".\"playin_sim_r2_end\"", "raw_code": "select\n    p1.scenario_id,\n    p1.conf,\n    p1.winning_team,\n    p1.conf || '-7' as seed,\n    p1.winning_team_elo_rating\nfrom {{ ref(\"playin_sim_r1_end\") }} p1\nwhere p1.result = 'winner advance'\nunion all\nselect\n    p2.scenario_id,\n    p2.conf as conf,\n    p2.winning_team,\n    p2.conf || '-8' as seed,\n    case\n        when p2.winning_team = p2.home_team\n        then p2.home_team_elo_rating\n        else p2.visiting_team_elo_rating\n    end as elo_rating\nfrom {{ ref(\"playin_sim_r2\") }} p2", "language": "sql", "refs": [{"name": "playin_sim_r1_end", "package": null, "version": null}, {"name": "playin_sim_r2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.playin_sim_r1_end", "model.sports_sims.playin_sim_r2"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playin/playin_sim_r2_end.sql", "compiled": true, "compiled_code": "select\n    p1.scenario_id,\n    p1.conf,\n    p1.winning_team,\n    p1.conf || '-7' as seed,\n    p1.winning_team_elo_rating\nfrom \"mdsbox\".\"main\".\"playin_sim_r1_end\" p1\nwhere p1.result = 'winner advance'\nunion all\nselect\n    p2.scenario_id,\n    p2.conf as conf,\n    p2.winning_team,\n    p2.conf || '-8' as seed,\n    case\n        when p2.winning_team = p2.home_team\n        then p2.home_team_elo_rating\n        else p2.visiting_team_elo_rating\n    end as elo_rating\nfrom \"mdsbox\".\"main\".\"playin_sim_r2\" p2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.playin_sim_r1_end": {"database": "mdsbox", "schema": "main", "name": "playin_sim_r1_end", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playin/playin_sim_r1_end.sql", "original_file_path": "models/nba/simulator/playin/playin_sim_r1_end.sql", "unique_id": "model.sports_sims.playin_sim_r1_end", "fqn": ["sports_sims", "nba", "simulator", "playin", "playin_sim_r1_end"], "alias": "playin_sim_r1_end", "checksum": {"name": "sha256", "checksum": "fa90d0705488ede78b8e89590be053dfcbff809a32aaf96bcb48fd1a92fc402d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playin/playin_sim_r1_end.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.9653718, "relation_name": "\"mdsbox\".\"main\".\"playin_sim_r1_end\"", "raw_code": "with\n    cte_playin_details as (\n        select\n            s.scenario_id,\n            s.game_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team\n                then s.home_team_elo_rating\n                else s.visiting_team_elo_rating\n            end as winning_team_elo_rating,\n            s.conf as conf,\n            case\n                when s.winning_team = s.home_team then s.visiting_team else s.home_team\n            end as losing_team,\n            case\n                when s.winning_team = s.home_team\n                then s.visiting_team_elo_rating\n                else s.home_team_elo_rating\n            end as losing_team_elo_rating,\n            case\n                when s.game_id in (1231, 1234)\n                then 'winner advance'\n                when s.game_id in (1232, 1235)\n                then 'loser eliminated'\n            end as result\n        from {{ ref(\"playin_sim_r1\") }} s\n    )\n\nselect\n    *,\n    case\n        when game_id in (1231, 1234)\n        then losing_team\n        when game_id in (1232, 1235)\n        then winning_team\n    end as remaining_team\nfrom cte_playin_details", "language": "sql", "refs": [{"name": "playin_sim_r1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.playin_sim_r1"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playin/playin_sim_r1_end.sql", "compiled": true, "compiled_code": "with\n    cte_playin_details as (\n        select\n            s.scenario_id,\n            s.game_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team\n                then s.home_team_elo_rating\n                else s.visiting_team_elo_rating\n            end as winning_team_elo_rating,\n            s.conf as conf,\n            case\n                when s.winning_team = s.home_team then s.visiting_team else s.home_team\n            end as losing_team,\n            case\n                when s.winning_team = s.home_team\n                then s.visiting_team_elo_rating\n                else s.home_team_elo_rating\n            end as losing_team_elo_rating,\n            case\n                when s.game_id in (1231, 1234)\n                then 'winner advance'\n                when s.game_id in (1232, 1235)\n                then 'loser eliminated'\n            end as result\n        from \"mdsbox\".\"main\".\"playin_sim_r1\" s\n    )\n\nselect\n    *,\n    case\n        when game_id in (1231, 1234)\n        then losing_team\n        when game_id in (1232, 1235)\n        then winning_team\n    end as remaining_team\nfrom cte_playin_details", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.reg_season_simulator": {"database": "mdsbox", "schema": "main", "name": "reg_season_simulator", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/reg_season/reg_season_simulator.sql", "original_file_path": "models/nba/simulator/reg_season/reg_season_simulator.sql", "unique_id": "model.sports_sims.reg_season_simulator", "fqn": ["sports_sims", "nba", "simulator", "reg_season", "reg_season_simulator"], "alias": "reg_season_simulator", "checksum": {"name": "sha256", "checksum": "04e1dc8c85f8042047faabff700ecc6c0a151dc531f5d0a309980aa7be3e73d8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/reg_season/reg_season_simulator.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.9660668, "relation_name": "\"mdsbox\".\"main\".\"reg_season_simulator\"", "raw_code": "select\n    r.scenario_id,\n    s.*,\n    {{\n        elo_calc(\n            \"S.home_team_elo_rating\",\n            \"S.visiting_team_elo_rating\",\n            var(\"nba_elo_offset\"),\n        )\n    }} as home_team_win_probability,\n    r.rand_result,\n    case\n        when lr.include_actuals = true\n        then lr.winning_team_short\n        when\n            {{\n                elo_calc(\n                    \"S.home_team_elo_rating\",\n                    \"S.visiting_team_elo_rating\",\n                    var(\"nba_elo_offset\"),\n                )\n            }} >= r.rand_result\n        then s.home_team\n        else s.visiting_team\n    end as winning_team,\n    coalesce(lr.include_actuals, false) as include_actuals,\n    lr.home_team_score as actual_home_team_score,\n    lr.visiting_team_score as actual_visiting_team_score,\n    lr.margin as actual_margin\nfrom {{ ref(\"nba_schedules\") }} s\nleft join {{ ref(\"nba_random_num_gen\") }} r on r.game_id = s.game_id\nleft join {{ ref(\"nba_latest_results\") }} lr on lr.game_id = s.game_id\nwhere s.type in ('reg_season', 'tournament', 'knockout')", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc"], "nodes": ["model.sports_sims.nba_schedules", "model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/reg_season/reg_season_simulator.sql", "compiled": true, "compiled_code": "select\n    r.scenario_id,\n    s.*,\n    ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n    r.rand_result,\n    case\n        when lr.include_actuals = true\n        then lr.winning_team_short\n        when\n            ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 100)::real/400)+1))) * 10000 >= r.rand_result\n        then s.home_team\n        else s.visiting_team\n    end as winning_team,\n    coalesce(lr.include_actuals, false) as include_actuals,\n    lr.home_team_score as actual_home_team_score,\n    lr.visiting_team_score as actual_visiting_team_score,\n    lr.margin as actual_margin\nfrom \"mdsbox\".\"main\".\"nba_schedules\" s\nleft join \"mdsbox\".\"main\".\"nba_random_num_gen\" r on r.game_id = s.game_id\nleft join \"mdsbox\".\"main\".\"nba_latest_results\" lr on lr.game_id = s.game_id\nwhere s.type in ('reg_season', 'tournament', 'knockout')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.playoff_sim_r4": {"database": "mdsbox", "schema": "main", "name": "playoff_sim_r4", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/playoff_sim_r4.sql", "original_file_path": "models/nba/simulator/playoffs/playoff_sim_r4.sql", "unique_id": "model.sports_sims.playoff_sim_r4", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "playoff_sim_r4"], "alias": "playoff_sim_r4", "checksum": {"name": "sha256", "checksum": "21b98e6bec4489ec60232cd35c47cbbed3c1c09dce430a816980fe20435c3c5d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playoffs/playoff_sim_r4.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.9682088, "relation_name": "\"mdsbox\".\"main\".\"playoff_sim_r4\"", "raw_code": "with\n    cte_playoff_sim as ({{ playoff_sim(\"playoffs_r4\", \"playoff_sim_r3\") }})\n\n    {{ playoff_sim_end(\"cte_playoff_sim\") }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "playoff_sim_r3", "package": null, "version": null}, {"name": "playoff_sim_r3", "package": null, "version": null}, {"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.playoff_sim", "macro.sports_sims.playoff_sim_end"], "nodes": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.playoff_sim_r3", "model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playoffs/playoff_sim_r4.sql", "compiled": true, "compiled_code": "with\n    cte_playoff_sim as (\n-- depends-on: \"mdsbox\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"mdsbox\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"mdsbox\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r3\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r3\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r4'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id)\n\n    SELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"mdsbox\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.playoff_sim_r2": {"database": "mdsbox", "schema": "main", "name": "playoff_sim_r2", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/playoff_sim_r2.sql", "original_file_path": "models/nba/simulator/playoffs/playoff_sim_r2.sql", "unique_id": "model.sports_sims.playoff_sim_r2", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "playoff_sim_r2"], "alias": "playoff_sim_r2", "checksum": {"name": "sha256", "checksum": "eeb4471676db3fc4b2d6d7370ad5932ce3891999e9690f29889eb941b248be34"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playoffs/playoff_sim_r2.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.9711092, "relation_name": "\"mdsbox\".\"main\".\"playoff_sim_r2\"", "raw_code": "with\n    cte_playoff_sim as ({{ playoff_sim(\"playoffs_r2\", \"playoff_sim_r1\") }})\n\n    {{ playoff_sim_end(\"cte_playoff_sim\") }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "playoff_sim_r1", "package": null, "version": null}, {"name": "playoff_sim_r1", "package": null, "version": null}, {"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.playoff_sim", "macro.sports_sims.playoff_sim_end"], "nodes": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.playoff_sim_r1", "model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playoffs/playoff_sim_r2.sql", "compiled": true, "compiled_code": "with\n    cte_playoff_sim as (\n-- depends-on: \"mdsbox\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"mdsbox\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"mdsbox\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r1\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r1\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r2'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id)\n\n    SELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"mdsbox\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.playoff_sim_r3": {"database": "mdsbox", "schema": "main", "name": "playoff_sim_r3", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/playoff_sim_r3.sql", "original_file_path": "models/nba/simulator/playoffs/playoff_sim_r3.sql", "unique_id": "model.sports_sims.playoff_sim_r3", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "playoff_sim_r3"], "alias": "playoff_sim_r3", "checksum": {"name": "sha256", "checksum": "30d5be6169644113104b99dd123e463dde2288bd3385879e4443301c1cea96b0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playoffs/playoff_sim_r3.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.972662, "relation_name": "\"mdsbox\".\"main\".\"playoff_sim_r3\"", "raw_code": "with\n    cte_playoff_sim as ({{ playoff_sim(\"playoffs_r3\", \"playoff_sim_r2\") }})\n\n    {{ playoff_sim_end(\"cte_playoff_sim\") }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "playoff_sim_r2", "package": null, "version": null}, {"name": "playoff_sim_r2", "package": null, "version": null}, {"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.playoff_sim", "macro.sports_sims.playoff_sim_end"], "nodes": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.playoff_sim_r2", "model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playoffs/playoff_sim_r3.sql", "compiled": true, "compiled_code": "with\n    cte_playoff_sim as (\n-- depends-on: \"mdsbox\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"mdsbox\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"mdsbox\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r2\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r2\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r3'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id)\n\n    SELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"mdsbox\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.playoff_sim_r1": {"database": "mdsbox", "schema": "main", "name": "playoff_sim_r1", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/playoff_sim_r1.sql", "original_file_path": "models/nba/simulator/playoffs/playoff_sim_r1.sql", "unique_id": "model.sports_sims.playoff_sim_r1", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "playoff_sim_r1"], "alias": "playoff_sim_r1", "checksum": {"name": "sha256", "checksum": "c6dab9bf2407af574711015457455fe091cdc0c24c057284772a90a95e9f8f5b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playoffs/playoff_sim_r1.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.974943, "relation_name": "\"mdsbox\".\"main\".\"playoff_sim_r1\"", "raw_code": "with\n    cte_playoff_sim as ({{ playoff_sim(\"playoffs_r1\", \"initialize_seeding\") }})\n\n    {{ playoff_sim_end(\"cte_playoff_sim\") }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "initialize_seeding", "package": null, "version": null}, {"name": "initialize_seeding", "package": null, "version": null}, {"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.playoff_sim", "macro.sports_sims.playoff_sim_end"], "nodes": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.initialize_seeding", "model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playoffs/playoff_sim_r1.sql", "compiled": true, "compiled_code": "with\n    cte_playoff_sim as (\n-- depends-on: \"mdsbox\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"mdsbox\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"mdsbox\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"initialize_seeding\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"mdsbox\".\"main\".\"initialize_seeding\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r1'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id)\n\n    SELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"mdsbox\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.initialize_seeding": {"database": "mdsbox", "schema": "main", "name": "initialize_seeding", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/initialize_seeding.sql", "original_file_path": "models/nba/simulator/playoffs/initialize_seeding.sql", "unique_id": "model.sports_sims.initialize_seeding", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "initialize_seeding"], "alias": "initialize_seeding", "checksum": {"name": "sha256", "checksum": "1a24bc59a1b7db7c6f6a566055788e6ab78aec1d7b5c44631009162876427755"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/simulator/playoffs/initialize_seeding.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.976565, "relation_name": "\"mdsbox\".\"main\".\"initialize_seeding\"", "raw_code": "with\n    cte_teams as (\n        select scenario_id, conf, winning_team, seed, elo_rating\n        from {{ ref(\"reg_season_end\") }}\n        where season_rank < 7\n        union all\n        select *\n        from {{ ref(\"playin_sim_r2_end\") }}\n    )\n\nselect t.*, {{ var(\"sim_start_game_id\") }} as sim_start_game_id\nfrom cte_teams t", "language": "sql", "refs": [{"name": "reg_season_end", "package": null, "version": null}, {"name": "playin_sim_r2_end", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_end", "model.sports_sims.playin_sim_r2_end"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/simulator/playoffs/initialize_seeding.sql", "compiled": true, "compiled_code": "with\n    cte_teams as (\n        select scenario_id, conf, winning_team, seed, elo_rating\n        from \"mdsbox\".\"main\".\"reg_season_end\"\n        where season_rank < 7\n        union all\n        select *\n        from \"mdsbox\".\"main\".\"playin_sim_r2_end\"\n    )\n\nselect t.*, 0 as sim_start_game_id\nfrom cte_teams t", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_raw_results": {"database": "mdsbox", "schema": "main", "name": "nba_raw_results", "resource_type": "model", "package_name": "sports_sims", "path": "nba/raw/nba_raw_results.sql", "original_file_path": "models/nba/raw/nba_raw_results.sql", "unique_id": "model.sports_sims.nba_raw_results", "fqn": ["sports_sims", "nba", "raw", "nba_raw_results"], "alias": "nba_raw_results", "checksum": {"name": "sha256", "checksum": "9306f3e2ff90062e2753b66a6338d6086a439ba661639463ffc0eeaddeb58943"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/raw/nba_raw_results.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344404.978107, "relation_name": "\"mdsbox\".\"main\".\"nba_raw_results\"", "raw_code": "with\n    cte_base as (select * from {{ source(\"nba_dlt\", \"games\") }}),\n    cte_seed as (select * from {{ source(\"nba\", \"nba_results\") }})\nselect\n    coalesce(a.date, strptime(b.\"Date\", '%a %b %-d %Y'))::date as \"date\",\n    b.\"Start (ET)\" as \"Start (ET)\",\n    coalesce(away.team_long, b.\"Visitor/Neutral\") as \"VisTm\",\n    coalesce(a.away_points, b.pts)::int as visiting_team_score,\n    coalesce(home.team_long, b.\"Home/Neutral\") as \"HomeTm\",\n    coalesce(a.home_points, b.pts_1)::int as home_team_score,\n    b.\"Attend.\" as \"Attend.\",\n    b.arena as arena,\n    b.notes as notes,\n    case\n        when visiting_team_score > home_team_score then vistm else hometm\n    end as winner,\n    case when visiting_team_score > home_team_score then hometm else vistm end as loser,\n    case\n        when visiting_team_score > home_team_score\n        then visiting_team_score\n        else home_team_score\n    end as winner_pts,\n    case\n        when visiting_team_score > home_team_score\n        then home_team_score\n        else visiting_team_score\n    end as loser_pts\nfrom cte_base a\nleft join\n    {{ ref(\"nba_raw_team_ratings\") }} home on home.alt_key = a.home_team_abbreviation\nleft join\n    {{ ref(\"nba_raw_team_ratings\") }} away on away.alt_key = a.away_team_abbreviation\nfull outer join\n    cte_seed b\n    on strptime(b.\"Date\", '%a %b %-d %Y')::date = a.date\n    and b.\"Home/Neutral\" = home.team_long\nwhere a.date <= '{{ var( 'nba_start_date' ) }}'", "language": "sql", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}, {"name": "nba_raw_team_ratings", "package": null, "version": null}], "sources": [["nba_dlt", "games"], ["nba", "nba_results"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba_dlt.games", "source.sports_sims.nba.nba_results", "model.sports_sims.nba_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/raw/nba_raw_results.sql", "compiled": true, "compiled_code": "with\n    cte_base as (select * from '../dlt/data/nba/nba_data/games/*.csv'),\n    cte_seed as (select * from '../data/nba/nba_results.csv')\nselect\n    coalesce(a.date, strptime(b.\"Date\", '%a %b %-d %Y'))::date as \"date\",\n    b.\"Start (ET)\" as \"Start (ET)\",\n    coalesce(away.team_long, b.\"Visitor/Neutral\") as \"VisTm\",\n    coalesce(a.away_points, b.pts)::int as visiting_team_score,\n    coalesce(home.team_long, b.\"Home/Neutral\") as \"HomeTm\",\n    coalesce(a.home_points, b.pts_1)::int as home_team_score,\n    b.\"Attend.\" as \"Attend.\",\n    b.arena as arena,\n    b.notes as notes,\n    case\n        when visiting_team_score > home_team_score then vistm else hometm\n    end as winner,\n    case when visiting_team_score > home_team_score then hometm else vistm end as loser,\n    case\n        when visiting_team_score > home_team_score\n        then visiting_team_score\n        else home_team_score\n    end as winner_pts,\n    case\n        when visiting_team_score > home_team_score\n        then home_team_score\n        else visiting_team_score\n    end as loser_pts\nfrom cte_base a\nleft join\n    \"mdsbox\".\"main\".\"nba_raw_team_ratings\" home on home.alt_key = a.home_team_abbreviation\nleft join\n    \"mdsbox\".\"main\".\"nba_raw_team_ratings\" away on away.alt_key = a.away_team_abbreviation\nfull outer join\n    cte_seed b\n    on strptime(b.\"Date\", '%a %b %-d %Y')::date = a.date\n    and b.\"Home/Neutral\" = home.team_long\nwhere a.date <= '2025-04-15'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_raw_schedule": {"database": "mdsbox", "schema": "main", "name": "nba_raw_schedule", "resource_type": "model", "package_name": "sports_sims", "path": "nba/raw/nba_raw_schedule.sql", "original_file_path": "models/nba/raw/nba_raw_schedule.sql", "unique_id": "model.sports_sims.nba_raw_schedule", "fqn": ["sports_sims", "nba", "raw", "nba_raw_schedule"], "alias": "nba_raw_schedule", "checksum": {"name": "sha256", "checksum": "211e8e6e6397547ff28f4f1e43b83e0f71bb38e33aa91223f933c6511e41583b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/raw/nba_raw_schedule.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.181958, "relation_name": "\"mdsbox\".\"main\".\"nba_raw_schedule\"", "raw_code": "select\n    id,\n    type,\n    strptime(\"Year\" || \"Date\", '%Y %b %-d')::date as \"date\",\n    \"Start (ET)\",\n    \"Visitor/Neutral\" as \"VisTm\",\n    \"Home/Neutral\" as \"HomeTm\",\n    \"Attend.\",\n    arena,\n    notes,\n    series_id\nfrom {{ source(\"nba\", \"nba_schedule\") }}\nwhere arena is null -- make sure playoffs are included\n    or arena <> 'Placeholder' -- removing IST games w/o teams & arena", "language": "sql", "refs": [], "sources": [["nba", "nba_schedule"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba.nba_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/raw/nba_raw_schedule.sql", "compiled": true, "compiled_code": "select\n    id,\n    type,\n    strptime(\"Year\" || \"Date\", '%Y %b %-d')::date as \"date\",\n    \"Start (ET)\",\n    \"Visitor/Neutral\" as \"VisTm\",\n    \"Home/Neutral\" as \"HomeTm\",\n    \"Attend.\",\n    arena,\n    notes,\n    series_id\nfrom '../data/nba/nba_schedule.csv'\nwhere arena is null -- make sure playoffs are included\n    or arena <> 'Placeholder' -- removing IST games w/o teams & arena", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_raw_team_ratings": {"database": "mdsbox", "schema": "main", "name": "nba_raw_team_ratings", "resource_type": "model", "package_name": "sports_sims", "path": "nba/raw/nba_raw_team_ratings.sql", "original_file_path": "models/nba/raw/nba_raw_team_ratings.sql", "unique_id": "model.sports_sims.nba_raw_team_ratings", "fqn": ["sports_sims", "nba", "raw", "nba_raw_team_ratings"], "alias": "nba_raw_team_ratings", "checksum": {"name": "sha256", "checksum": "3da8bfc5dedf43918a1a27faccb36ac0cbca001f8b8a9642cea17fbc479155c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/raw/nba_raw_team_ratings.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.182113, "relation_name": "\"mdsbox\".\"main\".\"nba_raw_team_ratings\"", "raw_code": "select * from {{ source(\"nba\", \"nba_team_ratings\") }}", "language": "sql", "refs": [], "sources": [["nba", "nba_team_ratings"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba.nba_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/raw/nba_raw_team_ratings.sql", "compiled": true, "compiled_code": "select * from '../data/nba/nba_team_ratings.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_raw_xf_series_to_seed": {"database": "mdsbox", "schema": "main", "name": "nba_raw_xf_series_to_seed", "resource_type": "model", "package_name": "sports_sims", "path": "nba/raw/nba_raw_xf_series_to_seed.sql", "original_file_path": "models/nba/raw/nba_raw_xf_series_to_seed.sql", "unique_id": "model.sports_sims.nba_raw_xf_series_to_seed", "fqn": ["sports_sims", "nba", "raw", "nba_raw_xf_series_to_seed"], "alias": "nba_raw_xf_series_to_seed", "checksum": {"name": "sha256", "checksum": "45c8b0161d0d6b491916fe092256d864534fe2caf3f574a5769927d2eb85747b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "../docs/run/sports_sims/models/nba/raw/nba_raw_xf_series_to_seed.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.1822631, "relation_name": "\"mdsbox\".\"main\".\"nba_raw_xf_series_to_seed\"", "raw_code": "select * from {{ source(\"nba\", \"xf_series_to_seed\") }} group by all", "language": "sql", "refs": [], "sources": [["nba", "xf_series_to_seed"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba.xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/raw/nba_raw_xf_series_to_seed.sql", "compiled": true, "compiled_code": "select * from '../data/nba/xf_series_to_seed.csv' group by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nfl_schedules": {"database": "mdsbox", "schema": "main", "name": "nfl_schedules", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_schedules.sql", "original_file_path": "models/nfl/prep/nfl_schedules.sql", "unique_id": "model.sports_sims.nfl_schedules", "fqn": ["sports_sims", "nfl", "prep", "nfl_schedules"], "alias": "nfl_schedules", "checksum": {"name": "sha256", "checksum": "5d201f91563fdafb4560ca36300e1f8586dea5b89a638ef3a946cd2bf0438517"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "visiting_conf": {"name": "visiting_conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "visiting_team_elo_rating": {"name": "visiting_team_elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "home_conf": {"name": "home_conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "home_team_elo_rating": {"name": "home_team_elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_schedules.sql", "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1756344405.1028621, "relation_name": "\"mdsbox\".\"main\".\"nfl_schedules\"", "raw_code": "select\n    s.id as game_id,\n    s.week as week_number,\n    'reg_season' as type,\n    0 as series_id,\n    v.conf as visiting_conf,\n    v.team as visiting_team,\n    coalesce(r.visiting_team_elo_rating, v.elo_rating::int) as visiting_team_elo_rating,\n    h.conf as home_conf,\n    h.team as home_team,\n    coalesce(r.home_team_elo_rating, h.elo_rating::int) as home_team_elo_rating,\n    s.neutral as neutral_site,\n    case when s.neutral = 0 then {{ var(\"nfl_elo_offset\") }} else 0 end as game_site_adjustment\nfrom {{ ref(\"nfl_raw_schedule\") }} as s\nleft join {{ ref(\"nfl_ratings\") }} v on v.team = s.vistm\nleft join {{ ref(\"nfl_ratings\") }} h on h.team = s.hometm\nleft join {{ ref(\"nfl_elo_rollforward\") }} r on r.game_id = s.id\ngroup by\n    all\n\n    /* -- EXCLUDING UNTIL I GET A PLAYOFFS MODULE FIGURED OUT\nUNION ALL\nSELECT\n    *\nFROM {{ ref( 'nba_post_season_schedule' ) }}\n*/", "language": "sql", "refs": [{"name": "nfl_raw_schedule", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}, {"name": "nfl_elo_rollforward", "package": null, "version": null}, {"name": "nba_post_season_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_raw_schedule", "model.sports_sims.nfl_ratings", "model.sports_sims.nfl_elo_rollforward", "model.sports_sims.nba_post_season_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_schedules.sql", "compiled": true, "compiled_code": "select\n    s.id as game_id,\n    s.week as week_number,\n    'reg_season' as type,\n    0 as series_id,\n    v.conf as visiting_conf,\n    v.team as visiting_team,\n    coalesce(r.visiting_team_elo_rating, v.elo_rating::int) as visiting_team_elo_rating,\n    h.conf as home_conf,\n    h.team as home_team,\n    coalesce(r.home_team_elo_rating, h.elo_rating::int) as home_team_elo_rating,\n    s.neutral as neutral_site,\n    case when s.neutral = 0 then 52 else 0 end as game_site_adjustment\nfrom \"mdsbox\".\"main\".\"nfl_raw_schedule\" as s\nleft join \"mdsbox\".\"main\".\"nfl_ratings\" v on v.team = s.vistm\nleft join \"mdsbox\".\"main\".\"nfl_ratings\" h on h.team = s.hometm\nleft join \"mdsbox\".\"main\".\"nfl_elo_rollforward\" r on r.game_id = s.id\ngroup by\n    all\n\n    /* -- EXCLUDING UNTIL I GET A PLAYOFFS MODULE FIGURED OUT\nUNION ALL\nSELECT\n    *\nFROM \"mdsbox\".\"main\".\"nba_post_season_schedule\"\n*/", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["game_id"], "time_spine": null}, "model.sports_sims.nfl_vegas_wins": {"database": "mdsbox", "schema": "main", "name": "nfl_vegas_wins", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_vegas_wins.sql", "original_file_path": "models/nfl/prep/nfl_vegas_wins.sql", "unique_id": "model.sports_sims.nfl_vegas_wins", "fqn": ["sports_sims", "nfl", "prep", "nfl_vegas_wins"], "alias": "nfl_vegas_wins", "checksum": {"name": "sha256", "checksum": "8552825f10c6598785e1e1202a7eede9f76439c46b4ec34dd2a41940c156296a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "win_total": {"name": "win_total", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_vegas_wins.sql", "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1756344405.104136, "relation_name": "\"mdsbox\".\"main\".\"nfl_vegas_wins\"", "raw_code": "select team, win_total from {{ ref(\"nfl_ratings\") }} group by all", "language": "sql", "refs": [{"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_vegas_wins.sql", "compiled": true, "compiled_code": "select team, win_total from \"mdsbox\".\"main\".\"nfl_ratings\" group by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["team"], "time_spine": null}, "model.sports_sims.nfl_ratings": {"database": "mdsbox", "schema": "main", "name": "nfl_ratings", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_ratings.sql", "original_file_path": "models/nfl/prep/nfl_ratings.sql", "unique_id": "model.sports_sims.nfl_ratings", "fqn": ["sports_sims", "nfl", "prep", "nfl_ratings"], "alias": "nfl_ratings", "checksum": {"name": "sha256", "checksum": "fc498fa4756507d851a40af4ddaf0b157c59a5c6c167acbf3890200043c0bbb4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "conf": {"name": "conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "elo_rating": {"name": "elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_ratings.sql", "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1756344405.103394, "relation_name": "\"mdsbox\".\"main\".\"nfl_ratings\"", "raw_code": "select\n    orig.team,\n    orig.conf,\n    orig.division,\n    orig.team_short,\n    case\n        when latest.latest_ratings = true and latest.elo_rating is not null\n        then latest.elo_rating\n        else orig.elo_rating\n    end as elo_rating,\n    orig.elo_rating as original_rating,\n    orig.win_total\nfrom {{ ref(\"nfl_raw_team_ratings\") }} orig\nleft join {{ ref(\"nfl_latest_elo\") }} latest on latest.team = orig.team\ngroup by all", "language": "sql", "refs": [{"name": "nfl_raw_team_ratings", "package": null, "version": null}, {"name": "nfl_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_raw_team_ratings", "model.sports_sims.nfl_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_ratings.sql", "compiled": true, "compiled_code": "select\n    orig.team,\n    orig.conf,\n    orig.division,\n    orig.team_short,\n    case\n        when latest.latest_ratings = true and latest.elo_rating is not null\n        then latest.elo_rating\n        else orig.elo_rating\n    end as elo_rating,\n    orig.elo_rating as original_rating,\n    orig.win_total\nfrom \"mdsbox\".\"main\".\"nfl_raw_team_ratings\" orig\nleft join \"mdsbox\".\"main\".\"nfl_latest_elo\" latest on latest.team = orig.team\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["team"], "time_spine": null}, "model.sports_sims.nfl_random_num_gen": {"database": "mdsbox", "schema": "main", "name": "nfl_random_num_gen", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_random_num_gen.sql", "original_file_path": "models/nfl/prep/nfl_random_num_gen.sql", "unique_id": "model.sports_sims.nfl_random_num_gen", "fqn": ["sports_sims", "nfl", "prep", "nfl_random_num_gen"], "alias": "nfl_random_num_gen", "checksum": {"name": "sha256", "checksum": "2f2d4abaabb2fcc0ab298a30ef9f0128ee6eca4ecff4b6c1906c509e6b871772"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_random_num_gen.sql", "unrendered_config": {"tags": "nfl", "materialized": "table"}, "created_at": 1756344405.10355, "relation_name": "\"mdsbox\".\"main\".\"nfl_random_num_gen\"", "raw_code": "{{ config(materialized=\"table\") }}\n\nwith\n    cte_scenario_gen as (\n        select i.generate_series as scenario_id\n        from generate_series(1, {{ var(\"scenarios\") }}) as i\n    )\nselect\n    i.scenario_id,\n    s.game_id,\n    (random() * 10000)::smallint as rand_result,\n    {{ var(\"sim_start_game_id\") }} as sim_start_game_id\nfrom cte_scenario_gen as i\ncross join\n    {{ ref(\"nfl_schedules\") }} as s\n    -- LEFT JOIN {{ ref( 'nfl_latest_results' )}} AS R ON R.game_id = S.game_id\n    -- WHERE R.game_id IS NULL OR (R.game_id IS NOT NULL AND i.scenario_id = 1)", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}, {"name": "nfl_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_schedules", "model.sports_sims.nfl_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_random_num_gen.sql", "compiled": true, "compiled_code": "\n\nwith\n    cte_scenario_gen as (\n        select i.generate_series as scenario_id\n        from generate_series(1, 10000) as i\n    )\nselect\n    i.scenario_id,\n    s.game_id,\n    (random() * 10000)::smallint as rand_result,\n    0 as sim_start_game_id\nfrom cte_scenario_gen as i\ncross join\n    \"mdsbox\".\"main\".\"nfl_schedules\" as s\n    -- LEFT JOIN \"mdsbox\".\"main\".\"nfl_latest_results\" AS R ON R.game_id = S.game_id\n    -- WHERE R.game_id IS NULL OR (R.game_id IS NOT NULL AND i.scenario_id = 1)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nfl_latest_results": {"database": "mdsbox", "schema": "main", "name": "nfl_latest_results", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_latest_results.sql", "original_file_path": "models/nfl/prep/nfl_latest_results.sql", "unique_id": "model.sports_sims.nfl_latest_results", "fqn": ["sports_sims", "nfl", "prep", "nfl_latest_results"], "alias": "nfl_latest_results", "checksum": {"name": "sha256", "checksum": "be9ab33417c46e4e85a7ad33abb024e4358cc766586a35717f00628d9e3ab2d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_latest_results.sql", "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1756344404.987129, "relation_name": "\"mdsbox\".\"main\".\"nfl_latest_results\"", "raw_code": "with\n    cte_inner as (\n        select\n            s.id as game_id,\n            s.week as week_number,\n            s.hometm as home_team,\n            case\n                when s.hometm = r.winner then r.winner_pts else r.loser_pts\n            end as home_team_score,\n            s.vistm as visiting_team,\n            case\n                when s.vistm = r.winner then r.winner_pts else r.loser_pts\n            end as visiting_team_score,\n            r.winner as winning_team,\n            r.loser as losing_team,\n            {{ var(\"include_actuals\") }} as include_actuals,\n            s.neutral as neutral_site,\n            r.winner_pts - r.loser_pts as margin\n        from {{ ref(\"nfl_raw_schedule\") }} s\n        left join\n            {{ ref(\"nfl_raw_results\") }} r\n            on r.wk = s.week\n            and (s.vistm = r.winner or s.vistm = r.loser)\n        where home_team_score is not null\n        group by all\n    ),\n    cte_outer as (\n        select\n            *,\n            case\n                when visiting_team_score > home_team_score\n                then 1\n                when visiting_team_score = home_team_score\n                then 0.5\n                else 0\n            end as game_result,\n            abs(visiting_team_score - home_team_score) as margin\n        from cte_inner\n    )\nselect\n    *\nfrom cte_outer", "language": "sql", "refs": [{"name": "nfl_raw_schedule", "package": null, "version": null}, {"name": "nfl_raw_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_raw_schedule", "model.sports_sims.nfl_raw_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_latest_results.sql", "compiled": true, "compiled_code": "with\n    cte_inner as (\n        select\n            s.id as game_id,\n            s.week as week_number,\n            s.hometm as home_team,\n            case\n                when s.hometm = r.winner then r.winner_pts else r.loser_pts\n            end as home_team_score,\n            s.vistm as visiting_team,\n            case\n                when s.vistm = r.winner then r.winner_pts else r.loser_pts\n            end as visiting_team_score,\n            r.winner as winning_team,\n            r.loser as losing_team,\n            True as include_actuals,\n            s.neutral as neutral_site,\n            r.winner_pts - r.loser_pts as margin\n        from \"mdsbox\".\"main\".\"nfl_raw_schedule\" s\n        left join\n            \"mdsbox\".\"main\".\"nfl_raw_results\" r\n            on r.wk = s.week\n            and (s.vistm = r.winner or s.vistm = r.loser)\n        where home_team_score is not null\n        group by all\n    ),\n    cte_outer as (\n        select\n            *,\n            case\n                when visiting_team_score > home_team_score\n                then 1\n                when visiting_team_score = home_team_score\n                then 0.5\n                else 0\n            end as game_result,\n            abs(visiting_team_score - home_team_score) as margin\n        from cte_inner\n    )\nselect\n    *\nfrom cte_outer", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nfl_teams": {"database": "mdsbox", "schema": "main", "name": "nfl_teams", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_teams.sql", "original_file_path": "models/nfl/prep/nfl_teams.sql", "unique_id": "model.sports_sims.nfl_teams", "fqn": ["sports_sims", "nfl", "prep", "nfl_teams"], "alias": "nfl_teams", "checksum": {"name": "sha256", "checksum": "e79e10f3ecc89222ec4c3450d01f2c6234b6c719fba52ff9cd6b4748715575f4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {"team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_teams.sql", "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1756344405.103818, "relation_name": "\"mdsbox\".\"main\".\"nfl_teams\"", "raw_code": "select s.vistm as team_long,\n-- R.team\nfrom {{ ref(\"nfl_raw_schedule\") }} s\n-- LEFT JOIN {{ ref( 'nfl_ratings' ) }} AS R ON R.team = S.VisTm\n-- WHERE R.team IS NOT NULL\ngroup by all", "language": "sql", "refs": [{"name": "nfl_raw_schedule", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_raw_schedule", "model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_teams.sql", "compiled": true, "compiled_code": "select s.vistm as team_long,\n-- R.team\nfrom \"mdsbox\".\"main\".\"nfl_raw_schedule\" s\n-- LEFT JOIN \"mdsbox\".\"main\".\"nfl_ratings\" AS R ON R.team = S.VisTm\n-- WHERE R.team IS NOT NULL\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["team_long"], "time_spine": null}, "model.sports_sims.nfl_reg_season_actuals": {"database": "mdsbox", "schema": "main", "name": "nfl_reg_season_actuals", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_reg_season_actuals.sql", "original_file_path": "models/nfl/prep/nfl_reg_season_actuals.sql", "unique_id": "model.sports_sims.nfl_reg_season_actuals", "fqn": ["sports_sims", "nfl", "prep", "nfl_reg_season_actuals"], "alias": "nfl_reg_season_actuals", "checksum": {"name": "sha256", "checksum": "c5cce89ae553d39af9ab3184aa882ec05ac052d2798eac1af483813cb5fbec1b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_reg_season_actuals.sql", "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1756344404.989432, "relation_name": "\"mdsbox\".\"main\".\"nfl_reg_season_actuals\"", "raw_code": "with\n    cte_wins as (\n        select winning_team, count(*) as wins\n        from {{ ref(\"nfl_latest_results\") }}\n        group by all\n    ),\n\n    cte_losses as (\n        select losing_team, count(*) as losses\n        from {{ ref(\"nfl_latest_results\") }}\n        group by all\n    )\n\nselect t.team_long as team, coalesce(w.wins, 0) as wins, coalesce(l.losses, 0) as losses\nfrom {{ ref(\"nfl_teams\") }} t\nleft join cte_wins w on w.winning_team = t.team_long\nleft join cte_losses l on l.losing_team = t.team_long", "language": "sql", "refs": [{"name": "nfl_latest_results", "package": null, "version": null}, {"name": "nfl_latest_results", "package": null, "version": null}, {"name": "nfl_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_latest_results", "model.sports_sims.nfl_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_reg_season_actuals.sql", "compiled": true, "compiled_code": "with\n    cte_wins as (\n        select winning_team, count(*) as wins\n        from \"mdsbox\".\"main\".\"nfl_latest_results\"\n        group by all\n    ),\n\n    cte_losses as (\n        select losing_team, count(*) as losses\n        from \"mdsbox\".\"main\".\"nfl_latest_results\"\n        group by all\n    )\n\nselect t.team_long as team, coalesce(w.wins, 0) as wins, coalesce(l.losses, 0) as losses\nfrom \"mdsbox\".\"main\".\"nfl_teams\" t\nleft join cte_wins w on w.winning_team = t.team_long\nleft join cte_losses l on l.losing_team = t.team_long", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nfl_latest_elo": {"database": "mdsbox", "schema": "main", "name": "nfl_latest_elo", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_latest_elo.sql", "original_file_path": "models/nfl/prep/nfl_latest_elo.sql", "unique_id": "model.sports_sims.nfl_latest_elo", "fqn": ["sports_sims", "nfl", "prep", "nfl_latest_elo"], "alias": "nfl_latest_elo", "checksum": {"name": "sha256", "checksum": "12bf443d79b1e9f44901ccad5b9effc9429cd940f63f822c940d7f04f0944111"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_latest_elo.sql", "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1756344404.99017, "relation_name": "\"mdsbox\".\"main\".\"nfl_latest_elo\"", "raw_code": "with\n    home_rating as (\n        select\n            home_team as team,\n            max(game_id) game_id,\n            max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n        from {{ ref(\"nfl_elo_rollforward\") }}\n        group by all\n    ),\n    visiting_rating as (\n        select\n            visiting_team as team,\n            max(game_id) game_id,\n            max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n        from {{ ref(\"nfl_elo_rollforward\") }}\n        group by all\n    ),\n    union_rating as (\n        select *\n        from home_rating\n        union all\n        select *\n        from visiting_rating\n    ),\n    final_rating as (\n        select team, max_by(elo_rating, game_id) as elo_rating\n        from union_rating\n        group by all\n    )\nselect\n    o.team,\n    coalesce(f.elo_rating,o.elo_rating) as elo_rating,\n    o.elo_rating as original_rating,\n    {{ var(\"latest_ratings\") }} as latest_ratings\nfrom {{ ref(\"nfl_raw_team_ratings\") }} o\nleft join final_rating f on f.team = o.team", "language": "sql", "refs": [{"name": "nfl_elo_rollforward", "package": null, "version": null}, {"name": "nfl_elo_rollforward", "package": null, "version": null}, {"name": "nfl_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_elo_rollforward", "model.sports_sims.nfl_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_latest_elo.sql", "compiled": true, "compiled_code": "with\n    home_rating as (\n        select\n            home_team as team,\n            max(game_id) game_id,\n            max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n        from \"mdsbox\".\"main\".\"nfl_elo_rollforward\"\n        group by all\n    ),\n    visiting_rating as (\n        select\n            visiting_team as team,\n            max(game_id) game_id,\n            max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n        from \"mdsbox\".\"main\".\"nfl_elo_rollforward\"\n        group by all\n    ),\n    union_rating as (\n        select *\n        from home_rating\n        union all\n        select *\n        from visiting_rating\n    ),\n    final_rating as (\n        select team, max_by(elo_rating, game_id) as elo_rating\n        from union_rating\n        group by all\n    )\nselect\n    o.team,\n    coalesce(f.elo_rating,o.elo_rating) as elo_rating,\n    o.elo_rating as original_rating,\n    True as latest_ratings\nfrom \"mdsbox\".\"main\".\"nfl_raw_team_ratings\" o\nleft join final_rating f on f.team = o.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nfl_reg_season_predictions": {"database": "mdsbox", "schema": "main", "name": "nfl_reg_season_predictions", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/analysis/nfl_reg_season_predictions.sql", "original_file_path": "models/nfl/analysis/nfl_reg_season_predictions.sql", "unique_id": "model.sports_sims.nfl_reg_season_predictions", "fqn": ["sports_sims", "nfl", "analysis", "nfl_reg_season_predictions"], "alias": "nfl_reg_season_predictions", "checksum": {"name": "sha256", "checksum": "9a2c4037023e934d11c4b232a96ae6a9d9ffb93fb0bbad6c99f371604dc8ae5c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/analysis/nfl_reg_season_predictions.sql", "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1756344404.993597, "relation_name": "\"mdsbox\".\"main\".\"nfl_reg_season_predictions\"", "raw_code": "select\n    game_id,\n    week_number,\n    type,\n    home_team,\n    home.team_short as home_short,\n    home_team_elo_rating,\n    visiting_team,\n    visitor.team_short as vis_short,\n    visiting_team_elo_rating,\n    home_team_elo_rating - visiting_team_elo_rating as elo_diff,\n    home_team_win_probability,\n    winning_team,\n    include_actuals,\n    count(*) as occurances,\n    {{ american_odds(\"home_team_win_probability/10000\") }} as american_odds\nfrom {{ ref(\"nfl_reg_season_simulator\") }} s\nleft join {{ ref(\"nfl_ratings\") }} home on home.team = s.home_team\nleft join {{ ref(\"nfl_ratings\") }} visitor on visitor.team = s.visiting_team\ngroup by all", "language": "sql", "refs": [{"name": "nfl_reg_season_simulator", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.american_odds"], "nodes": ["model.sports_sims.nfl_reg_season_simulator", "model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/analysis/nfl_reg_season_predictions.sql", "compiled": true, "compiled_code": "select\n    game_id,\n    week_number,\n    type,\n    home_team,\n    home.team_short as home_short,\n    home_team_elo_rating,\n    visiting_team,\n    visitor.team_short as vis_short,\n    visiting_team_elo_rating,\n    home_team_elo_rating - visiting_team_elo_rating as elo_diff,\n    home_team_win_probability,\n    winning_team,\n    include_actuals,\n    count(*) as occurances,\n    CASE WHEN home_team_win_probability/10000 >= 0.5 \n        THEN '-' || ROUND( home_team_win_probability/10000 / ( 1.0 - home_team_win_probability/10000 ) * 100 )::int\n        ELSE '+' || ((( 1.0 - home_team_win_probability/10000 ) / (home_team_win_probability/10000::real ) * 100)::int)\n    END as american_odds\nfrom \"mdsbox\".\"main\".\"nfl_reg_season_simulator\" s\nleft join \"mdsbox\".\"main\".\"nfl_ratings\" home on home.team = s.home_team\nleft join \"mdsbox\".\"main\".\"nfl_ratings\" visitor on visitor.team = s.visiting_team\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nfl_reg_season_simulator": {"database": "mdsbox", "schema": "main", "name": "nfl_reg_season_simulator", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/simulator/nfl_reg_season_simulator.sql", "original_file_path": "models/nfl/simulator/nfl_reg_season_simulator.sql", "unique_id": "model.sports_sims.nfl_reg_season_simulator", "fqn": ["sports_sims", "nfl", "simulator", "nfl_reg_season_simulator"], "alias": "nfl_reg_season_simulator", "checksum": {"name": "sha256", "checksum": "565361dd4e019d596aaacf6e3b1ce51245ccc5239218ae608fe32440248d07f8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/simulator/nfl_reg_season_simulator.sql", "unrendered_config": {"tags": "nfl", "materialized": "table"}, "created_at": 1756344404.997528, "relation_name": "\"mdsbox\".\"main\".\"nfl_reg_season_simulator\"", "raw_code": "select\n    r.scenario_id,\n    s.*,\n    {{\n        elo_calc(\n            \"S.home_team_elo_rating\",\n            \"S.visiting_team_elo_rating\",\n            \"S.game_site_adjustment\"\n        )\n    }} as home_team_win_probability,\n    r.rand_result,\n    case\n        when lr.include_actuals = 'true'\n            then lr.winning_team\n        when\n            ({{\n                elo_calc(\n                    \"S.home_team_elo_rating\",\n                    \"S.visiting_team_elo_rating\",\n                    \"S.game_site_adjustment\"\n                )\n            }})::int >= r.rand_result\n        then s.home_team\n        else s.visiting_team\n    end as winning_team,\n    coalesce(lr.include_actuals, false) as include_actuals\nfrom {{ ref(\"nfl_schedules\") }} s\nleft join {{ ref(\"nfl_random_num_gen\") }} r on r.game_id = s.game_id\nleft join {{ ref(\"nfl_latest_results\") }} lr on lr.game_id = s.game_id\nwhere s.type = 'reg_season'", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}, {"name": "nfl_random_num_gen", "package": null, "version": null}, {"name": "nfl_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc"], "nodes": ["model.sports_sims.nfl_schedules", "model.sports_sims.nfl_random_num_gen", "model.sports_sims.nfl_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/simulator/nfl_reg_season_simulator.sql", "compiled": true, "compiled_code": "select\n    r.scenario_id,\n    s.*,\n    ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - S.game_site_adjustment)::real/400)+1))) * 10000 as home_team_win_probability,\n    r.rand_result,\n    case\n        when lr.include_actuals = 'true'\n            then lr.winning_team\n        when\n            (( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - S.game_site_adjustment)::real/400)+1))) * 10000)::int >= r.rand_result\n        then s.home_team\n        else s.visiting_team\n    end as winning_team,\n    coalesce(lr.include_actuals, false) as include_actuals\nfrom \"mdsbox\".\"main\".\"nfl_schedules\" s\nleft join \"mdsbox\".\"main\".\"nfl_random_num_gen\" r on r.game_id = s.game_id\nleft join \"mdsbox\".\"main\".\"nfl_latest_results\" lr on lr.game_id = s.game_id\nwhere s.type = 'reg_season'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nfl_raw_schedule": {"database": "mdsbox", "schema": "main", "name": "nfl_raw_schedule", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/raw/nfl_raw_schedule.sql", "original_file_path": "models/nfl/raw/nfl_raw_schedule.sql", "unique_id": "model.sports_sims.nfl_raw_schedule", "fqn": ["sports_sims", "nfl", "raw", "nfl_raw_schedule"], "alias": "nfl_raw_schedule", "checksum": {"name": "sha256", "checksum": "ec166260af6eb14bc2f83c1fd65eb197d2b0dbe631314e5ac254bea0ebd47d3a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/raw/nfl_raw_schedule.sql", "unrendered_config": {"tags": "nfl", "materialized": "table"}, "created_at": 1756344405.100016, "relation_name": "\"mdsbox\".\"main\".\"nfl_raw_schedule\"", "raw_code": "select * from {{ source(\"nfl\", \"nfl_schedule\") }}", "language": "sql", "refs": [], "sources": [["nfl", "nfl_schedule"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nfl.nfl_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/raw/nfl_raw_schedule.sql", "compiled": true, "compiled_code": "select * from '../data/nfl/nfl_schedule.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nfl_raw_team_ratings": {"database": "mdsbox", "schema": "main", "name": "nfl_raw_team_ratings", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/raw/nfl_raw_team_ratings.sql", "original_file_path": "models/nfl/raw/nfl_raw_team_ratings.sql", "unique_id": "model.sports_sims.nfl_raw_team_ratings", "fqn": ["sports_sims", "nfl", "raw", "nfl_raw_team_ratings"], "alias": "nfl_raw_team_ratings", "checksum": {"name": "sha256", "checksum": "faf27faae60b46a7fce1a5610895ba90e2ac91d1f0e9c346b8e50a04fdde23c4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/raw/nfl_raw_team_ratings.sql", "unrendered_config": {"tags": "nfl", "materialized": "table"}, "created_at": 1756344405.100192, "relation_name": "\"mdsbox\".\"main\".\"nfl_raw_team_ratings\"", "raw_code": "select\n    \"Team\" as team,\n    \"Team_short\" as team_short,\n    \"Win Total\" as win_total,\n    \"ELO rating\" as elo_rating,\n    \"Conf\" as conf,\n    \"Division\" as division\nfrom {{ source(\"nfl\", \"nfl_team_ratings\") }}", "language": "sql", "refs": [], "sources": [["nfl", "nfl_team_ratings"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nfl.nfl_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/raw/nfl_raw_team_ratings.sql", "compiled": true, "compiled_code": "select\n    \"Team\" as team,\n    \"Team_short\" as team_short,\n    \"Win Total\" as win_total,\n    \"ELO rating\" as elo_rating,\n    \"Conf\" as conf,\n    \"Division\" as division\nfrom '../data/nfl/nfl_team_ratings.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nfl_raw_results": {"database": "mdsbox", "schema": "main", "name": "nfl_raw_results", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/raw/nfl_raw_results.sql", "original_file_path": "models/nfl/raw/nfl_raw_results.sql", "unique_id": "model.sports_sims.nfl_raw_results", "fqn": ["sports_sims", "nfl", "raw", "nfl_raw_results"], "alias": "nfl_raw_results", "checksum": {"name": "sha256", "checksum": "d9a823e15deef40fc0ab11b5c22c7c929b3f01c53c7811e741278bbfa6254c75"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nfl_docs.yml", "build_path": "../docs/run/sports_sims/models/nfl/raw/nfl_raw_results.sql", "unrendered_config": {"tags": "nfl", "materialized": "table"}, "created_at": 1756344405.099786, "relation_name": "\"mdsbox\".\"main\".\"nfl_raw_results\"", "raw_code": "select\n    week as wk,\n    \"Winner/tie\" as winner,\n    ptsw as winner_pts,\n    \"Loser/tie\" as loser,\n    ptsl as loser_pts,\n    case when ptsl = ptsw then 1 else 0 end as tie_flag\nfrom {{ source(\"nfl\", \"nfl_results\") }}", "language": "sql", "refs": [], "sources": [["nfl", "nfl_results"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nfl.nfl_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/raw/nfl_raw_results.sql", "compiled": true, "compiled_code": "select\n    week as wk,\n    \"Winner/tie\" as winner,\n    ptsw as winner_pts,\n    \"Loser/tie\" as loser,\n    ptsl as loser_pts,\n    case when ptsl = ptsw then 1 else 0 end as tie_flag\nfrom '../data/nfl/nfl_results.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_elo_rollforward": {"database": "mdsbox", "schema": "main", "name": "nba_elo_rollforward", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_elo_rollforward.py", "original_file_path": "models/nba/prep/nba_elo_rollforward.py", "unique_id": "model.sports_sims.nba_elo_rollforward", "fqn": ["sports_sims", "nba", "prep", "nba_elo_rollforward"], "alias": "nba_elo_rollforward", "checksum": {"name": "sha256", "checksum": "123cfb1685c00c54ddcb21d2b795b8482032effe8fe20296042d52a63c692a3a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "config_keys_used": ["nba_elo_offset"], "config_keys_defaults": [100.0]}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/prep/nba_elo_rollforward.py", "unrendered_config": {"tags": "nba", "materialized": "table", "config_keys_used": ["nba_elo_offset"], "config_keys_defaults": [100.0]}, "created_at": 1756344405.0013251, "relation_name": "\"mdsbox\".\"main\".\"nba_elo_rollforward\"", "raw_code": "import pandas as pd\n\ndef calc_elo_diff(margin: float, game_result: float, home_elo: float, visiting_elo: float, home_adv: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    elo_diff = -float((visiting_elo - home_elo - home_adv))\n    raw_elo = 20.0 * (( game_result ) - (1.0 / (10.0 ** ( elo_diff / 400.0) + 1.0)))\n    if game_result == 1:\n       elo_chg =  raw_elo * ((margin + 3)** 0.8 ) / (7.5 + (0.006 * elo_diff ))\n    elif game_result == 0:\n       elo_chg =  raw_elo * ((margin + 3)** 0.8 ) / (7.5 + (0.006 * -elo_diff ))\n    return elo_chg\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"nba_elo_offset\",100.0)\n    team_ratings = dbt.ref(\"nba_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team_long\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"nba_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, margin, game_result\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, margin, game_result) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change =  calc_elo_diff(margin, game_result, helo, velo, home_adv)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)", "language": "python", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.sports_sims.nba_raw_team_ratings", "model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/prep/nba_elo_rollforward.py", "compiled": true, "compiled_code": "import pandas as pd\n\ndef calc_elo_diff(margin: float, game_result: float, home_elo: float, visiting_elo: float, home_adv: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    elo_diff = -float((visiting_elo - home_elo - home_adv))\n    raw_elo = 20.0 * (( game_result ) - (1.0 / (10.0 ** ( elo_diff / 400.0) + 1.0)))\n    if game_result == 1:\n       elo_chg =  raw_elo * ((margin + 3)** 0.8 ) / (7.5 + (0.006 * elo_diff ))\n    elif game_result == 0:\n       elo_chg =  raw_elo * ((margin + 3)** 0.8 ) / (7.5 + (0.006 * -elo_diff ))\n    return elo_chg\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"nba_elo_offset\",100.0)\n    team_ratings = dbt.ref(\"nba_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team_long\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"nba_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, margin, game_result\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, margin, game_result) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change =  calc_elo_diff(margin, game_result, helo, velo, home_adv)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"nba_latest_results\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"nba_latest_results\\\"\", \"nba_raw_team_ratings\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"nba_raw_team_ratings\\\"\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {'nba_elo_offset': 100.0}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"mdsbox\"\n    schema = \"main\"\n    identifier = \"nba_elo_rollforward\"\n    \n    def __repr__(self):\n        return '\"mdsbox\".\"main\".\"nba_elo_rollforward\"'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nba_tiebreakers_optimized": {"database": "mdsbox", "schema": "main", "name": "nba_tiebreakers_optimized", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/nba_tiebreakers_optimized.py", "original_file_path": "models/nba/analysis/nba_tiebreakers_optimized.py", "unique_id": "model.sports_sims.nba_tiebreakers_optimized", "fqn": ["sports_sims", "nba", "analysis", "nba_tiebreakers_optimized"], "alias": "nba_tiebreakers_optimized", "checksum": {"name": "sha256", "checksum": "a9af100d57874853f9aa5e25b49e09769fc7f20842825e753d7f4e077c93761b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nba/analysis/nba_tiebreakers_optimized.py", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1756344405.0030148, "relation_name": "\"mdsbox\".\"main\".\"nba_tiebreakers_optimized\"", "raw_code": "import pandas as pd\nimport polars as pl\nimport numpy as np\nfrom typing import List, Dict, Tuple, Optional\n\n# THIS MODEL IMPLEMENTS THE NBA TIEBREAKERS FOR TIES FOR PLAYOFF SEEDING\n# THE RULES ARE AS FOLLOWS:\n# Tiebreaker Basis \u2013 2 Teams Tied\n# (-) Tie breaker not needed (better overall winning percentage)\n# (1) Better winning percentage in games against each other\n# (2) Division leader wins a tie over a team not leading a division\n# (3) Division won-lost percentage (only if teams are in same division)\n# (4) Conference won-lost percentage\n# (5) Better winning percentage against teams eligible for the playoffs in own\n# conference (including teams that finished the regular season tied for a playoff\n# position)\n# (6) Better winning percentage against teams eligible for the playoffs in other\n# conference (including teams that finished the regular season tied for a playoff\n# position)\n# (7) Better net result of total points scored less total points allowed against all\n# opponents (\u201cpoint differential\u201d)\n# Tiebreaker Basis \u2013 Three or More Teams Tied\n# (-) Tie breaker not needed (better overall winning percentage)\n# (1) Division leader wins tie from team not leading a division (this criterion is\n# applied regardless of whether the tied teams are in the same division)\n# (2) Better winning percentage in all games among the tied teams\n# (3) Division won-lost percentage (only if all teams are in same division)\n# (4) Conference won-lost percentage\n# (5) Better winning percentage against teams eligible for the playoffs in own\n# conference (including teams that finished the regular season tied for a playoff\n# position)\n# (6) Better net result of total points scored less total points allowed against all\n# opponents (\u201cpoint differential\u201d)\n\ndef calculate_head_to_head(team1: str, team2: str, results: pl.DataFrame, team_map: Dict[str, str]) -> Tuple[float, float]:\n    \"\"\"Calculate head-to-head record between two teams.\"\"\"\n    # Convert team abbreviations to full names\n    team1_full = team_map[team1]\n    team2_full = team_map[team2]\n    \n    # Filter games where both teams played\n    h2h_games = results.filter(\n        ((pl.col('VisTm') == team1_full) & (pl.col('HomeTm') == team2_full)) |\n        ((pl.col('VisTm') == team2_full) & (pl.col('HomeTm') == team1_full))\n    )\n    \n    team1_wins = h2h_games.filter(pl.col('winner') == team1_full).height\n    team2_wins = h2h_games.filter(pl.col('winner') == team2_full).height\n    \n    return team1_wins, team2_wins\n\ndef calculate_division_record(team: str, division: str, results: pl.DataFrame, teams: pl.DataFrame, team_map: Dict[str, str]) -> Tuple[int, int]:\n    \"\"\"Calculate a team's record against teams in their division.\"\"\"\n    # Get all teams in the same division\n    division_teams = teams.filter(pl.col('division') == division)['team'].to_list()\n    if team in division_teams:\n        division_teams.remove(team)  # Remove the team itself\n    \n    # Convert to full names\n    team_full = team_map[team]\n    division_teams_full = [team_map[t] for t in division_teams]\n    \n    # Filter games against division opponents\n    div_games = results.filter(\n        ((pl.col('VisTm') == team_full) & (pl.col('HomeTm').is_in(division_teams_full))) |\n        ((pl.col('HomeTm') == team_full) & (pl.col('VisTm').is_in(division_teams_full)))\n    )\n    \n    wins = div_games.filter(pl.col('winner') == team_full).height\n    losses = div_games.filter(pl.col('winner') != team_full).height\n    \n    return wins, losses\n\ndef calculate_conference_record(team: str, conference: str, results: pl.DataFrame, teams: pl.DataFrame, team_map: Dict[str, str]) -> Tuple[int, int]:\n    \"\"\"Calculate a team's record against teams in their conference.\"\"\"\n    # Get all teams in the same conference\n    conf_teams = teams.filter(pl.col('conf') == conference)['team'].to_list()\n    if team in conf_teams:\n        conf_teams.remove(team)  # Remove the team itself\n    \n    # Convert to full names\n    team_full = team_map[team]\n    conf_teams_full = [team_map[t] for t in conf_teams]\n    \n    # Filter games against conference opponents\n    conf_games = results.filter(\n        ((pl.col('VisTm') == team_full) & (pl.col('HomeTm').is_in(conf_teams_full))) |\n        ((pl.col('HomeTm') == team_full) & (pl.col('VisTm').is_in(conf_teams_full)))\n    )\n    \n    wins = conf_games.filter(pl.col('winner') == team_full).height\n    losses = conf_games.filter(pl.col('winner') != team_full).height\n    \n    return wins, losses\n\ndef calculate_top_10_record(team: str, top_10_teams: List[str], results: pl.DataFrame, team_map: Dict[str, str]) -> Tuple[int, int]:\n    \"\"\"Calculate a team's record against top 10 teams.\"\"\"\n    # Convert to full names\n    team_full = team_map[team]\n    top_10_teams_full = [team_map[t] for t in top_10_teams]\n    \n    # Filter games against top 10 teams\n    top_10_games = results.filter(\n        ((pl.col('VisTm') == team_full) & (pl.col('HomeTm').is_in(top_10_teams_full))) |\n        ((pl.col('HomeTm') == team_full) & (pl.col('VisTm').is_in(top_10_teams_full)))\n    )\n    \n    wins = top_10_games.filter(pl.col('winner') == team_full).height\n    losses = top_10_games.filter(pl.col('winner') != team_full).height\n    \n    return wins, losses\n\ndef calculate_point_differential(team: str, results: pl.DataFrame, team_map: Dict[str, str]) -> int:\n    \"\"\"Calculate a team's point differential for all games.\"\"\"\n    team_full = team_map[team]\n    \n    # Games where team was home\n    home_games = results.filter(pl.col('HomeTm') == team_full)\n    home_diff = home_games.with_columns(\n        diff=pl.when(pl.col('winner') == team_full)\n        .then(pl.col('winner_pts') - pl.col('loser_pts'))\n        .otherwise(pl.col('loser_pts') - pl.col('winner_pts'))\n    )['diff'].sum()\n    \n    # Games where team was visitor\n    away_games = results.filter(pl.col('VisTm') == team_full)\n    away_diff = away_games.with_columns(\n        diff=pl.when(pl.col('winner') == team_full)\n        .then(pl.col('winner_pts') - pl.col('loser_pts'))\n        .otherwise(pl.col('loser_pts') - pl.col('winner_pts'))\n    )['diff'].sum()\n    \n    return home_diff + away_diff\n\n# --- Tiebreaker Logic ---\n\ndef _calculate_win_percentage(wins: int, losses: int) -> float:\n    \"\"\"Calculates win percentage, handling division by zero.\"\"\"\n    if wins + losses == 0:\n        return 0.0\n    return wins / (wins + losses)\n\ndef _get_record_against_teams(team: str, opponent_list: List[str], all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]]) -> Tuple[int, int]:\n    \"\"\"Calculates a team's W/L record against a specific list of opponents.\"\"\"\n    wins = 0\n    losses = 0\n    for opponent in opponent_list:\n        if team == opponent: # Don't compare team against itself\n            continue\n        w, l = all_h2h_records.get((team, opponent), (0, 0))\n        wins += w\n        losses += l\n    return wins, losses\n\ndef break_two_way_tie(team1: str, team2: str,\n                      all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]],\n                      all_div_records: Dict[str, Tuple[int, int]],\n                      all_conf_records: Dict[str, Tuple[int, int]],\n                      all_point_diffs: Dict[str, int],\n                      teams: pl.DataFrame,\n                      playoff_eligible_east: List[str],\n                      playoff_eligible_west: List[str]) -> Tuple[str, str]:\n    \"\"\"Apply NBA tiebreaker rules for two teams. Returns (winner, tiebreaker_used).\"\"\"\n    \n    # Cache team info to avoid repeated lookups\n    team1_info = teams.filter(pl.col('team') == team1).row(index=0, named=True)\n    team2_info = teams.filter(pl.col('team') == team2).row(index=0, named=True)\n    if not team1_info or not team2_info:\n        # Handle cases where team info might be missing (shouldn't happen with good data)\n        # Defaulting to team1, but logging or raising an error might be better\n        print(f\"Warning: Missing team info for {team1} or {team2}\")\n        return team1, \"error_missing_team_info\" \n\n    # (-) Overall winning percentage is assumed to be equal for tied teams\n\n    # (1) Better winning percentage in games against each other\n    t1_h2h_wins, t2_h2h_wins = all_h2h_records.get((team1, team2), (0, 0))\n    if t1_h2h_wins > t2_h2h_wins:\n        return team1, \"h2h_wins\"\n    if t2_h2h_wins > t1_h2h_wins:\n        return team2, \"h2h_wins\"\n\n    # (2) Division leader wins a tie over a team not leading a division\n    # Note: Requires knowing which teams *won* their division overall, not just their record.\n    # This information isn't directly available in the inputs. Assuming this check is implicitly handled\n    # by overall record or needs external data. Skipping for now as it cannot be calculated.\n    # print(\"Warning: Tiebreaker step (2) Division Leader not implemented due to missing data.\")\n    \n    # (3) Division won-lost percentage (only if teams are in same division)\n    if team1_info['division'] == team2_info['division']:\n        t1_div_wins, t1_div_losses = all_div_records.get(team1, (0, 0))\n        t2_div_wins, t2_div_losses = all_div_records.get(team2, (0, 0))\n        t1_div_pct = _calculate_win_percentage(t1_div_wins, t1_div_losses)\n        t2_div_pct = _calculate_win_percentage(t2_div_wins, t2_div_losses)\n        if t1_div_pct > t2_div_pct:\n            return team1, \"division_record_pct\"\n        if t2_div_pct > t1_div_pct:\n            return team2, \"division_record_pct\"\n            \n    # (4) Conference won-lost percentage\n    t1_conf_wins, t1_conf_losses = all_conf_records.get(team1, (0, 0))\n    t2_conf_wins, t2_conf_losses = all_conf_records.get(team2, (0, 0))\n    t1_conf_pct = _calculate_win_percentage(t1_conf_wins, t1_conf_losses)\n    t2_conf_pct = _calculate_win_percentage(t2_conf_wins, t2_conf_losses)\n    if t1_conf_pct > t2_conf_pct:\n        return team1, \"conference_record_pct\"\n    if t2_conf_pct > t1_conf_pct:\n        return team2, \"conference_record_pct\"\n\n    # (5) Better winning percentage against teams eligible for the playoffs in own conference\n    playoff_eligible_own_conf = playoff_eligible_east if team1_info['conf'] == 'East' else playoff_eligible_west\n    t1_vs_eligible_own_wins, t1_vs_eligible_own_losses = _get_record_against_teams(team1, playoff_eligible_own_conf, all_h2h_records)\n    t2_vs_eligible_own_wins, t2_vs_eligible_own_losses = _get_record_against_teams(team2, playoff_eligible_own_conf, all_h2h_records)\n    t1_vs_eligible_own_pct = _calculate_win_percentage(t1_vs_eligible_own_wins, t1_vs_eligible_own_losses)\n    t2_vs_eligible_own_pct = _calculate_win_percentage(t2_vs_eligible_own_wins, t2_vs_eligible_own_losses)\n    if t1_vs_eligible_own_pct > t2_vs_eligible_own_pct:\n        return team1, \"vs_playoff_eligible_own_conf_pct\"\n    if t2_vs_eligible_own_pct > t1_vs_eligible_own_pct:\n        return team2, \"vs_playoff_eligible_own_conf_pct\"\n\n    # (6) Better winning percentage against teams eligible for the playoffs in other conference\n    playoff_eligible_other_conf = playoff_eligible_west if team1_info['conf'] == 'East' else playoff_eligible_east\n    t1_vs_eligible_other_wins, t1_vs_eligible_other_losses = _get_record_against_teams(team1, playoff_eligible_other_conf, all_h2h_records)\n    t2_vs_eligible_other_wins, t2_vs_eligible_other_losses = _get_record_against_teams(team2, playoff_eligible_other_conf, all_h2h_records)\n    t1_vs_eligible_other_pct = _calculate_win_percentage(t1_vs_eligible_other_wins, t1_vs_eligible_other_losses)\n    t2_vs_eligible_other_pct = _calculate_win_percentage(t2_vs_eligible_other_wins, t2_vs_eligible_other_losses)\n    if t1_vs_eligible_other_pct > t2_vs_eligible_other_pct:\n        return team1, \"vs_playoff_eligible_other_conf_pct\"\n    if t2_vs_eligible_other_pct > t1_vs_eligible_other_pct:\n        return team2, \"vs_playoff_eligible_other_conf_pct\"\n\n    # (7) Better net result of total points scored less total points allowed against all opponents (\u201cpoint differential\u201d)\n    team1_diff = all_point_diffs.get(team1, -float('inf'))\n    team2_diff = all_point_diffs.get(team2, -float('inf'))\n    if team1_diff > team2_diff:\n        return team1, \"point_differential\"\n    # If point differentials are also equal (highly unlikely), default to team1 or random choice\n    # Returning team2 here follows the original code's final else clause implicitly\n    return team2, \"point_differential\"\n\n# --- New/Modified Helpers for Multi-Way ---\n\ndef _get_h2h_pct_among_tied(team: str, tied_group: List[str], all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]]) -> float:\n    \"\"\"Calculates H2H win pct for a team ONLY against others in the tied_group.\"\"\"\n    wins, losses = _get_record_against_teams(team, tied_group, all_h2h_records)\n    return _calculate_win_percentage(wins, losses)\n\ndef _get_div_pct(team: str, all_div_records: Dict[str, Tuple[int, int]]) -> float:\n    \"\"\"Gets division win pct from pre-calculated records.\"\"\"\n    wins, losses = all_div_records.get(team, (0, 0))\n    return _calculate_win_percentage(wins, losses)\n\ndef _get_conf_pct(team: str, all_conf_records: Dict[str, Tuple[int, int]]) -> float:\n    \"\"\"Gets conference win pct from pre-calculated records.\"\"\"\n    wins, losses = all_conf_records.get(team, (0, 0))\n    return _calculate_win_percentage(wins, losses)\n\ndef _get_vs_playoff_eligible_pct(team: str, own_conf_eligible: List[str], all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]]) -> float:\n    \"\"\"Calculates win pct against playoff eligible teams in own conference.\"\"\"\n    wins, losses = _get_record_against_teams(team, own_conf_eligible, all_h2h_records)\n    return _calculate_win_percentage(wins, losses)\n\n# Hypothetical function - requires external data/logic\ndef _is_division_leader(team: str, teams_table: pl.DataFrame, all_div_records: Dict[str, Tuple[int, int]], scenario_standings: pl.DataFrame) -> bool:\n    \"\"\"Checks if team is the undisputed leader (most wins, no ties) in their division for the given scenario.\"\"\"\n    try:\n        # Find the team's division and wins in this scenario\n        team_info = scenario_standings.filter(pl.col('team') == team)\n        if team_info.is_empty():\n            return False # Team not found in standings?\n        \n        team_division = team_info.select('division').item()\n        team_wins = team_info.select('wins').item()\n\n        # Get all teams in the same division from the scenario standings\n        division_standings = scenario_standings.filter(pl.col('division') == team_division)\n\n        # Find the maximum wins in that division\n        max_wins_in_division = division_standings.select(pl.max('wins')).item()\n\n        # Check if the team's wins match the maximum\n        if team_wins != max_wins_in_division:\n            return False # Not the leader\n        \n        # Check if *only one* team achieved the maximum wins\n        num_teams_with_max_wins = division_standings.filter(pl.col('wins') == max_wins_in_division).height\n        \n        # Return True only if the team has max wins and is the *only* one with max wins\n        return num_teams_with_max_wins == 1\n    \n    except Exception as e:\n        # Log error or handle appropriately\n        print(f\"Error in _is_division_leader for team {team}: {e}\")\n        return False # Default to False on error\n\n# --- Main Multi-Way Tiebreaker Function (Refactored) ---\ndef break_multi_way_tie(tied_teams: List[str],\n                        all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]],\n                        all_div_records: Dict[str, Tuple[int, int]],\n                        all_conf_records: Dict[str, Tuple[int, int]],\n                        all_point_diffs: Dict[str, int],\n                        teams: pl.DataFrame, # Used for team info (conf, div)\n                        playoff_eligible_east: List[str],\n                        playoff_eligible_west: List[str],\n                        scenario_standings: pl.DataFrame) -> List[Tuple[str, str]]:\n    \"\"\"Apply NBA tiebreaker rules for three or more teams recursively.\"\"\"\n\n    # --- Base Cases ---\n    num_tied = len(tied_teams)\n    if num_tied == 0:\n        return []\n    if num_tied == 1:\n        return [(tied_teams[0], \"no_tie\")]\n    if num_tied == 2:\n        # Use the dedicated two-way tiebreaker\n        winner, tiebreaker = break_two_way_tie(tied_teams[0], tied_teams[1], all_h2h_records, all_div_records,\n                                             all_conf_records, all_point_diffs, teams,\n                                             playoff_eligible_east, playoff_eligible_west)\n        loser = tied_teams[1] if winner == tied_teams[0] else tied_teams[0]\n        return [(winner, tiebreaker), (loser, tiebreaker)]\n\n    # --- Recursive Multi-Way Tiebreaker Logic ---\n    \n    ranked_list: List[Tuple[str, str]] = []\n    remaining_to_rank = list(tied_teams) # Start with all teams needing ranking\n\n    # Helper to apply a sorting key and recursively rank subgroups\n    def apply_tiebreaker(key_func, tiebreaker_name, higher_is_better=True) -> bool:\n        nonlocal remaining_to_rank, ranked_list\n        \n        if not remaining_to_rank: return True # All teams ranked\n\n        # Sort remaining teams based on the current criterion\n        sorted_group = sorted(\n            remaining_to_rank,\n            key=key_func,\n            reverse=higher_is_better\n        )\n\n        # Group teams by their score according to the current criterion\n        grouped_by_score = []\n        if sorted_group:\n            current_group = [sorted_group[0]]\n            current_score = key_func(sorted_group[0])\n            for i in range(1, len(sorted_group)):\n                team = sorted_group[i]\n                score = key_func(team)\n                # Use tolerance for float comparison if needed, though unlikely here\n                if score == current_score:\n                    current_group.append(team)\n                else:\n                    grouped_by_score.append(current_group)\n                    current_group = [team]\n                    current_score = score\n            grouped_by_score.append(current_group)\n\n        # Check if this tiebreaker resolved anything\n        if len(grouped_by_score) > 1: # Did it create multiple rank levels?\n             newly_ranked = []\n             next_remaining = []\n             for group in grouped_by_score:\n                 if len(group) == 1:\n                     # This team is definitively ranked by this criterion\n                     newly_ranked.append((group[0], tiebreaker_name))\n                 else:\n                     # This subgroup remains tied, needs further breaking (recursive call)\n                     # Pass the subgroup back through the *entire* tiebreaker process\n                     recursive_ranks = break_multi_way_tie(group, all_h2h_records, all_div_records,\n                                                           all_conf_records, all_point_diffs, teams,\n                                                           playoff_eligible_east, playoff_eligible_west, \n                                                           scenario_standings)\n                     newly_ranked.extend(recursive_ranks)\n             \n             ranked_list.extend(newly_ranked)\n             remaining_to_rank = [] # All teams processed in this path\n             return True # Tiebreaker applied and resolved fully (recursively)\n        else:\n            # Tiebreaker did not differentiate the group, move to the next rule\n            return False\n\n    # --- Apply Rules Sequentially ---\n\n    # (1) Division leader wins tie from team not leading a division\n    # Pass scenario_standings to helper\n    leaders = [t for t in remaining_to_rank if _is_division_leader(t, teams, all_div_records, scenario_standings)]\n    non_leaders = [t for t in remaining_to_rank if t not in leaders]\n\n    if leaders and non_leaders: # Rule applies only if mix of leaders/non-leaders\n        # Pass scenario_standings in recursive calls\n        ranked_leaders = break_multi_way_tie(leaders, all_h2h_records, all_div_records,\n                                             all_conf_records, all_point_diffs, teams,\n                                             playoff_eligible_east, playoff_eligible_west, scenario_standings)\n        ranked_non_leaders = break_multi_way_tie(non_leaders, all_h2h_records, all_div_records,\n                                                 all_conf_records, all_point_diffs, teams,\n                                                 playoff_eligible_east, playoff_eligible_west, scenario_standings)\n        # Assign the 'division_leader' tag primarily to the leaders breaking the tie here\n        ranked_list = [(t, \"division_leader\" if t in leaders else tb) for t, tb in ranked_leaders] + \\\n                      [(t, tb) for t, tb in ranked_non_leaders]\n        return ranked_list # Tie resolved by this rule\n\n    # If Rule 1 didn't apply or resolve, proceed with the group 'remaining_to_rank'\n\n    # (2) Better winning percentage in all games among the tied teams\n    if apply_tiebreaker(lambda t: _get_h2h_pct_among_tied(t, remaining_to_rank, all_h2h_records), \"h2h_pct_among_tied\"):\n         return ranked_list\n\n    # (3) Division won-lost percentage (only if ALL teams are in same division)\n    first_team_div = teams.filter(pl.col('team') == remaining_to_rank[0]).select('division').item()\n    all_same_division = True\n    for team in remaining_to_rank[1:]:\n        if teams.filter(pl.col('team') == team).select('division').item() != first_team_div:\n            all_same_division = False\n            break\n            \n    if all_same_division:\n        if apply_tiebreaker(lambda t: _get_div_pct(t, all_div_records), \"division_record_pct\"):\n             return ranked_list\n\n    # (4) Conference won-lost percentage\n    if apply_tiebreaker(lambda t: _get_conf_pct(t, all_conf_records), \"conference_record_pct\"):\n         return ranked_list\n\n    # (5) Better winning percentage against teams eligible for the playoffs in own conference\n    # Determine own conference playoff eligible list based on the first team (all tied teams are in the same conf)\n    first_team_conf = teams.filter(pl.col('team') == remaining_to_rank[0]).select('conf').item()\n    own_conf_eligible = playoff_eligible_east if first_team_conf == 'East' else playoff_eligible_west\n    if apply_tiebreaker(lambda t: _get_vs_playoff_eligible_pct(t, own_conf_eligible, all_h2h_records), \"vs_playoff_eligible_own_conf_pct\"):\n         return ranked_list\n\n    # (6) Better net result (Point Differential)\n    # This is the final tiebreaker; it should fully rank the remaining teams.\n    final_sort = sorted(remaining_to_rank, key=lambda t: all_point_diffs.get(t, -float('inf')), reverse=True)\n    ranked_list.extend([(t, \"point_differential\") for t in final_sort])\n    \n    return ranked_list\n\ndef model(dbt, sess):\n    # Get the necessary data and convert to Polars\n    simulator = pl.from_pandas(dbt.ref(\"reg_season_simulator\").df())\n    teams = pl.from_pandas(dbt.ref(\"nba_teams\").df())\n    results = pl.from_pandas(dbt.ref(\"nba_raw_results\").df())\n    \n    # Create team info dictionary for faster lookups\n    team_info = {row['team']: dict(row) for row in teams.iter_rows(named=True)}\n    \n    # Create a mapping of team abbreviations to full names and vice-versa\n    team_map = dict(zip(teams[\"team\"].to_list(), teams[\"team_long\"].to_list()))\n    team_abbr_map = dict(zip(teams[\"team_long\"].to_list(), teams[\"team\"].to_list()))\n\n    # Pre-calculate all records using Polars operations\n    all_teams = teams[\"team\"].to_list()\n    \n    # --- Vectorized H2H Calculation ---\n    # Map full names in results to abbreviations\n    results_with_abbr = results.with_columns([\n        pl.col(\"HomeTm\").replace(team_abbr_map).alias(\"HomeTm_abbr\"),\n        pl.col(\"VisTm\").replace(team_abbr_map).alias(\"VisTm_abbr\"),\n        pl.col(\"winner\").replace(team_abbr_map).alias(\"winner_abbr\")\n    ])\n\n    # Determine team1/team2 for consistent pairing (team1 < team2 alphabetically)\n    h2h_results = results_with_abbr.with_columns([\n        pl.min_horizontal(pl.col(\"HomeTm_abbr\"), pl.col(\"VisTm_abbr\")).alias(\"team1\"),\n        pl.max_horizontal(pl.col(\"HomeTm_abbr\"), pl.col(\"VisTm_abbr\")).alias(\"team2\")\n    ])\n\n    # Calculate wins for team1 and team2 in each game\n    h2h_results = h2h_results.with_columns([\n        pl.when(pl.col(\"winner_abbr\") == pl.col(\"team1\")).then(1).otherwise(0).alias(\"team1_won\"),\n        pl.when(pl.col(\"winner_abbr\") == pl.col(\"team2\")).then(1).otherwise(0).alias(\"team2_won\")\n    ])\n\n    # Aggregate wins for each pair\n    h2h_summary = h2h_results.group_by([\"team1\", \"team2\"]).agg([\n        pl.sum(\"team1_won\"),\n        pl.sum(\"team2_won\")\n    ])\n\n    # Create all possible team pairs to ensure all matchups are covered\n    all_pairs_df = pl.DataFrame({\n        't1': [t1 for t1 in all_teams for t2 in all_teams if t1 < t2],\n        't2': [t2 for t1 in all_teams for t2 in all_teams if t1 < t2]\n    })\n\n    # Join summary with all pairs and fill missing games with 0 wins\n    h2h_final = all_pairs_df.join(\n        h2h_summary, \n        left_on=['t1', 't2'], \n        right_on=['team1', 'team2'], \n        how='left'\n    ).with_columns([\n        pl.col('team1_won').fill_null(0),\n        pl.col('team2_won').fill_null(0)\n    ]).select(['t1', 't2', 'team1_won', 'team2_won'])\n\n    # Convert to dictionary for faster lookups, ensuring both (t1, t2) and (t2, t1) exist\n    all_h2h_records = {}\n    for row in h2h_final.iter_rows(named=True):\n        t1, t2, t1_wins, t2_wins = row['t1'], row['t2'], row['team1_won'], row['team2_won']\n        all_h2h_records[(t1, t2)] = (t1_wins, t2_wins)\n        all_h2h_records[(t2, t1)] = (t2_wins, t1_wins)\n        \n    # Add entries for teams against themselves (0, 0) if needed by downstream logic, though typically not required for H2H\n    # for team in all_teams:\n    #     if (team, team) not in all_h2h_records:\n    #          all_h2h_records[(team, team)] = (0, 0)\n    # --- End Vectorized H2H Calculation ---\n\n    # --- Vectorized Division and Conference Record Calculation ---\n    # Prepare team info for joins\n    teams_sel = teams.select(['team', 'conf', 'division'])\n\n    # Join h2h results with team info for both teams\n    h2h_teams = h2h_final.join(\n        teams_sel, left_on='t1', right_on='team'\n    ).rename({\n        'conf': 'conf_t1',\n        'division': 'division_t1'\n    }).join(\n        teams_sel, left_on='t2', right_on='team'\n    ).rename({\n        'conf': 'conf_t2',\n        'division': 'division_t2'\n    })\n\n    # Create perspective from team1's view\n    persp1 = h2h_teams.select([\n        pl.col('t1').alias('team'),\n        pl.col('conf_t1'),\n        pl.col('division_t1'),\n        pl.col('conf_t2'),\n        pl.col('division_t2'),\n        pl.col('team1_won').alias('wins'),\n        pl.col('team2_won').alias('losses')\n    ])\n\n    # Create perspective from team2's view\n    persp2 = h2h_teams.select([\n        pl.col('t2').alias('team'),\n        pl.col('conf_t2').alias('conf_t1'), # Rename cols to match persp1\n        pl.col('division_t2').alias('division_t1'),\n        pl.col('conf_t1').alias('conf_t2'),\n        pl.col('division_t1').alias('division_t2'),\n        pl.col('team2_won').alias('wins'),\n        pl.col('team1_won').alias('losses')\n    ])\n\n    # Combine perspectives\n    all_perspectives = pl.concat([persp1, persp2])\n\n    # Calculate Division Records\n    div_summary = all_perspectives.filter(\n        pl.col('division_t1') == pl.col('division_t2')\n    ).group_by('team').agg([\n        pl.sum('wins').alias('div_wins'), \n        pl.sum('losses').alias('div_losses')\n    ])\n\n    # Calculate Conference Records\n    conf_summary = all_perspectives.filter(\n        pl.col('conf_t1') == pl.col('conf_t2')\n    ).group_by('team').agg([\n        pl.sum('wins').alias('conf_wins'), \n        pl.sum('losses').alias('conf_losses')\n    ])\n\n    # Convert summaries to dictionaries\n    all_div_records = {row['team']: (row['div_wins'], row['div_losses']) \n                      for row in div_summary.iter_rows(named=True)}\n    all_conf_records = {row['team']: (row['conf_wins'], row['conf_losses']) \n                       for row in conf_summary.iter_rows(named=True)}\n\n    # Ensure all teams are in the dictionaries\n    for team in all_teams:\n        if team not in all_div_records:\n            all_div_records[team] = (0, 0)\n        if team not in all_conf_records:\n            all_conf_records[team] = (0, 0)\n    # --- End Vectorized Division and Conference Record Calculation ---\n    \n    # --- Vectorized Point Differential Calculation ---\n    # Use results_with_abbr which has HomeTm_abbr, VisTm_abbr, winner_abbr\n    # Calculate point difference from the perspective of the home team\n    results_with_diff = results_with_abbr.with_columns([\n        pl.when(pl.col(\"HomeTm_abbr\") == pl.col(\"winner_abbr\"))\n          .then(pl.col(\"winner_pts\") - pl.col(\"loser_pts\"))\n          .otherwise(pl.col(\"loser_pts\") - pl.col(\"winner_pts\"))\n          .alias(\"game_diff_home_perspective\")\n    ])\n\n    # Create DataFrame for home team differentials\n    home_diffs = results_with_diff.select([\n        pl.col(\"HomeTm_abbr\").alias(\"team\"),\n        pl.col(\"game_diff_home_perspective\").alias(\"diff\")\n    ])\n\n    # Create DataFrame for visitor team differentials (negative of home diff)\n    away_diffs = results_with_diff.select([\n        pl.col(\"VisTm_abbr\").alias(\"team\"),\n        (-pl.col(\"game_diff_home_perspective\")).alias(\"diff\")\n    ])\n\n    # Combine home and away differentials\n    all_diffs = pl.concat([home_diffs, away_diffs])\n\n    # Group by team and sum differentials\n    point_diff_summary = all_diffs.group_by(\"team\").agg(\n        pl.sum(\"diff\").alias(\"total_diff\")\n    )\n\n    # Convert to dictionary\n    all_point_diffs = {row['team']: row['total_diff'] for row in point_diff_summary.iter_rows(named=True)}\n\n    # Ensure all teams are in the dictionary, defaulting to 0 if they had no games\n    for team in all_teams:\n        if team not in all_point_diffs:\n            all_point_diffs[team] = 0\n    # --- End Vectorized Point Differential Calculation ---\n    \n    # Pre-calculate wins and losses for each team in each scenario\n    wins = simulator.group_by(['scenario_id', 'winning_team']).count().rename({'count': 'wins', 'winning_team': 'team'})\n    losses = simulator.filter(\n        ((pl.col('home_team') != pl.col('winning_team')) & pl.col('home_team').is_not_null()) |\n        ((pl.col('visiting_team') != pl.col('winning_team')) & pl.col('visiting_team').is_not_null())\n    ).group_by(['scenario_id', 'home_team']).count().rename({'count': 'losses', 'home_team': 'team'})\n    \n    # Merge wins and losses\n    standings = wins.join(losses, on=['scenario_id', 'team'], how='outer').fill_null(0)\n    \n    # Join standings with teams to get conference info\n    standings = standings.join(teams.select(['team', 'conf', 'division']), on='team', how='left')\n    \n    # Process each scenario\n    output_data = []\n    scenario_ids = standings['scenario_id'].unique().to_list()\n    \n    for scenario_id in scenario_ids:\n        try:\n            # Get standings for this scenario\n            scenario_standings = standings.filter(pl.col('scenario_id') == scenario_id)\n            \n            # Calculate playoff eligible teams (top 10 per conference, with ties)\n            def get_playoff_eligible(standings_df: pl.DataFrame, conf: str) -> List[str]:\n                conf_standings = standings_df.filter(pl.col('conf') == conf).sort('wins', descending=True)\n                if conf_standings.height == 0:\n                    return []\n                # Find the 10th best win total (or last if fewer than 10 teams)\n                cutoff_index = min(9, conf_standings.height - 1)\n                tenth_place_wins = conf_standings[cutoff_index]['wins'].item()\n                # Include all teams with wins >= 10th place wins\n                eligible = conf_standings.filter(pl.col('wins') >= tenth_place_wins)\n                return eligible['team'].to_list()\n\n            playoff_eligible_east = get_playoff_eligible(scenario_standings, 'East')\n            playoff_eligible_west = get_playoff_eligible(scenario_standings, 'West')\n            # Removed top_10_overall as it's not used\n\n            # Group teams by conference and wins\n            east_standings = scenario_standings.filter(pl.col('conf') == 'East').sort('wins', descending=True)\n            west_standings = scenario_standings.filter(pl.col('conf') == 'West').sort('wins', descending=True)\n            \n            # Process each conference\n            def process_standings(conf_standings: pl.DataFrame, scenario_standings_full: pl.DataFrame):\n                # ^^ Added scenario_standings_full parameter\n                current_wins = None\n                tied_teams = []\n                rankings = []\n                \n                for row in conf_standings.iter_rows(named=True):\n                    if current_wins is None or row['wins'] == current_wins:\n                        tied_teams.append(row['team'])\n                        current_wins = row['wins']\n                    else:\n                        if len(tied_teams) > 1:\n                            # Break the tie (uses playoff_eligible_* from outer scope)\n                            resolved = break_multi_way_tie(tied_teams, all_h2h_records, all_div_records,\n                                                         all_conf_records, all_point_diffs, teams,\n                                                         playoff_eligible_east, playoff_eligible_west, \n                                                         scenario_standings_full)\n                            rankings.extend(resolved)\n                        else:\n                            rankings.extend([(t, \"no_tie\") for t in tied_teams])\n                        tied_teams = [row['team']]\n                        current_wins = row['wins']\n                \n                # Handle any remaining tied teams\n                if tied_teams:\n                    if len(tied_teams) > 1:\n                        # Pass scenario_standings_full\n                        resolved = break_multi_way_tie(tied_teams, all_h2h_records, all_div_records,\n                                                     all_conf_records, all_point_diffs, teams,\n                                                     playoff_eligible_east, playoff_eligible_west, \n                                                     scenario_standings_full)\n                        rankings.extend(resolved)\n                    else:\n                        rankings.extend([(t, \"no_tie\") for t in tied_teams])\n                \n                return rankings\n            \n            # Process rankings for this scenario\n            # Pass scenario_standings as the second argument\n            east_rankings = process_standings(east_standings, scenario_standings)\n            west_rankings = process_standings(west_standings, scenario_standings)\n            \n            # Add East teams\n            rank = 1\n            for team, tiebreaker in east_rankings:\n                try:\n                    team_info_row = team_info[team]\n                    team_wins = scenario_standings.filter(pl.col('team') == team)['wins'].item()\n                    output_data.append({\n                        \"scenario_id\": scenario_id,\n                        \"team\": team,\n                        \"conference\": \"East\",\n                        \"rank\": rank,\n                        \"division\": team_info_row['division'],\n                        \"tiebreaker_used\": tiebreaker,\n                        \"wins\": team_wins\n                    })\n                    rank += 1\n                except Exception as e:\n                    print(f\"Error processing East team {team} in scenario {scenario_id}: {e}\")\n            \n            # Add West teams\n            rank = 1\n            for team, tiebreaker in west_rankings:\n                try:\n                    team_info_row = team_info[team]\n                    team_wins = scenario_standings.filter(pl.col('team') == team)['wins'].item()\n                    output_data.append({\n                        \"scenario_id\": scenario_id,\n                        \"team\": team,\n                        \"conference\": \"West\",\n                        \"rank\": rank,\n                        \"division\": team_info_row['division'],\n                        \"tiebreaker_used\": tiebreaker,\n                        \"wins\": team_wins\n                    })\n                    rank += 1\n                except Exception as e:\n                    print(f\"Error processing West team {team} in scenario {scenario_id}: {e}\")\n        except Exception as e:\n            print(f\"Error processing scenario {scenario_id}: {e}\")\n    \n    # Convert final output to pandas DataFrame\n    return pd.DataFrame(output_data)", "language": "python", "refs": [{"name": "reg_season_simulator", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_raw_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.sports_sims.reg_season_simulator", "model.sports_sims.nba_teams", "model.sports_sims.nba_raw_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nba/analysis/nba_tiebreakers_optimized.py", "compiled": true, "compiled_code": "import pandas as pd\nimport polars as pl\nimport numpy as np\nfrom typing import List, Dict, Tuple, Optional\n\n# THIS MODEL IMPLEMENTS THE NBA TIEBREAKERS FOR TIES FOR PLAYOFF SEEDING\n# THE RULES ARE AS FOLLOWS:\n# Tiebreaker Basis \u2013 2 Teams Tied\n# (-) Tie breaker not needed (better overall winning percentage)\n# (1) Better winning percentage in games against each other\n# (2) Division leader wins a tie over a team not leading a division\n# (3) Division won-lost percentage (only if teams are in same division)\n# (4) Conference won-lost percentage\n# (5) Better winning percentage against teams eligible for the playoffs in own\n# conference (including teams that finished the regular season tied for a playoff\n# position)\n# (6) Better winning percentage against teams eligible for the playoffs in other\n# conference (including teams that finished the regular season tied for a playoff\n# position)\n# (7) Better net result of total points scored less total points allowed against all\n# opponents (\u201cpoint differential\u201d)\n# Tiebreaker Basis \u2013 Three or More Teams Tied\n# (-) Tie breaker not needed (better overall winning percentage)\n# (1) Division leader wins tie from team not leading a division (this criterion is\n# applied regardless of whether the tied teams are in the same division)\n# (2) Better winning percentage in all games among the tied teams\n# (3) Division won-lost percentage (only if all teams are in same division)\n# (4) Conference won-lost percentage\n# (5) Better winning percentage against teams eligible for the playoffs in own\n# conference (including teams that finished the regular season tied for a playoff\n# position)\n# (6) Better net result of total points scored less total points allowed against all\n# opponents (\u201cpoint differential\u201d)\n\ndef calculate_head_to_head(team1: str, team2: str, results: pl.DataFrame, team_map: Dict[str, str]) -> Tuple[float, float]:\n    \"\"\"Calculate head-to-head record between two teams.\"\"\"\n    # Convert team abbreviations to full names\n    team1_full = team_map[team1]\n    team2_full = team_map[team2]\n    \n    # Filter games where both teams played\n    h2h_games = results.filter(\n        ((pl.col('VisTm') == team1_full) & (pl.col('HomeTm') == team2_full)) |\n        ((pl.col('VisTm') == team2_full) & (pl.col('HomeTm') == team1_full))\n    )\n    \n    team1_wins = h2h_games.filter(pl.col('winner') == team1_full).height\n    team2_wins = h2h_games.filter(pl.col('winner') == team2_full).height\n    \n    return team1_wins, team2_wins\n\ndef calculate_division_record(team: str, division: str, results: pl.DataFrame, teams: pl.DataFrame, team_map: Dict[str, str]) -> Tuple[int, int]:\n    \"\"\"Calculate a team's record against teams in their division.\"\"\"\n    # Get all teams in the same division\n    division_teams = teams.filter(pl.col('division') == division)['team'].to_list()\n    if team in division_teams:\n        division_teams.remove(team)  # Remove the team itself\n    \n    # Convert to full names\n    team_full = team_map[team]\n    division_teams_full = [team_map[t] for t in division_teams]\n    \n    # Filter games against division opponents\n    div_games = results.filter(\n        ((pl.col('VisTm') == team_full) & (pl.col('HomeTm').is_in(division_teams_full))) |\n        ((pl.col('HomeTm') == team_full) & (pl.col('VisTm').is_in(division_teams_full)))\n    )\n    \n    wins = div_games.filter(pl.col('winner') == team_full).height\n    losses = div_games.filter(pl.col('winner') != team_full).height\n    \n    return wins, losses\n\ndef calculate_conference_record(team: str, conference: str, results: pl.DataFrame, teams: pl.DataFrame, team_map: Dict[str, str]) -> Tuple[int, int]:\n    \"\"\"Calculate a team's record against teams in their conference.\"\"\"\n    # Get all teams in the same conference\n    conf_teams = teams.filter(pl.col('conf') == conference)['team'].to_list()\n    if team in conf_teams:\n        conf_teams.remove(team)  # Remove the team itself\n    \n    # Convert to full names\n    team_full = team_map[team]\n    conf_teams_full = [team_map[t] for t in conf_teams]\n    \n    # Filter games against conference opponents\n    conf_games = results.filter(\n        ((pl.col('VisTm') == team_full) & (pl.col('HomeTm').is_in(conf_teams_full))) |\n        ((pl.col('HomeTm') == team_full) & (pl.col('VisTm').is_in(conf_teams_full)))\n    )\n    \n    wins = conf_games.filter(pl.col('winner') == team_full).height\n    losses = conf_games.filter(pl.col('winner') != team_full).height\n    \n    return wins, losses\n\ndef calculate_top_10_record(team: str, top_10_teams: List[str], results: pl.DataFrame, team_map: Dict[str, str]) -> Tuple[int, int]:\n    \"\"\"Calculate a team's record against top 10 teams.\"\"\"\n    # Convert to full names\n    team_full = team_map[team]\n    top_10_teams_full = [team_map[t] for t in top_10_teams]\n    \n    # Filter games against top 10 teams\n    top_10_games = results.filter(\n        ((pl.col('VisTm') == team_full) & (pl.col('HomeTm').is_in(top_10_teams_full))) |\n        ((pl.col('HomeTm') == team_full) & (pl.col('VisTm').is_in(top_10_teams_full)))\n    )\n    \n    wins = top_10_games.filter(pl.col('winner') == team_full).height\n    losses = top_10_games.filter(pl.col('winner') != team_full).height\n    \n    return wins, losses\n\ndef calculate_point_differential(team: str, results: pl.DataFrame, team_map: Dict[str, str]) -> int:\n    \"\"\"Calculate a team's point differential for all games.\"\"\"\n    team_full = team_map[team]\n    \n    # Games where team was home\n    home_games = results.filter(pl.col('HomeTm') == team_full)\n    home_diff = home_games.with_columns(\n        diff=pl.when(pl.col('winner') == team_full)\n        .then(pl.col('winner_pts') - pl.col('loser_pts'))\n        .otherwise(pl.col('loser_pts') - pl.col('winner_pts'))\n    )['diff'].sum()\n    \n    # Games where team was visitor\n    away_games = results.filter(pl.col('VisTm') == team_full)\n    away_diff = away_games.with_columns(\n        diff=pl.when(pl.col('winner') == team_full)\n        .then(pl.col('winner_pts') - pl.col('loser_pts'))\n        .otherwise(pl.col('loser_pts') - pl.col('winner_pts'))\n    )['diff'].sum()\n    \n    return home_diff + away_diff\n\n# --- Tiebreaker Logic ---\n\ndef _calculate_win_percentage(wins: int, losses: int) -> float:\n    \"\"\"Calculates win percentage, handling division by zero.\"\"\"\n    if wins + losses == 0:\n        return 0.0\n    return wins / (wins + losses)\n\ndef _get_record_against_teams(team: str, opponent_list: List[str], all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]]) -> Tuple[int, int]:\n    \"\"\"Calculates a team's W/L record against a specific list of opponents.\"\"\"\n    wins = 0\n    losses = 0\n    for opponent in opponent_list:\n        if team == opponent: # Don't compare team against itself\n            continue\n        w, l = all_h2h_records.get((team, opponent), (0, 0))\n        wins += w\n        losses += l\n    return wins, losses\n\ndef break_two_way_tie(team1: str, team2: str,\n                      all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]],\n                      all_div_records: Dict[str, Tuple[int, int]],\n                      all_conf_records: Dict[str, Tuple[int, int]],\n                      all_point_diffs: Dict[str, int],\n                      teams: pl.DataFrame,\n                      playoff_eligible_east: List[str],\n                      playoff_eligible_west: List[str]) -> Tuple[str, str]:\n    \"\"\"Apply NBA tiebreaker rules for two teams. Returns (winner, tiebreaker_used).\"\"\"\n    \n    # Cache team info to avoid repeated lookups\n    team1_info = teams.filter(pl.col('team') == team1).row(index=0, named=True)\n    team2_info = teams.filter(pl.col('team') == team2).row(index=0, named=True)\n    if not team1_info or not team2_info:\n        # Handle cases where team info might be missing (shouldn't happen with good data)\n        # Defaulting to team1, but logging or raising an error might be better\n        print(f\"Warning: Missing team info for {team1} or {team2}\")\n        return team1, \"error_missing_team_info\" \n\n    # (-) Overall winning percentage is assumed to be equal for tied teams\n\n    # (1) Better winning percentage in games against each other\n    t1_h2h_wins, t2_h2h_wins = all_h2h_records.get((team1, team2), (0, 0))\n    if t1_h2h_wins > t2_h2h_wins:\n        return team1, \"h2h_wins\"\n    if t2_h2h_wins > t1_h2h_wins:\n        return team2, \"h2h_wins\"\n\n    # (2) Division leader wins a tie over a team not leading a division\n    # Note: Requires knowing which teams *won* their division overall, not just their record.\n    # This information isn't directly available in the inputs. Assuming this check is implicitly handled\n    # by overall record or needs external data. Skipping for now as it cannot be calculated.\n    # print(\"Warning: Tiebreaker step (2) Division Leader not implemented due to missing data.\")\n    \n    # (3) Division won-lost percentage (only if teams are in same division)\n    if team1_info['division'] == team2_info['division']:\n        t1_div_wins, t1_div_losses = all_div_records.get(team1, (0, 0))\n        t2_div_wins, t2_div_losses = all_div_records.get(team2, (0, 0))\n        t1_div_pct = _calculate_win_percentage(t1_div_wins, t1_div_losses)\n        t2_div_pct = _calculate_win_percentage(t2_div_wins, t2_div_losses)\n        if t1_div_pct > t2_div_pct:\n            return team1, \"division_record_pct\"\n        if t2_div_pct > t1_div_pct:\n            return team2, \"division_record_pct\"\n            \n    # (4) Conference won-lost percentage\n    t1_conf_wins, t1_conf_losses = all_conf_records.get(team1, (0, 0))\n    t2_conf_wins, t2_conf_losses = all_conf_records.get(team2, (0, 0))\n    t1_conf_pct = _calculate_win_percentage(t1_conf_wins, t1_conf_losses)\n    t2_conf_pct = _calculate_win_percentage(t2_conf_wins, t2_conf_losses)\n    if t1_conf_pct > t2_conf_pct:\n        return team1, \"conference_record_pct\"\n    if t2_conf_pct > t1_conf_pct:\n        return team2, \"conference_record_pct\"\n\n    # (5) Better winning percentage against teams eligible for the playoffs in own conference\n    playoff_eligible_own_conf = playoff_eligible_east if team1_info['conf'] == 'East' else playoff_eligible_west\n    t1_vs_eligible_own_wins, t1_vs_eligible_own_losses = _get_record_against_teams(team1, playoff_eligible_own_conf, all_h2h_records)\n    t2_vs_eligible_own_wins, t2_vs_eligible_own_losses = _get_record_against_teams(team2, playoff_eligible_own_conf, all_h2h_records)\n    t1_vs_eligible_own_pct = _calculate_win_percentage(t1_vs_eligible_own_wins, t1_vs_eligible_own_losses)\n    t2_vs_eligible_own_pct = _calculate_win_percentage(t2_vs_eligible_own_wins, t2_vs_eligible_own_losses)\n    if t1_vs_eligible_own_pct > t2_vs_eligible_own_pct:\n        return team1, \"vs_playoff_eligible_own_conf_pct\"\n    if t2_vs_eligible_own_pct > t1_vs_eligible_own_pct:\n        return team2, \"vs_playoff_eligible_own_conf_pct\"\n\n    # (6) Better winning percentage against teams eligible for the playoffs in other conference\n    playoff_eligible_other_conf = playoff_eligible_west if team1_info['conf'] == 'East' else playoff_eligible_east\n    t1_vs_eligible_other_wins, t1_vs_eligible_other_losses = _get_record_against_teams(team1, playoff_eligible_other_conf, all_h2h_records)\n    t2_vs_eligible_other_wins, t2_vs_eligible_other_losses = _get_record_against_teams(team2, playoff_eligible_other_conf, all_h2h_records)\n    t1_vs_eligible_other_pct = _calculate_win_percentage(t1_vs_eligible_other_wins, t1_vs_eligible_other_losses)\n    t2_vs_eligible_other_pct = _calculate_win_percentage(t2_vs_eligible_other_wins, t2_vs_eligible_other_losses)\n    if t1_vs_eligible_other_pct > t2_vs_eligible_other_pct:\n        return team1, \"vs_playoff_eligible_other_conf_pct\"\n    if t2_vs_eligible_other_pct > t1_vs_eligible_other_pct:\n        return team2, \"vs_playoff_eligible_other_conf_pct\"\n\n    # (7) Better net result of total points scored less total points allowed against all opponents (\u201cpoint differential\u201d)\n    team1_diff = all_point_diffs.get(team1, -float('inf'))\n    team2_diff = all_point_diffs.get(team2, -float('inf'))\n    if team1_diff > team2_diff:\n        return team1, \"point_differential\"\n    # If point differentials are also equal (highly unlikely), default to team1 or random choice\n    # Returning team2 here follows the original code's final else clause implicitly\n    return team2, \"point_differential\"\n\n# --- New/Modified Helpers for Multi-Way ---\n\ndef _get_h2h_pct_among_tied(team: str, tied_group: List[str], all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]]) -> float:\n    \"\"\"Calculates H2H win pct for a team ONLY against others in the tied_group.\"\"\"\n    wins, losses = _get_record_against_teams(team, tied_group, all_h2h_records)\n    return _calculate_win_percentage(wins, losses)\n\ndef _get_div_pct(team: str, all_div_records: Dict[str, Tuple[int, int]]) -> float:\n    \"\"\"Gets division win pct from pre-calculated records.\"\"\"\n    wins, losses = all_div_records.get(team, (0, 0))\n    return _calculate_win_percentage(wins, losses)\n\ndef _get_conf_pct(team: str, all_conf_records: Dict[str, Tuple[int, int]]) -> float:\n    \"\"\"Gets conference win pct from pre-calculated records.\"\"\"\n    wins, losses = all_conf_records.get(team, (0, 0))\n    return _calculate_win_percentage(wins, losses)\n\ndef _get_vs_playoff_eligible_pct(team: str, own_conf_eligible: List[str], all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]]) -> float:\n    \"\"\"Calculates win pct against playoff eligible teams in own conference.\"\"\"\n    wins, losses = _get_record_against_teams(team, own_conf_eligible, all_h2h_records)\n    return _calculate_win_percentage(wins, losses)\n\n# Hypothetical function - requires external data/logic\ndef _is_division_leader(team: str, teams_table: pl.DataFrame, all_div_records: Dict[str, Tuple[int, int]], scenario_standings: pl.DataFrame) -> bool:\n    \"\"\"Checks if team is the undisputed leader (most wins, no ties) in their division for the given scenario.\"\"\"\n    try:\n        # Find the team's division and wins in this scenario\n        team_info = scenario_standings.filter(pl.col('team') == team)\n        if team_info.is_empty():\n            return False # Team not found in standings?\n        \n        team_division = team_info.select('division').item()\n        team_wins = team_info.select('wins').item()\n\n        # Get all teams in the same division from the scenario standings\n        division_standings = scenario_standings.filter(pl.col('division') == team_division)\n\n        # Find the maximum wins in that division\n        max_wins_in_division = division_standings.select(pl.max('wins')).item()\n\n        # Check if the team's wins match the maximum\n        if team_wins != max_wins_in_division:\n            return False # Not the leader\n        \n        # Check if *only one* team achieved the maximum wins\n        num_teams_with_max_wins = division_standings.filter(pl.col('wins') == max_wins_in_division).height\n        \n        # Return True only if the team has max wins and is the *only* one with max wins\n        return num_teams_with_max_wins == 1\n    \n    except Exception as e:\n        # Log error or handle appropriately\n        print(f\"Error in _is_division_leader for team {team}: {e}\")\n        return False # Default to False on error\n\n# --- Main Multi-Way Tiebreaker Function (Refactored) ---\ndef break_multi_way_tie(tied_teams: List[str],\n                        all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]],\n                        all_div_records: Dict[str, Tuple[int, int]],\n                        all_conf_records: Dict[str, Tuple[int, int]],\n                        all_point_diffs: Dict[str, int],\n                        teams: pl.DataFrame, # Used for team info (conf, div)\n                        playoff_eligible_east: List[str],\n                        playoff_eligible_west: List[str],\n                        scenario_standings: pl.DataFrame) -> List[Tuple[str, str]]:\n    \"\"\"Apply NBA tiebreaker rules for three or more teams recursively.\"\"\"\n\n    # --- Base Cases ---\n    num_tied = len(tied_teams)\n    if num_tied == 0:\n        return []\n    if num_tied == 1:\n        return [(tied_teams[0], \"no_tie\")]\n    if num_tied == 2:\n        # Use the dedicated two-way tiebreaker\n        winner, tiebreaker = break_two_way_tie(tied_teams[0], tied_teams[1], all_h2h_records, all_div_records,\n                                             all_conf_records, all_point_diffs, teams,\n                                             playoff_eligible_east, playoff_eligible_west)\n        loser = tied_teams[1] if winner == tied_teams[0] else tied_teams[0]\n        return [(winner, tiebreaker), (loser, tiebreaker)]\n\n    # --- Recursive Multi-Way Tiebreaker Logic ---\n    \n    ranked_list: List[Tuple[str, str]] = []\n    remaining_to_rank = list(tied_teams) # Start with all teams needing ranking\n\n    # Helper to apply a sorting key and recursively rank subgroups\n    def apply_tiebreaker(key_func, tiebreaker_name, higher_is_better=True) -> bool:\n        nonlocal remaining_to_rank, ranked_list\n        \n        if not remaining_to_rank: return True # All teams ranked\n\n        # Sort remaining teams based on the current criterion\n        sorted_group = sorted(\n            remaining_to_rank,\n            key=key_func,\n            reverse=higher_is_better\n        )\n\n        # Group teams by their score according to the current criterion\n        grouped_by_score = []\n        if sorted_group:\n            current_group = [sorted_group[0]]\n            current_score = key_func(sorted_group[0])\n            for i in range(1, len(sorted_group)):\n                team = sorted_group[i]\n                score = key_func(team)\n                # Use tolerance for float comparison if needed, though unlikely here\n                if score == current_score:\n                    current_group.append(team)\n                else:\n                    grouped_by_score.append(current_group)\n                    current_group = [team]\n                    current_score = score\n            grouped_by_score.append(current_group)\n\n        # Check if this tiebreaker resolved anything\n        if len(grouped_by_score) > 1: # Did it create multiple rank levels?\n             newly_ranked = []\n             next_remaining = []\n             for group in grouped_by_score:\n                 if len(group) == 1:\n                     # This team is definitively ranked by this criterion\n                     newly_ranked.append((group[0], tiebreaker_name))\n                 else:\n                     # This subgroup remains tied, needs further breaking (recursive call)\n                     # Pass the subgroup back through the *entire* tiebreaker process\n                     recursive_ranks = break_multi_way_tie(group, all_h2h_records, all_div_records,\n                                                           all_conf_records, all_point_diffs, teams,\n                                                           playoff_eligible_east, playoff_eligible_west, \n                                                           scenario_standings)\n                     newly_ranked.extend(recursive_ranks)\n             \n             ranked_list.extend(newly_ranked)\n             remaining_to_rank = [] # All teams processed in this path\n             return True # Tiebreaker applied and resolved fully (recursively)\n        else:\n            # Tiebreaker did not differentiate the group, move to the next rule\n            return False\n\n    # --- Apply Rules Sequentially ---\n\n    # (1) Division leader wins tie from team not leading a division\n    # Pass scenario_standings to helper\n    leaders = [t for t in remaining_to_rank if _is_division_leader(t, teams, all_div_records, scenario_standings)]\n    non_leaders = [t for t in remaining_to_rank if t not in leaders]\n\n    if leaders and non_leaders: # Rule applies only if mix of leaders/non-leaders\n        # Pass scenario_standings in recursive calls\n        ranked_leaders = break_multi_way_tie(leaders, all_h2h_records, all_div_records,\n                                             all_conf_records, all_point_diffs, teams,\n                                             playoff_eligible_east, playoff_eligible_west, scenario_standings)\n        ranked_non_leaders = break_multi_way_tie(non_leaders, all_h2h_records, all_div_records,\n                                                 all_conf_records, all_point_diffs, teams,\n                                                 playoff_eligible_east, playoff_eligible_west, scenario_standings)\n        # Assign the 'division_leader' tag primarily to the leaders breaking the tie here\n        ranked_list = [(t, \"division_leader\" if t in leaders else tb) for t, tb in ranked_leaders] + \\\n                      [(t, tb) for t, tb in ranked_non_leaders]\n        return ranked_list # Tie resolved by this rule\n\n    # If Rule 1 didn't apply or resolve, proceed with the group 'remaining_to_rank'\n\n    # (2) Better winning percentage in all games among the tied teams\n    if apply_tiebreaker(lambda t: _get_h2h_pct_among_tied(t, remaining_to_rank, all_h2h_records), \"h2h_pct_among_tied\"):\n         return ranked_list\n\n    # (3) Division won-lost percentage (only if ALL teams are in same division)\n    first_team_div = teams.filter(pl.col('team') == remaining_to_rank[0]).select('division').item()\n    all_same_division = True\n    for team in remaining_to_rank[1:]:\n        if teams.filter(pl.col('team') == team).select('division').item() != first_team_div:\n            all_same_division = False\n            break\n            \n    if all_same_division:\n        if apply_tiebreaker(lambda t: _get_div_pct(t, all_div_records), \"division_record_pct\"):\n             return ranked_list\n\n    # (4) Conference won-lost percentage\n    if apply_tiebreaker(lambda t: _get_conf_pct(t, all_conf_records), \"conference_record_pct\"):\n         return ranked_list\n\n    # (5) Better winning percentage against teams eligible for the playoffs in own conference\n    # Determine own conference playoff eligible list based on the first team (all tied teams are in the same conf)\n    first_team_conf = teams.filter(pl.col('team') == remaining_to_rank[0]).select('conf').item()\n    own_conf_eligible = playoff_eligible_east if first_team_conf == 'East' else playoff_eligible_west\n    if apply_tiebreaker(lambda t: _get_vs_playoff_eligible_pct(t, own_conf_eligible, all_h2h_records), \"vs_playoff_eligible_own_conf_pct\"):\n         return ranked_list\n\n    # (6) Better net result (Point Differential)\n    # This is the final tiebreaker; it should fully rank the remaining teams.\n    final_sort = sorted(remaining_to_rank, key=lambda t: all_point_diffs.get(t, -float('inf')), reverse=True)\n    ranked_list.extend([(t, \"point_differential\") for t in final_sort])\n    \n    return ranked_list\n\ndef model(dbt, sess):\n    # Get the necessary data and convert to Polars\n    simulator = pl.from_pandas(dbt.ref(\"reg_season_simulator\").df())\n    teams = pl.from_pandas(dbt.ref(\"nba_teams\").df())\n    results = pl.from_pandas(dbt.ref(\"nba_raw_results\").df())\n    \n    # Create team info dictionary for faster lookups\n    team_info = {row['team']: dict(row) for row in teams.iter_rows(named=True)}\n    \n    # Create a mapping of team abbreviations to full names and vice-versa\n    team_map = dict(zip(teams[\"team\"].to_list(), teams[\"team_long\"].to_list()))\n    team_abbr_map = dict(zip(teams[\"team_long\"].to_list(), teams[\"team\"].to_list()))\n\n    # Pre-calculate all records using Polars operations\n    all_teams = teams[\"team\"].to_list()\n    \n    # --- Vectorized H2H Calculation ---\n    # Map full names in results to abbreviations\n    results_with_abbr = results.with_columns([\n        pl.col(\"HomeTm\").replace(team_abbr_map).alias(\"HomeTm_abbr\"),\n        pl.col(\"VisTm\").replace(team_abbr_map).alias(\"VisTm_abbr\"),\n        pl.col(\"winner\").replace(team_abbr_map).alias(\"winner_abbr\")\n    ])\n\n    # Determine team1/team2 for consistent pairing (team1 < team2 alphabetically)\n    h2h_results = results_with_abbr.with_columns([\n        pl.min_horizontal(pl.col(\"HomeTm_abbr\"), pl.col(\"VisTm_abbr\")).alias(\"team1\"),\n        pl.max_horizontal(pl.col(\"HomeTm_abbr\"), pl.col(\"VisTm_abbr\")).alias(\"team2\")\n    ])\n\n    # Calculate wins for team1 and team2 in each game\n    h2h_results = h2h_results.with_columns([\n        pl.when(pl.col(\"winner_abbr\") == pl.col(\"team1\")).then(1).otherwise(0).alias(\"team1_won\"),\n        pl.when(pl.col(\"winner_abbr\") == pl.col(\"team2\")).then(1).otherwise(0).alias(\"team2_won\")\n    ])\n\n    # Aggregate wins for each pair\n    h2h_summary = h2h_results.group_by([\"team1\", \"team2\"]).agg([\n        pl.sum(\"team1_won\"),\n        pl.sum(\"team2_won\")\n    ])\n\n    # Create all possible team pairs to ensure all matchups are covered\n    all_pairs_df = pl.DataFrame({\n        't1': [t1 for t1 in all_teams for t2 in all_teams if t1 < t2],\n        't2': [t2 for t1 in all_teams for t2 in all_teams if t1 < t2]\n    })\n\n    # Join summary with all pairs and fill missing games with 0 wins\n    h2h_final = all_pairs_df.join(\n        h2h_summary, \n        left_on=['t1', 't2'], \n        right_on=['team1', 'team2'], \n        how='left'\n    ).with_columns([\n        pl.col('team1_won').fill_null(0),\n        pl.col('team2_won').fill_null(0)\n    ]).select(['t1', 't2', 'team1_won', 'team2_won'])\n\n    # Convert to dictionary for faster lookups, ensuring both (t1, t2) and (t2, t1) exist\n    all_h2h_records = {}\n    for row in h2h_final.iter_rows(named=True):\n        t1, t2, t1_wins, t2_wins = row['t1'], row['t2'], row['team1_won'], row['team2_won']\n        all_h2h_records[(t1, t2)] = (t1_wins, t2_wins)\n        all_h2h_records[(t2, t1)] = (t2_wins, t1_wins)\n        \n    # Add entries for teams against themselves (0, 0) if needed by downstream logic, though typically not required for H2H\n    # for team in all_teams:\n    #     if (team, team) not in all_h2h_records:\n    #          all_h2h_records[(team, team)] = (0, 0)\n    # --- End Vectorized H2H Calculation ---\n\n    # --- Vectorized Division and Conference Record Calculation ---\n    # Prepare team info for joins\n    teams_sel = teams.select(['team', 'conf', 'division'])\n\n    # Join h2h results with team info for both teams\n    h2h_teams = h2h_final.join(\n        teams_sel, left_on='t1', right_on='team'\n    ).rename({\n        'conf': 'conf_t1',\n        'division': 'division_t1'\n    }).join(\n        teams_sel, left_on='t2', right_on='team'\n    ).rename({\n        'conf': 'conf_t2',\n        'division': 'division_t2'\n    })\n\n    # Create perspective from team1's view\n    persp1 = h2h_teams.select([\n        pl.col('t1').alias('team'),\n        pl.col('conf_t1'),\n        pl.col('division_t1'),\n        pl.col('conf_t2'),\n        pl.col('division_t2'),\n        pl.col('team1_won').alias('wins'),\n        pl.col('team2_won').alias('losses')\n    ])\n\n    # Create perspective from team2's view\n    persp2 = h2h_teams.select([\n        pl.col('t2').alias('team'),\n        pl.col('conf_t2').alias('conf_t1'), # Rename cols to match persp1\n        pl.col('division_t2').alias('division_t1'),\n        pl.col('conf_t1').alias('conf_t2'),\n        pl.col('division_t1').alias('division_t2'),\n        pl.col('team2_won').alias('wins'),\n        pl.col('team1_won').alias('losses')\n    ])\n\n    # Combine perspectives\n    all_perspectives = pl.concat([persp1, persp2])\n\n    # Calculate Division Records\n    div_summary = all_perspectives.filter(\n        pl.col('division_t1') == pl.col('division_t2')\n    ).group_by('team').agg([\n        pl.sum('wins').alias('div_wins'), \n        pl.sum('losses').alias('div_losses')\n    ])\n\n    # Calculate Conference Records\n    conf_summary = all_perspectives.filter(\n        pl.col('conf_t1') == pl.col('conf_t2')\n    ).group_by('team').agg([\n        pl.sum('wins').alias('conf_wins'), \n        pl.sum('losses').alias('conf_losses')\n    ])\n\n    # Convert summaries to dictionaries\n    all_div_records = {row['team']: (row['div_wins'], row['div_losses']) \n                      for row in div_summary.iter_rows(named=True)}\n    all_conf_records = {row['team']: (row['conf_wins'], row['conf_losses']) \n                       for row in conf_summary.iter_rows(named=True)}\n\n    # Ensure all teams are in the dictionaries\n    for team in all_teams:\n        if team not in all_div_records:\n            all_div_records[team] = (0, 0)\n        if team not in all_conf_records:\n            all_conf_records[team] = (0, 0)\n    # --- End Vectorized Division and Conference Record Calculation ---\n    \n    # --- Vectorized Point Differential Calculation ---\n    # Use results_with_abbr which has HomeTm_abbr, VisTm_abbr, winner_abbr\n    # Calculate point difference from the perspective of the home team\n    results_with_diff = results_with_abbr.with_columns([\n        pl.when(pl.col(\"HomeTm_abbr\") == pl.col(\"winner_abbr\"))\n          .then(pl.col(\"winner_pts\") - pl.col(\"loser_pts\"))\n          .otherwise(pl.col(\"loser_pts\") - pl.col(\"winner_pts\"))\n          .alias(\"game_diff_home_perspective\")\n    ])\n\n    # Create DataFrame for home team differentials\n    home_diffs = results_with_diff.select([\n        pl.col(\"HomeTm_abbr\").alias(\"team\"),\n        pl.col(\"game_diff_home_perspective\").alias(\"diff\")\n    ])\n\n    # Create DataFrame for visitor team differentials (negative of home diff)\n    away_diffs = results_with_diff.select([\n        pl.col(\"VisTm_abbr\").alias(\"team\"),\n        (-pl.col(\"game_diff_home_perspective\")).alias(\"diff\")\n    ])\n\n    # Combine home and away differentials\n    all_diffs = pl.concat([home_diffs, away_diffs])\n\n    # Group by team and sum differentials\n    point_diff_summary = all_diffs.group_by(\"team\").agg(\n        pl.sum(\"diff\").alias(\"total_diff\")\n    )\n\n    # Convert to dictionary\n    all_point_diffs = {row['team']: row['total_diff'] for row in point_diff_summary.iter_rows(named=True)}\n\n    # Ensure all teams are in the dictionary, defaulting to 0 if they had no games\n    for team in all_teams:\n        if team not in all_point_diffs:\n            all_point_diffs[team] = 0\n    # --- End Vectorized Point Differential Calculation ---\n    \n    # Pre-calculate wins and losses for each team in each scenario\n    wins = simulator.group_by(['scenario_id', 'winning_team']).count().rename({'count': 'wins', 'winning_team': 'team'})\n    losses = simulator.filter(\n        ((pl.col('home_team') != pl.col('winning_team')) & pl.col('home_team').is_not_null()) |\n        ((pl.col('visiting_team') != pl.col('winning_team')) & pl.col('visiting_team').is_not_null())\n    ).group_by(['scenario_id', 'home_team']).count().rename({'count': 'losses', 'home_team': 'team'})\n    \n    # Merge wins and losses\n    standings = wins.join(losses, on=['scenario_id', 'team'], how='outer').fill_null(0)\n    \n    # Join standings with teams to get conference info\n    standings = standings.join(teams.select(['team', 'conf', 'division']), on='team', how='left')\n    \n    # Process each scenario\n    output_data = []\n    scenario_ids = standings['scenario_id'].unique().to_list()\n    \n    for scenario_id in scenario_ids:\n        try:\n            # Get standings for this scenario\n            scenario_standings = standings.filter(pl.col('scenario_id') == scenario_id)\n            \n            # Calculate playoff eligible teams (top 10 per conference, with ties)\n            def get_playoff_eligible(standings_df: pl.DataFrame, conf: str) -> List[str]:\n                conf_standings = standings_df.filter(pl.col('conf') == conf).sort('wins', descending=True)\n                if conf_standings.height == 0:\n                    return []\n                # Find the 10th best win total (or last if fewer than 10 teams)\n                cutoff_index = min(9, conf_standings.height - 1)\n                tenth_place_wins = conf_standings[cutoff_index]['wins'].item()\n                # Include all teams with wins >= 10th place wins\n                eligible = conf_standings.filter(pl.col('wins') >= tenth_place_wins)\n                return eligible['team'].to_list()\n\n            playoff_eligible_east = get_playoff_eligible(scenario_standings, 'East')\n            playoff_eligible_west = get_playoff_eligible(scenario_standings, 'West')\n            # Removed top_10_overall as it's not used\n\n            # Group teams by conference and wins\n            east_standings = scenario_standings.filter(pl.col('conf') == 'East').sort('wins', descending=True)\n            west_standings = scenario_standings.filter(pl.col('conf') == 'West').sort('wins', descending=True)\n            \n            # Process each conference\n            def process_standings(conf_standings: pl.DataFrame, scenario_standings_full: pl.DataFrame):\n                # ^^ Added scenario_standings_full parameter\n                current_wins = None\n                tied_teams = []\n                rankings = []\n                \n                for row in conf_standings.iter_rows(named=True):\n                    if current_wins is None or row['wins'] == current_wins:\n                        tied_teams.append(row['team'])\n                        current_wins = row['wins']\n                    else:\n                        if len(tied_teams) > 1:\n                            # Break the tie (uses playoff_eligible_* from outer scope)\n                            resolved = break_multi_way_tie(tied_teams, all_h2h_records, all_div_records,\n                                                         all_conf_records, all_point_diffs, teams,\n                                                         playoff_eligible_east, playoff_eligible_west, \n                                                         scenario_standings_full)\n                            rankings.extend(resolved)\n                        else:\n                            rankings.extend([(t, \"no_tie\") for t in tied_teams])\n                        tied_teams = [row['team']]\n                        current_wins = row['wins']\n                \n                # Handle any remaining tied teams\n                if tied_teams:\n                    if len(tied_teams) > 1:\n                        # Pass scenario_standings_full\n                        resolved = break_multi_way_tie(tied_teams, all_h2h_records, all_div_records,\n                                                     all_conf_records, all_point_diffs, teams,\n                                                     playoff_eligible_east, playoff_eligible_west, \n                                                     scenario_standings_full)\n                        rankings.extend(resolved)\n                    else:\n                        rankings.extend([(t, \"no_tie\") for t in tied_teams])\n                \n                return rankings\n            \n            # Process rankings for this scenario\n            # Pass scenario_standings as the second argument\n            east_rankings = process_standings(east_standings, scenario_standings)\n            west_rankings = process_standings(west_standings, scenario_standings)\n            \n            # Add East teams\n            rank = 1\n            for team, tiebreaker in east_rankings:\n                try:\n                    team_info_row = team_info[team]\n                    team_wins = scenario_standings.filter(pl.col('team') == team)['wins'].item()\n                    output_data.append({\n                        \"scenario_id\": scenario_id,\n                        \"team\": team,\n                        \"conference\": \"East\",\n                        \"rank\": rank,\n                        \"division\": team_info_row['division'],\n                        \"tiebreaker_used\": tiebreaker,\n                        \"wins\": team_wins\n                    })\n                    rank += 1\n                except Exception as e:\n                    print(f\"Error processing East team {team} in scenario {scenario_id}: {e}\")\n            \n            # Add West teams\n            rank = 1\n            for team, tiebreaker in west_rankings:\n                try:\n                    team_info_row = team_info[team]\n                    team_wins = scenario_standings.filter(pl.col('team') == team)['wins'].item()\n                    output_data.append({\n                        \"scenario_id\": scenario_id,\n                        \"team\": team,\n                        \"conference\": \"West\",\n                        \"rank\": rank,\n                        \"division\": team_info_row['division'],\n                        \"tiebreaker_used\": tiebreaker,\n                        \"wins\": team_wins\n                    })\n                    rank += 1\n                except Exception as e:\n                    print(f\"Error processing West team {team} in scenario {scenario_id}: {e}\")\n        except Exception as e:\n            print(f\"Error processing scenario {scenario_id}: {e}\")\n    \n    # Convert final output to pandas DataFrame\n    return pd.DataFrame(output_data)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"nba_raw_results\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"nba_raw_results\\\"\", \"nba_teams\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"nba_teams\\\"\", \"reg_season_simulator\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"reg_season_simulator\\\"\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"mdsbox\"\n    schema = \"main\"\n    identifier = \"nba_tiebreakers_optimized\"\n    \n    def __repr__(self):\n        return '\"mdsbox\".\"main\".\"nba_tiebreakers_optimized\"'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nfl_elo_rollforward": {"database": "mdsbox", "schema": "main", "name": "nfl_elo_rollforward", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/prep/nfl_elo_rollforward.py", "original_file_path": "models/nfl/prep/nfl_elo_rollforward.py", "unique_id": "model.sports_sims.nfl_elo_rollforward", "fqn": ["sports_sims", "nfl", "prep", "nfl_elo_rollforward"], "alias": "nfl_elo_rollforward", "checksum": {"name": "sha256", "checksum": "e3fce09f62e13801d327a64d7e0e7faf0f2afe8366d72117ed606fc177506c85"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "config_keys_used": ["nfl_elo_offset"], "config_keys_defaults": [52.0]}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/prep/nfl_elo_rollforward.py", "unrendered_config": {"tags": "nfl", "materialized": "table", "config_keys_used": ["nfl_elo_offset"], "config_keys_defaults": [52.0]}, "created_at": 1756344405.0087411, "relation_name": "\"mdsbox\".\"main\".\"nfl_elo_rollforward\"", "raw_code": "import pandas as pd\nimport math\n\ndef calc_elo_diff(game_result: float, home_elo: float, visiting_elo: float, home_adv: float, scoring_margin: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    adj_home_elo = float(home_elo) + float(home_adv)\n    winner_elo_diff = visiting_elo - adj_home_elo if game_result == 1 else adj_home_elo - visiting_elo\n    margin_of_victory_multiplier = math.log(abs(scoring_margin)+1)*(2.2/(winner_elo_diff*0.001+2.2))\n    return 20.0 * (( game_result ) - (1.0 / (10.0 ** (-(visiting_elo - home_elo - home_adv) / 400.0) + 1.0))) * margin_of_victory_multiplier\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"nfl_elo_offset\",52.0)\n    team_ratings = dbt.ref(\"nfl_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"nfl_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, game_result,neutral_site,margin\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\",\"margin\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, game_result,neutral_site,margin) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change = calc_elo_diff(game_result, helo, velo, 0 if neutral_site == 1 else home_adv,margin)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change,margin))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)", "language": "python", "refs": [{"name": "nfl_raw_team_ratings", "package": null, "version": null}, {"name": "nfl_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.sports_sims.nfl_raw_team_ratings", "model.sports_sims.nfl_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/prep/nfl_elo_rollforward.py", "compiled": true, "compiled_code": "import pandas as pd\nimport math\n\ndef calc_elo_diff(game_result: float, home_elo: float, visiting_elo: float, home_adv: float, scoring_margin: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    adj_home_elo = float(home_elo) + float(home_adv)\n    winner_elo_diff = visiting_elo - adj_home_elo if game_result == 1 else adj_home_elo - visiting_elo\n    margin_of_victory_multiplier = math.log(abs(scoring_margin)+1)*(2.2/(winner_elo_diff*0.001+2.2))\n    return 20.0 * (( game_result ) - (1.0 / (10.0 ** (-(visiting_elo - home_elo - home_adv) / 400.0) + 1.0))) * margin_of_victory_multiplier\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"nfl_elo_offset\",52.0)\n    team_ratings = dbt.ref(\"nfl_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"nfl_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, game_result,neutral_site,margin\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\",\"margin\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, game_result,neutral_site,margin) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change = calc_elo_diff(game_result, helo, velo, 0 if neutral_site == 1 else home_adv,margin)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change,margin))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"nfl_latest_results\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"nfl_latest_results\\\"\", \"nfl_raw_team_ratings\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"nfl_raw_team_ratings\\\"\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {'nfl_elo_offset': 52.0}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"mdsbox\"\n    schema = \"main\"\n    identifier = \"nfl_elo_rollforward\"\n    \n    def __repr__(self):\n        return '\"mdsbox\".\"main\".\"nfl_elo_rollforward\"'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "operation.sports_sims.sports_sims-on-run-start-0": {"database": "mdsbox", "schema": "main", "name": "sports_sims-on-run-start-0", "resource_type": "operation", "package_name": "sports_sims", "path": "hooks/sports_sims-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.sports_sims.sports_sims-on-run-start-0", "fqn": ["sports_sims", "hooks", "sports_sims-on-run-start-0"], "alias": "sports_sims-on-run-start-0", "checksum": {"name": "sha256", "checksum": "c251a6e51b1fb1e9f360bf9032c87bb044825d3c9001f3afc0b33d1a0372add5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756344405.061793, "relation_name": null, "raw_code": "{{ register_upstream_external_models() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_duckdb.register_upstream_external_models"], "nodes": []}, "compiled_path": "../docs/compiled/sports_sims/./dbt_project.yml/hooks/sports_sims-on-run-start-0.sql", "compiled": true, "compiled_code": "\n\n\n\n  \n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n      \n      \n      \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n      \n      \n      \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n      \n      \n      \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n      \n      \n      \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n      \n      \n      \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n      \n      \n      \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n      \n      \n      \n    \n  \n    \n      \n      \n      \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n      \n      \n      \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n  \n  \n    \n  \n    \n  \n    \n  \n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 1}, "test.sports_sims.empty_table_nfl_raw_results_.4695a4b621": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nfl_raw_results_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nfl_raw_results_.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.empty_table_nfl_raw_results_.4695a4b621", "fqn": ["sports_sims", "empty_table_nfl_raw_results_"], "alias": "empty_table_nfl_raw_results_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/empty_table_nfl_raw_results_.sql", "unrendered_config": {}, "created_at": 1756344405.14003, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_raw_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_raw_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/empty_table_nfl_raw_results_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nfl_raw_results\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nfl_raw_results", "attached_node": "model.sports_sims.nfl_raw_results", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nfl_raw_results')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nfl_raw_schedule_.38577f458a": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nfl_raw_schedule_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nfl_raw_schedule_.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.empty_table_nfl_raw_schedule_.38577f458a", "fqn": ["sports_sims", "empty_table_nfl_raw_schedule_"], "alias": "empty_table_nfl_raw_schedule_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/empty_table_nfl_raw_schedule_.sql", "unrendered_config": {}, "created_at": 1756344405.145463, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_raw_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_raw_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/empty_table_nfl_raw_schedule_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nfl_raw_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nfl_raw_schedule", "attached_node": "model.sports_sims.nfl_raw_schedule", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nfl_raw_schedule')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nfl_raw_team_ratings_.fd40ff9f75": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nfl_raw_team_ratings_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nfl_raw_team_ratings_.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.empty_table_nfl_raw_team_ratings_.fd40ff9f75", "fqn": ["sports_sims", "empty_table_nfl_raw_team_ratings_"], "alias": "empty_table_nfl_raw_team_ratings_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/empty_table_nfl_raw_team_ratings_.sql", "unrendered_config": {}, "created_at": 1756344405.147198, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/empty_table_nfl_raw_team_ratings_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nfl_raw_team_ratings\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nfl_raw_team_ratings", "attached_node": "model.sports_sims.nfl_raw_team_ratings", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nfl_raw_team_ratings')) }}"}, "namespace": null}}, "test.sports_sims.unique_nfl_schedules_game_id.38f1c777a5": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nfl_schedules_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nfl_schedules_game_id.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.unique_nfl_schedules_game_id.38f1c777a5", "fqn": ["sports_sims", "unique_nfl_schedules_game_id"], "alias": "unique_nfl_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/unique_nfl_schedules_game_id.sql", "unrendered_config": {}, "created_at": 1756344405.1483421, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/unique_nfl_schedules_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nfl_schedules\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nfl_schedules", "attached_node": "model.sports_sims.nfl_schedules", "test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nfl_schedules')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nfl_schedules_game_id.3961bd8fd2": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_schedules_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_schedules_game_id.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_schedules_game_id.3961bd8fd2", "fqn": ["sports_sims", "not_null_nfl_schedules_game_id"], "alias": "not_null_nfl_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_schedules_game_id.sql", "unrendered_config": {}, "created_at": 1756344405.1488042, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_schedules_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"mdsbox\".\"main\".\"nfl_schedules\"\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nfl_schedules", "attached_node": "model.sports_sims.nfl_schedules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nfl_schedules')) }}"}, "namespace": null}}, "test.sports_sims.accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.3ce8130eae": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4", "resource_type": "test", "package_name": "sports_sims", "path": "accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.3ce8130eae", "fqn": ["sports_sims", "accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4"], "alias": "accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8.sql", "unrendered_config": {"alias": "accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8"}, "created_at": 1756344405.149274, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8\") }}", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/accepted_values_nfl_schedules_e2360209ca7eaf5661eecb30230cbcd8.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        type as value_field,\n        count(*) as n_records\n\n    from \"mdsbox\".\"main\".\"nfl_schedules\"\n    group by type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'reg_season','playin_r1','playin_r2','playoffs_r1','playoffs_r2','playoffs_r3','playoffs_r4'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.nfl_schedules", "attached_node": "model.sports_sims.nfl_schedules", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["reg_season", "playin_r1", "playin_r2", "playoffs_r1", "playoffs_r2", "playoffs_r3", "playoffs_r4"], "column_name": "type", "model": "{{ get_where_subquery(ref('nfl_schedules')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nfl_schedules_visiting_team.fa5caebf37": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_schedules_visiting_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_schedules_visiting_team.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_schedules_visiting_team.fa5caebf37", "fqn": ["sports_sims", "not_null_nfl_schedules_visiting_team"], "alias": "not_null_nfl_schedules_visiting_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_schedules_visiting_team.sql", "unrendered_config": {}, "created_at": 1756344405.174283, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_schedules_visiting_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visiting_team\nfrom \"mdsbox\".\"main\".\"nfl_schedules\"\nwhere visiting_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visiting_team", "file_key_name": "models.nfl_schedules", "attached_node": "model.sports_sims.nfl_schedules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('nfl_schedules')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nfl_schedules_home_team.4f29463b21": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_schedules_home_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_schedules_home_team.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_schedules_home_team.4f29463b21", "fqn": ["sports_sims", "not_null_nfl_schedules_home_team"], "alias": "not_null_nfl_schedules_home_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_schedules_home_team.sql", "unrendered_config": {}, "created_at": 1756344405.174793, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_schedules_home_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team\nfrom \"mdsbox\".\"main\".\"nfl_schedules\"\nwhere home_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team", "file_key_name": "models.nfl_schedules", "attached_node": "model.sports_sims.nfl_schedules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('nfl_schedules')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nfl_ratings_team.b2ede8bbf2": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_ratings_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_ratings_team.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_ratings_team.b2ede8bbf2", "fqn": ["sports_sims", "not_null_nfl_ratings_team"], "alias": "not_null_nfl_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_ratings_team.sql", "unrendered_config": {}, "created_at": 1756344405.1752582, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"nfl_ratings\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nfl_ratings", "attached_node": "model.sports_sims.nfl_ratings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nfl_ratings')) }}"}, "namespace": null}}, "test.sports_sims.unique_nfl_ratings_team.8d6615a017": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nfl_ratings_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nfl_ratings_team.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.unique_nfl_ratings_team.8d6615a017", "fqn": ["sports_sims", "unique_nfl_ratings_team"], "alias": "unique_nfl_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/unique_nfl_ratings_team.sql", "unrendered_config": {}, "created_at": 1756344405.175773, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/unique_nfl_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nfl_ratings\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nfl_ratings", "attached_node": "model.sports_sims.nfl_ratings", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nfl_ratings')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nfl_ratings_conf.c095117e8b": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_ratings_conf", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_ratings_conf.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_ratings_conf.c095117e8b", "fqn": ["sports_sims", "not_null_nfl_ratings_conf"], "alias": "not_null_nfl_ratings_conf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_ratings_conf.sql", "unrendered_config": {}, "created_at": 1756344405.1762428, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_ratings_conf.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect conf\nfrom \"mdsbox\".\"main\".\"nfl_ratings\"\nwhere conf is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "conf", "file_key_name": "models.nfl_ratings", "attached_node": "model.sports_sims.nfl_ratings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "conf", "model": "{{ get_where_subquery(ref('nfl_ratings')) }}"}, "namespace": null}}, "test.sports_sims.accepted_values_nfl_ratings_conf__AFC__NFC.a37211d1be": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "accepted_values_nfl_ratings_conf__AFC__NFC", "resource_type": "test", "package_name": "sports_sims", "path": "accepted_values_nfl_ratings_conf__AFC__NFC.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.accepted_values_nfl_ratings_conf__AFC__NFC.a37211d1be", "fqn": ["sports_sims", "accepted_values_nfl_ratings_conf__AFC__NFC"], "alias": "accepted_values_nfl_ratings_conf__AFC__NFC", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/accepted_values_nfl_ratings_conf__AFC__NFC.sql", "unrendered_config": {}, "created_at": 1756344405.176699, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/accepted_values_nfl_ratings_conf__AFC__NFC.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        conf as value_field,\n        count(*) as n_records\n\n    from \"mdsbox\".\"main\".\"nfl_ratings\"\n    group by conf\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'AFC','NFC'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "conf", "file_key_name": "models.nfl_ratings", "attached_node": "model.sports_sims.nfl_ratings", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["AFC", "NFC"], "column_name": "conf", "model": "{{ get_where_subquery(ref('nfl_ratings')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nfl_ratings_elo_rating.6dedfbc521": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_ratings_elo_rating", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_ratings_elo_rating.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_ratings_elo_rating.6dedfbc521", "fqn": ["sports_sims", "not_null_nfl_ratings_elo_rating"], "alias": "not_null_nfl_ratings_elo_rating", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_ratings_elo_rating.sql", "unrendered_config": {}, "created_at": 1756344405.1781812, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_ratings_elo_rating.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect elo_rating\nfrom \"mdsbox\".\"main\".\"nfl_ratings\"\nwhere elo_rating is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "elo_rating", "file_key_name": "models.nfl_ratings", "attached_node": "model.sports_sims.nfl_ratings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "elo_rating", "model": "{{ get_where_subquery(ref('nfl_ratings')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nfl_random_num_gen_.0eb88dc7a0": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nfl_random_num_gen_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nfl_random_num_gen_.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.empty_table_nfl_random_num_gen_.0eb88dc7a0", "fqn": ["sports_sims", "empty_table_nfl_random_num_gen_"], "alias": "empty_table_nfl_random_num_gen_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/empty_table_nfl_random_num_gen_.sql", "unrendered_config": {}, "created_at": 1756344405.178632, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_random_num_gen", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_random_num_gen"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/empty_table_nfl_random_num_gen_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nfl_random_num_gen\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nfl_random_num_gen", "attached_node": "model.sports_sims.nfl_random_num_gen", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nfl_random_num_gen')) }}"}, "namespace": null}}, "test.sports_sims.unique_nfl_teams_team_long.aba62e3173": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nfl_teams_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nfl_teams_team_long.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.unique_nfl_teams_team_long.aba62e3173", "fqn": ["sports_sims", "unique_nfl_teams_team_long"], "alias": "unique_nfl_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/unique_nfl_teams_team_long.sql", "unrendered_config": {}, "created_at": 1756344405.179701, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/unique_nfl_teams_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team_long as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nfl_teams\"\nwhere team_long is not null\ngroup by team_long\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nfl_teams", "attached_node": "model.sports_sims.nfl_teams", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nfl_teams')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nfl_teams_team_long.12e97e9531": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_teams_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_teams_team_long.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_teams_team_long.12e97e9531", "fqn": ["sports_sims", "not_null_nfl_teams_team_long"], "alias": "not_null_nfl_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_teams_team_long.sql", "unrendered_config": {}, "created_at": 1756344405.180216, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_teams_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_long\nfrom \"mdsbox\".\"main\".\"nfl_teams\"\nwhere team_long is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nfl_teams", "attached_node": "model.sports_sims.nfl_teams", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nfl_teams')) }}"}, "namespace": null}}, "test.sports_sims.unique_nfl_vegas_wins_team.af395b9444": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nfl_vegas_wins_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nfl_vegas_wins_team.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.unique_nfl_vegas_wins_team.af395b9444", "fqn": ["sports_sims", "unique_nfl_vegas_wins_team"], "alias": "unique_nfl_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/unique_nfl_vegas_wins_team.sql", "unrendered_config": {}, "created_at": 1756344405.18066, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/unique_nfl_vegas_wins_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nfl_vegas_wins\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nfl_vegas_wins", "attached_node": "model.sports_sims.nfl_vegas_wins", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nfl_vegas_wins')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nfl_vegas_wins_team.2b5b398b1d": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_vegas_wins_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_vegas_wins_team.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_vegas_wins_team.2b5b398b1d", "fqn": ["sports_sims", "not_null_nfl_vegas_wins_team"], "alias": "not_null_nfl_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_vegas_wins_team.sql", "unrendered_config": {}, "created_at": 1756344405.181107, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_vegas_wins_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"nfl_vegas_wins\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nfl_vegas_wins", "attached_node": "model.sports_sims.nfl_vegas_wins", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nfl_vegas_wins')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nfl_vegas_wins_win_total.9fd12813b7": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nfl_vegas_wins_win_total", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nfl_vegas_wins_win_total.sql", "original_file_path": "models/_nfl_docs.yml", "unique_id": "test.sports_sims.not_null_nfl_vegas_wins_win_total.9fd12813b7", "fqn": ["sports_sims", "not_null_nfl_vegas_wins_win_total"], "alias": "not_null_nfl_vegas_wins_win_total", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nfl_docs.yml/not_null_nfl_vegas_wins_win_total.sql", "unrendered_config": {}, "created_at": 1756344405.181545, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nfl_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nfl_docs.yml/not_null_nfl_vegas_wins_win_total.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect win_total\nfrom \"mdsbox\".\"main\".\"nfl_vegas_wins\"\nwhere win_total is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "win_total", "file_key_name": "models.nfl_vegas_wins", "attached_node": "model.sports_sims.nfl_vegas_wins", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "win_total", "model": "{{ get_where_subquery(ref('nfl_vegas_wins')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nba_raw_schedule_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_raw_schedule_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0", "fqn": ["sports_sims", "empty_table_nba_raw_schedule_"], "alias": "empty_table_nba_raw_schedule_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/empty_table_nba_raw_schedule_.sql", "unrendered_config": {}, "created_at": 1756344405.185104, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_raw_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_raw_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/empty_table_nba_raw_schedule_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nba_raw_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_raw_schedule", "attached_node": "model.sports_sims.nba_raw_schedule", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_raw_schedule')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nba_raw_team_ratings_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_raw_team_ratings_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759", "fqn": ["sports_sims", "empty_table_nba_raw_team_ratings_"], "alias": "empty_table_nba_raw_team_ratings_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/empty_table_nba_raw_team_ratings_.sql", "unrendered_config": {}, "created_at": 1756344405.186249, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_raw_team_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/empty_table_nba_raw_team_ratings_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nba_raw_team_ratings\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_raw_team_ratings", "attached_node": "model.sports_sims.nba_raw_team_ratings", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_raw_team_ratings')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nba_raw_xf_series_to_seed_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_raw_xf_series_to_seed_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f", "fqn": ["sports_sims", "empty_table_nba_raw_xf_series_to_seed_"], "alias": "empty_table_nba_raw_xf_series_to_seed_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/empty_table_nba_raw_xf_series_to_seed_.sql", "unrendered_config": {}, "created_at": 1756344405.1873121, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_raw_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_raw_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/empty_table_nba_raw_xf_series_to_seed_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nba_raw_xf_series_to_seed\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_raw_xf_series_to_seed", "attached_node": "model.sports_sims.nba_raw_xf_series_to_seed", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_raw_xf_series_to_seed')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_latest_elo_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_latest_elo_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f", "fqn": ["sports_sims", "unique_nba_latest_elo_team"], "alias": "unique_nba_latest_elo_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_latest_elo_team.sql", "unrendered_config": {}, "created_at": 1756344405.188433, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_latest_elo_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_latest_elo\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_latest_elo", "attached_node": "model.sports_sims.nba_latest_elo", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_latest_elo')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nba_latest_elo_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_latest_elo_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f", "fqn": ["sports_sims", "empty_table_nba_latest_elo_"], "alias": "empty_table_nba_latest_elo_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/empty_table_nba_latest_elo_.sql", "unrendered_config": {}, "created_at": 1756344405.188891, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/empty_table_nba_latest_elo_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nba_latest_elo\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_latest_elo", "attached_node": "model.sports_sims.nba_latest_elo", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_latest_elo')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_latest_results_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_latest_results_game_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46", "fqn": ["sports_sims", "unique_nba_latest_results_game_id"], "alias": "unique_nba_latest_results_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_latest_results_game_id.sql", "unrendered_config": {}, "created_at": 1756344405.1899898, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_latest_results_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_game_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864", "fqn": ["sports_sims", "not_null_nba_latest_results_game_id"], "alias": "not_null_nba_latest_results_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_game_id.sql", "unrendered_config": {}, "created_at": 1756344405.19043, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_home_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_home_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c", "fqn": ["sports_sims", "not_null_nba_latest_results_home_team"], "alias": "not_null_nba_latest_results_home_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_home_team.sql", "unrendered_config": {}, "created_at": 1756344405.190874, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_home_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere home_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_home_team_score", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_home_team_score.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd", "fqn": ["sports_sims", "not_null_nba_latest_results_home_team_score"], "alias": "not_null_nba_latest_results_home_team_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_home_team_score.sql", "unrendered_config": {}, "created_at": 1756344405.191314, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_home_team_score.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team_score\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere home_team_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team_score", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_score", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_visiting_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_visiting_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2", "fqn": ["sports_sims", "not_null_nba_latest_results_visiting_team"], "alias": "not_null_nba_latest_results_visiting_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_visiting_team.sql", "unrendered_config": {}, "created_at": 1756344405.1918058, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_visiting_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visiting_team\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere visiting_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visiting_team", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_visiting_team_score", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_visiting_team_score.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf", "fqn": ["sports_sims", "not_null_nba_latest_results_visiting_team_score"], "alias": "not_null_nba_latest_results_visiting_team_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_visiting_team_score.sql", "unrendered_config": {}, "created_at": 1756344405.192263, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_visiting_team_score.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visiting_team_score\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere visiting_team_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visiting_team_score", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team_score", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_winning_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_winning_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f", "fqn": ["sports_sims", "not_null_nba_latest_results_winning_team"], "alias": "not_null_nba_latest_results_winning_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_winning_team.sql", "unrendered_config": {}, "created_at": 1756344405.1927, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_winning_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect winning_team\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere winning_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "winning_team", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "winning_team", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_losing_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_losing_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2", "fqn": ["sports_sims", "not_null_nba_latest_results_losing_team"], "alias": "not_null_nba_latest_results_losing_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_losing_team.sql", "unrendered_config": {}, "created_at": 1756344405.193137, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_latest_results_losing_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect losing_team\nfrom \"mdsbox\".\"main\".\"nba_latest_results\"\nwhere losing_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "losing_team", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "losing_team", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_schedules_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_schedules_game_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b", "fqn": ["sports_sims", "unique_nba_schedules_game_id"], "alias": "unique_nba_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_schedules_game_id.sql", "unrendered_config": {}, "created_at": 1756344405.193581, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_schedules_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_schedules\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules", "test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_schedules_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_schedules_game_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1", "fqn": ["sports_sims", "not_null_nba_schedules_game_id"], "alias": "not_null_nba_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_schedules_game_id.sql", "unrendered_config": {}, "created_at": 1756344405.194087, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_schedules_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"mdsbox\".\"main\".\"nba_schedules\"\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}}, "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout", "resource_type": "test", "package_name": "sports_sims", "path": "accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19", "fqn": ["sports_sims", "accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout"], "alias": "accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec.sql", "unrendered_config": {"alias": "accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec"}, "created_at": 1756344405.194548, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec\") }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        type as value_field,\n        count(*) as n_records\n\n    from \"mdsbox\".\"main\".\"nba_schedules\"\n    group by type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'reg_season','playin_r1','playin_r2','playoffs_r1','playoffs_r2','playoffs_r3','playoffs_r4','tournament','knockout'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["reg_season", "playin_r1", "playin_r2", "playoffs_r1", "playoffs_r2", "playoffs_r3", "playoffs_r4", "tournament", "knockout"], "column_name": "type", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_schedules_visiting_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_schedules_visiting_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe", "fqn": ["sports_sims", "not_null_nba_schedules_visiting_team"], "alias": "not_null_nba_schedules_visiting_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_schedules_visiting_team.sql", "unrendered_config": {}, "created_at": 1756344405.195913, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_schedules_visiting_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visiting_team\nfrom \"mdsbox\".\"main\".\"nba_schedules\"\nwhere visiting_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visiting_team", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_schedules_home_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_schedules_home_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c", "fqn": ["sports_sims", "not_null_nba_schedules_home_team"], "alias": "not_null_nba_schedules_home_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_schedules_home_team.sql", "unrendered_config": {}, "created_at": 1756344405.196426, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_schedules_home_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team\nfrom \"mdsbox\".\"main\".\"nba_schedules\"\nwhere home_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_ratings_team.de3ad0b568": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_ratings_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_ratings_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_ratings_team.de3ad0b568", "fqn": ["sports_sims", "not_null_nba_ratings_team"], "alias": "not_null_nba_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_team.sql", "unrendered_config": {}, "created_at": 1756344405.196861, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"nba_ratings\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_ratings_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_ratings_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b", "fqn": ["sports_sims", "unique_nba_ratings_team"], "alias": "unique_nba_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_ratings_team.sql", "unrendered_config": {}, "created_at": 1756344405.197293, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_ratings\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_ratings_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_ratings_team_long.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7", "fqn": ["sports_sims", "not_null_nba_ratings_team_long"], "alias": "not_null_nba_ratings_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_team_long.sql", "unrendered_config": {}, "created_at": 1756344405.19773, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_long\nfrom \"mdsbox\".\"main\".\"nba_ratings\"\nwhere team_long is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_ratings_team_long.6615b31795": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_ratings_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_ratings_team_long.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_ratings_team_long.6615b31795", "fqn": ["sports_sims", "unique_nba_ratings_team_long"], "alias": "unique_nba_ratings_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_ratings_team_long.sql", "unrendered_config": {}, "created_at": 1756344405.198163, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_ratings_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team_long as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_ratings\"\nwhere team_long is not null\ngroup by team_long\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_ratings_conf", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_ratings_conf.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6", "fqn": ["sports_sims", "not_null_nba_ratings_conf"], "alias": "not_null_nba_ratings_conf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_conf.sql", "unrendered_config": {}, "created_at": 1756344405.198844, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_conf.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect conf\nfrom \"mdsbox\".\"main\".\"nba_ratings\"\nwhere conf is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "conf", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "conf", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "accepted_values_nba_ratings_conf__East__West", "resource_type": "test", "package_name": "sports_sims", "path": "accepted_values_nba_ratings_conf__East__West.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69", "fqn": ["sports_sims", "accepted_values_nba_ratings_conf__East__West"], "alias": "accepted_values_nba_ratings_conf__East__West", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/accepted_values_nba_ratings_conf__East__West.sql", "unrendered_config": {}, "created_at": 1756344405.199309, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/accepted_values_nba_ratings_conf__East__West.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        conf as value_field,\n        count(*) as n_records\n\n    from \"mdsbox\".\"main\".\"nba_ratings\"\n    group by conf\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'East','West'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "conf", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["East", "West"], "column_name": "conf", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_ratings_elo_rating", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_ratings_elo_rating.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393", "fqn": ["sports_sims", "not_null_nba_ratings_elo_rating"], "alias": "not_null_nba_ratings_elo_rating", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_elo_rating.sql", "unrendered_config": {}, "created_at": 1756344405.200581, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_ratings_elo_rating.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect elo_rating\nfrom \"mdsbox\".\"main\".\"nba_ratings\"\nwhere elo_rating is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "elo_rating", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "elo_rating", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nba_reg_season_schedule_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_reg_season_schedule_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01", "fqn": ["sports_sims", "empty_table_nba_reg_season_schedule_"], "alias": "empty_table_nba_reg_season_schedule_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/empty_table_nba_reg_season_schedule_.sql", "unrendered_config": {}, "created_at": 1756344405.2010932, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_reg_season_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_reg_season_schedule"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/empty_table_nba_reg_season_schedule_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nba_reg_season_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_reg_season_schedule", "attached_node": "model.sports_sims.nba_reg_season_schedule", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_reg_season_schedule')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_nba_random_num_gen_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_random_num_gen_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c", "fqn": ["sports_sims", "empty_table_nba_random_num_gen_"], "alias": "empty_table_nba_random_num_gen_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/empty_table_nba_random_num_gen_.sql", "unrendered_config": {}, "created_at": 1756344405.2021189, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_random_num_gen"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/empty_table_nba_random_num_gen_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"nba_random_num_gen\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_random_num_gen", "attached_node": "model.sports_sims.nba_random_num_gen", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_random_num_gen')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_teams_team_long.a9afa2e873": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_teams_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_teams_team_long.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_teams_team_long.a9afa2e873", "fqn": ["sports_sims", "unique_nba_teams_team_long"], "alias": "unique_nba_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_teams_team_long.sql", "unrendered_config": {}, "created_at": 1756344405.203209, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_teams_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team_long as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_teams\"\nwhere team_long is not null\ngroup by team_long\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nba_teams", "attached_node": "model.sports_sims.nba_teams", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nba_teams')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_teams_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_teams_team_long.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e", "fqn": ["sports_sims", "not_null_nba_teams_team_long"], "alias": "not_null_nba_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_teams_team_long.sql", "unrendered_config": {}, "created_at": 1756344405.203647, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_teams_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_long\nfrom \"mdsbox\".\"main\".\"nba_teams\"\nwhere team_long is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nba_teams", "attached_node": "model.sports_sims.nba_teams", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nba_teams')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_teams_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_teams_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1", "fqn": ["sports_sims", "unique_nba_teams_team"], "alias": "unique_nba_teams_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_teams_team.sql", "unrendered_config": {}, "created_at": 1756344405.204086, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_teams_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_teams\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_teams", "attached_node": "model.sports_sims.nba_teams", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_teams')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_teams_team.6d25569f6c": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_teams_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_teams_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_teams_team.6d25569f6c", "fqn": ["sports_sims", "not_null_nba_teams_team"], "alias": "not_null_nba_teams_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_teams_team.sql", "unrendered_config": {}, "created_at": 1756344405.2045388, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_teams"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_teams_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"nba_teams\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_teams", "attached_node": "model.sports_sims.nba_teams", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_teams')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_vegas_wins_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_vegas_wins_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb", "fqn": ["sports_sims", "unique_nba_vegas_wins_team"], "alias": "unique_nba_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_vegas_wins_team.sql", "unrendered_config": {}, "created_at": 1756344405.2050261, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_vegas_wins_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_vegas_wins\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_vegas_wins", "attached_node": "model.sports_sims.nba_vegas_wins", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_vegas_wins')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_vegas_wins_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_vegas_wins_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e", "fqn": ["sports_sims", "not_null_nba_vegas_wins_team"], "alias": "not_null_nba_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_vegas_wins_team.sql", "unrendered_config": {}, "created_at": 1756344405.2054772, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_vegas_wins_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"nba_vegas_wins\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_vegas_wins", "attached_node": "model.sports_sims.nba_vegas_wins", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_vegas_wins')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_vegas_wins_win_total", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_vegas_wins_win_total.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b", "fqn": ["sports_sims", "not_null_nba_vegas_wins_win_total"], "alias": "not_null_nba_vegas_wins_win_total", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_vegas_wins_win_total.sql", "unrendered_config": {}, "created_at": 1756344405.205916, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_vegas_wins"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_vegas_wins_win_total.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect win_total\nfrom \"mdsbox\".\"main\".\"nba_vegas_wins\"\nwhere win_total is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "win_total", "file_key_name": "models.nba_vegas_wins", "attached_node": "model.sports_sims.nba_vegas_wins", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "win_total", "model": "{{ get_where_subquery(ref('nba_vegas_wins')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_xf_series_to_seed_series_id", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_xf_series_to_seed_series_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf", "fqn": ["sports_sims", "not_null_nba_xf_series_to_seed_series_id"], "alias": "not_null_nba_xf_series_to_seed_series_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_xf_series_to_seed_series_id.sql", "unrendered_config": {}, "created_at": 1756344405.2063591, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_xf_series_to_seed_series_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect series_id\nfrom \"mdsbox\".\"main\".\"nba_xf_series_to_seed\"\nwhere series_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "series_id", "file_key_name": "models.nba_xf_series_to_seed", "attached_node": "model.sports_sims.nba_xf_series_to_seed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('nba_xf_series_to_seed')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_nba_xf_series_to_seed_series_id", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_xf_series_to_seed_series_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed", "fqn": ["sports_sims", "unique_nba_xf_series_to_seed_series_id"], "alias": "unique_nba_xf_series_to_seed_series_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/unique_nba_xf_series_to_seed_series_id.sql", "unrendered_config": {}, "created_at": 1756344405.206796, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/unique_nba_xf_series_to_seed_series_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    series_id as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"nba_xf_series_to_seed\"\nwhere series_id is not null\ngroup by series_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "series_id", "file_key_name": "models.nba_xf_series_to_seed", "attached_node": "model.sports_sims.nba_xf_series_to_seed", "test_metadata": {"name": "unique", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('nba_xf_series_to_seed')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_nba_xf_series_to_seed_seed", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_xf_series_to_seed_seed.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82", "fqn": ["sports_sims", "not_null_nba_xf_series_to_seed_seed"], "alias": "not_null_nba_xf_series_to_seed_seed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/_nba_docs.yml/not_null_nba_xf_series_to_seed_seed.sql", "unrendered_config": {}, "created_at": 1756344405.207231, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/sports_sims/models/_nba_docs.yml/not_null_nba_xf_series_to_seed_seed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect seed\nfrom \"mdsbox\".\"main\".\"nba_xf_series_to_seed\"\nwhere seed is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "seed", "file_key_name": "models.nba_xf_series_to_seed", "attached_node": "model.sports_sims.nba_xf_series_to_seed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "seed", "model": "{{ get_where_subquery(ref('nba_xf_series_to_seed')) }}"}, "namespace": null}}, "model.sports_sims.nfl_tiebreakers_optimized": {"database": "mdsbox", "schema": "main", "name": "nfl_tiebreakers_optimized", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/analysis/nfl_tiebreakers_optimized.py", "original_file_path": "models/nfl/analysis/nfl_tiebreakers_optimized.py", "unique_id": "model.sports_sims.nfl_tiebreakers_optimized", "fqn": ["sports_sims", "nfl", "analysis", "nfl_tiebreakers_optimized"], "alias": "nfl_tiebreakers_optimized", "checksum": {"name": "sha256", "checksum": "5ec114c43b6216324a70707793476b7bb48f9301232311b7a4f23e50c2632fec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/analysis/nfl_tiebreakers_optimized.py", "unrendered_config": {"tags": "nfl", "materialized": "table"}, "created_at": 1756350518.2454212, "relation_name": "\"mdsbox\".\"main\".\"nfl_tiebreakers_optimized\"", "raw_code": "import pandas as pd\nimport polars as pl\nimport numpy as np\nfrom typing import List, Dict, Tuple, Optional\n\n# NFL TIEBREAKER RULES IMPLEMENTATION\n# Two Clubs:\n# (1) Head-to-head record\n# (2) Division record (if both teams in same division)\n# (3) Common games record\n# (4) Conference record\n# (5) Strength of victory\n# (6) Strength of schedule\n# (7-12) Point-based tiebreakers (skipped - no score data)\n#\n# Three or More Clubs:\n# (1) Head-to-head record among tied teams\n# (2) Division record (if all teams in same division)\n# (3) Common games record\n# (4) Conference record\n# (5) Strength of victory\n# (6) Strength of schedule\n# (7-12) Point-based tiebreakers (skipped - no score data)\n\ndef calculate_head_to_head(team1: str, team2: str, results: pl.DataFrame) -> Tuple[int, int]:\n    \"\"\"Calculate head-to-head record between two teams.\"\"\"\n    h2h_games = results.filter(\n        ((pl.col('visiting_team') == team1) & (pl.col('home_team') == team2)) |\n        ((pl.col('visiting_team') == team2) & (pl.col('home_team') == team1))\n    )\n    \n    team1_wins = h2h_games.filter(pl.col('winning_team') == team1).height\n    team2_wins = h2h_games.filter(pl.col('winning_team') == team2).height\n    \n    return team1_wins, team2_wins\n\ndef calculate_division_record(team: str, division: str, results: pl.DataFrame, teams: pl.DataFrame) -> Tuple[int, int]:\n    \"\"\"Calculate a team's record against teams in their division.\"\"\"\n    division_teams = teams.filter(pl.col('division') == division)['team'].to_list()\n    if team in division_teams:\n        division_teams.remove(team)\n    \n    div_games = results.filter(\n        ((pl.col('visiting_team') == team) & (pl.col('home_team').is_in(division_teams))) |\n        ((pl.col('home_team') == team) & (pl.col('visiting_team').is_in(division_teams)))\n    )\n    \n    wins = div_games.filter(pl.col('winning_team') == team).height\n    losses = div_games.filter(pl.col('winning_team') != team).height\n    \n    return wins, losses\n\ndef calculate_conference_record(team: str, conference: str, results: pl.DataFrame, teams: pl.DataFrame) -> Tuple[int, int]:\n    \"\"\"Calculate a team's record against teams in their conference.\"\"\"\n    conf_teams = teams.filter(pl.col('conf') == conference)['team'].to_list()\n    if team in conf_teams:\n        conf_teams.remove(team)\n    \n    conf_games = results.filter(\n        ((pl.col('visiting_team') == team) & (pl.col('home_team').is_in(conf_teams))) |\n        ((pl.col('home_team') == team) & (pl.col('visiting_team').is_in(conf_teams)))\n    )\n    \n    wins = conf_games.filter(pl.col('winning_team') == team).height\n    losses = conf_games.filter(pl.col('winning_team') != team).height\n    \n    return wins, losses\n\ndef calculate_common_games_record(team: str, tied_teams: List[str], results: pl.DataFrame) -> Tuple[int, int]:\n    \"\"\"Calculate a team's record in games against common opponents.\"\"\"\n    # Find opponents that all tied teams have played\n    all_opponents = {}\n    \n    for t in [team] + tied_teams:\n        team_games = results.filter(\n            (pl.col('visiting_team') == t) | (pl.col('home_team') == t)\n        )\n        opponents = set()\n        for row in team_games.iter_rows(named=True):\n            opp = row['home_team'] if row['visiting_team'] == t else row['visiting_team']\n            if opp not in [team] + tied_teams:  # Exclude tied teams themselves\n                opponents.add(opp)\n        all_opponents[t] = opponents\n    \n    # Find common opponents (opponents played by ALL tied teams)\n    common_opponents = set.intersection(*all_opponents.values()) if all_opponents else set()\n    common_opponents = list(common_opponents)\n    \n    if not common_opponents:\n        return 0, 0\n    \n    # Calculate record against common opponents\n    common_games = results.filter(\n        ((pl.col('visiting_team') == team) & (pl.col('home_team').is_in(common_opponents))) |\n        ((pl.col('home_team') == team) & (pl.col('visiting_team').is_in(common_opponents)))\n    )\n    \n    wins = common_games.filter(pl.col('winning_team') == team).height\n    losses = common_games.filter(pl.col('winning_team') != team).height\n    \n    return wins, losses\n\ndef calculate_strength_of_victory(team: str, results: pl.DataFrame, all_team_records: Dict[str, Tuple[int, int]]) -> float:\n    \"\"\"Calculate strength of victory (combined win% of teams this team beat).\"\"\"\n    team_wins = results.filter(pl.col('winning_team') == team)\n    \n    if team_wins.height == 0:\n        return 0.0\n    \n    total_beaten_wins = 0\n    total_beaten_games = 0\n    \n    for row in team_wins.iter_rows(named=True):\n        beaten_team = row['home_team'] if row['visiting_team'] == team else row['visiting_team']\n        beaten_wins, beaten_losses = all_team_records.get(beaten_team, (0, 0))\n        total_beaten_wins += beaten_wins\n        total_beaten_games += beaten_wins + beaten_losses\n    \n    return total_beaten_wins / total_beaten_games if total_beaten_games > 0 else 0.0\n\ndef calculate_strength_of_schedule(team: str, results: pl.DataFrame, all_team_records: Dict[str, Tuple[int, int]]) -> float:\n    \"\"\"Calculate strength of schedule (combined win% of all opponents).\"\"\"\n    team_games = results.filter(\n        (pl.col('visiting_team') == team) | (pl.col('home_team') == team)\n    )\n    \n    if team_games.height == 0:\n        return 0.0\n    \n    total_opp_wins = 0\n    total_opp_games = 0\n    \n    for row in team_games.iter_rows(named=True):\n        opponent = row['home_team'] if row['visiting_team'] == team else row['visiting_team']\n        opp_wins, opp_losses = all_team_records.get(opponent, (0, 0))\n        total_opp_wins += opp_wins\n        total_opp_games += opp_wins + opp_losses\n    \n    return total_opp_wins / total_opp_games if total_opp_games > 0 else 0.0\n\ndef _calculate_win_percentage(wins: int, losses: int) -> float:\n    \"\"\"Calculates win percentage, handling division by zero.\"\"\"\n    if wins + losses == 0:\n        return 0.0\n    return wins / (wins + losses)\n\ndef _get_record_against_teams(team: str, opponent_list: List[str], all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]]) -> Tuple[int, int]:\n    \"\"\"Calculates a team's W/L record against a specific list of opponents.\"\"\"\n    wins = 0\n    losses = 0\n    for opponent in opponent_list:\n        if team == opponent:\n            continue\n        w, l = all_h2h_records.get((team, opponent), (0, 0))\n        wins += w\n        losses += l\n    return wins, losses\n\ndef break_two_way_tie(team1: str, team2: str,\n                      all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]],\n                      all_div_records: Dict[str, Tuple[int, int]],\n                      all_conf_records: Dict[str, Tuple[int, int]],\n                      all_common_records: Dict,\n                      all_sov: Dict[str, float],\n                      all_sos: Dict[str, float],\n                      teams: pl.DataFrame,\n                      results: pl.DataFrame) -> Tuple[str, str]:\n    \"\"\"Apply NFL tiebreaker rules for two teams. Returns (winner, tiebreaker_used).\"\"\"\n    \n    team1_info = teams.filter(pl.col('team') == team1).row(index=0, named=True)\n    team2_info = teams.filter(pl.col('team') == team2).row(index=0, named=True)\n    if not team1_info or not team2_info:\n        return team1, \"error_missing_team_info\"\n\n    # (1) Head-to-head record\n    t1_h2h_wins, t2_h2h_wins = all_h2h_records.get((team1, team2), (0, 0))\n    if t1_h2h_wins > t2_h2h_wins:\n        return team1, \"h2h_wins\"\n    if t2_h2h_wins > t1_h2h_wins:\n        return team2, \"h2h_wins\"\n\n    # (2) Division record (only if teams are in same division)\n    if team1_info['division'] == team2_info['division']:\n        t1_div_wins, t1_div_losses = all_div_records.get(team1, (0, 0))\n        t2_div_wins, t2_div_losses = all_div_records.get(team2, (0, 0))\n        t1_div_pct = _calculate_win_percentage(t1_div_wins, t1_div_losses)\n        t2_div_pct = _calculate_win_percentage(t2_div_wins, t2_div_losses)\n        if t1_div_pct > t2_div_pct:\n            return team1, \"division_record_pct\"\n        if t2_div_pct > t1_div_pct:\n            return team2, \"division_record_pct\"\n\n    # (3) Common games record\n    # Calculate common games record between the two teams\n    team1_common_wins, team1_common_losses = calculate_common_games_record(team1, [team2], results)\n    team2_common_wins, team2_common_losses = calculate_common_games_record(team2, [team1], results)\n    \n    # Only apply if both teams have common games\n    if team1_common_wins + team1_common_losses > 0 and team2_common_wins + team2_common_losses > 0:\n        team1_common_pct = _calculate_win_percentage(team1_common_wins, team1_common_losses)\n        team2_common_pct = _calculate_win_percentage(team2_common_wins, team2_common_losses)\n        if team1_common_pct > team2_common_pct:\n            return team1, \"common_games_pct\"\n        if team2_common_pct > team1_common_pct:\n            return team2, \"common_games_pct\"\n\n    # (4) Conference record\n    t1_conf_wins, t1_conf_losses = all_conf_records.get(team1, (0, 0))\n    t2_conf_wins, t2_conf_losses = all_conf_records.get(team2, (0, 0))\n    t1_conf_pct = _calculate_win_percentage(t1_conf_wins, t1_conf_losses)\n    t2_conf_pct = _calculate_win_percentage(t2_conf_wins, t2_conf_losses)\n    if t1_conf_pct > t2_conf_pct:\n        return team1, \"conference_record_pct\"\n    if t2_conf_pct > t1_conf_pct:\n        return team2, \"conference_record_pct\"\n\n    # (5) Strength of victory\n    team1_sov = all_sov.get(team1, 0.0)\n    team2_sov = all_sov.get(team2, 0.0)\n    if team1_sov > team2_sov:\n        return team1, \"strength_of_victory\"\n    if team2_sov > team1_sov:\n        return team2, \"strength_of_victory\"\n\n    # (6) Strength of schedule\n    team1_sos = all_sos.get(team1, 0.0)\n    team2_sos = all_sos.get(team2, 0.0)\n    if team1_sos > team2_sos:\n        return team1, \"strength_of_schedule\"\n    if team2_sos > team1_sos:\n        return team2, \"strength_of_schedule\"\n\n    # Final fallback (coin toss equivalent)\n    return team1, \"coin_toss\"\n\ndef _get_h2h_pct_among_tied(team: str, tied_group: List[str], all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]]) -> float:\n    \"\"\"Calculates H2H win pct for a team ONLY against others in the tied_group.\"\"\"\n    wins, losses = _get_record_against_teams(team, tied_group, all_h2h_records)\n    return _calculate_win_percentage(wins, losses)\n\ndef _get_div_pct(team: str, all_div_records: Dict[str, Tuple[int, int]]) -> float:\n    \"\"\"Gets division win pct from pre-calculated records.\"\"\"\n    wins, losses = all_div_records.get(team, (0, 0))\n    return _calculate_win_percentage(wins, losses)\n\ndef _get_conf_pct(team: str, all_conf_records: Dict[str, Tuple[int, int]]) -> float:\n    \"\"\"Gets conference win pct from pre-calculated records.\"\"\"\n    wins, losses = all_conf_records.get(team, (0, 0))\n    return _calculate_win_percentage(wins, losses)\n\ndef _get_common_games_pct(team: str, tied_group: List[str], results: pl.DataFrame) -> float:\n    \"\"\"Gets common games win pct for a team against tied group (calculated on-demand).\"\"\"\n    wins, losses = calculate_common_games_record(team, tied_group, results)\n    return _calculate_win_percentage(wins, losses)\n\ndef break_multi_way_tie(tied_teams: List[str],\n                        all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]],\n                        all_div_records: Dict[str, Tuple[int, int]],\n                        all_conf_records: Dict[str, Tuple[int, int]],\n                        all_sov: Dict[str, float],\n                        all_sos: Dict[str, float],\n                        teams: pl.DataFrame,\n                        results: pl.DataFrame) -> List[Tuple[str, str]]:\n    \"\"\"Break ties among 3+ teams. Returns list of (team, tiebreaker_used) in order.\"\"\"\n    \n    if len(tied_teams) <= 1:\n        return [(tied_teams[0], \"no_tie\")] if tied_teams else []\n    \n    if len(tied_teams) == 2:\n        # For two teams, we don't need the common games logic\n        winner, tb = break_two_way_tie(\n            tied_teams[0], tied_teams[1],\n            all_h2h_records, all_div_records, all_conf_records,\n            {}, all_sov, all_sos, teams, results  # Empty dict for common records\n        )\n        loser = tied_teams[1] if winner == tied_teams[0] else tied_teams[0]\n        return [(winner, tb), (loser, tb)]\n    \n    remaining_to_rank = tied_teams.copy()\n    ranked_list = []\n    \n    def apply_tiebreaker(criterion_func, tiebreaker_name: str) -> bool:\n        \"\"\"Apply a tiebreaker criterion and update rankings if it breaks any ties.\"\"\"\n        if len(remaining_to_rank) <= 1:\n            return True\n        \n        # Calculate criterion for all remaining teams\n        team_values = [(team, criterion_func(team)) for team in remaining_to_rank]\n        team_values.sort(key=lambda x: x[1], reverse=True)\n        \n        # Group teams by criterion value\n        best_value = team_values[0][1]\n        best_teams = [team for team, value in team_values if value == best_value]\n        \n        if len(best_teams) == 1:\n            # Clear winner\n            ranked_list.append((best_teams[0], tiebreaker_name))\n            remaining_to_rank.remove(best_teams[0])\n            \n            # NFL Rule: If remaining teams reduced to 2, restart with two-team format\n            if len(remaining_to_rank) == 2:\n                winner, tb = break_two_way_tie(\n                    remaining_to_rank[0], remaining_to_rank[1],\n                    all_h2h_records, all_div_records, all_conf_records,\n                    {}, all_sov, all_sos, teams, results\n                )\n                loser = remaining_to_rank[1] if winner == remaining_to_rank[0] else remaining_to_rank[0]\n                ranked_list.extend([(winner, tb), (loser, tb)])\n                remaining_to_rank.clear()\n                return True\n            \n            return False\n        elif len(best_teams) < len(remaining_to_rank):\n            # Partial tie break - some teams eliminated\n            eliminated_teams = [team for team in remaining_to_rank if team not in best_teams]\n            for team in eliminated_teams:\n                remaining_to_rank.remove(team)\n            \n            # NFL Rule: If remaining teams reduced to 2, restart with two-team format\n            if len(remaining_to_rank) == 2:\n                winner, tb = break_two_way_tie(\n                    remaining_to_rank[0], remaining_to_rank[1],\n                    all_h2h_records, all_div_records, all_conf_records,\n                    {}, all_sov, all_sos, teams, results\n                )\n                loser = remaining_to_rank[1] if winner == remaining_to_rank[0] else remaining_to_rank[0]\n                ranked_list.extend([(winner, tb), (loser, tb)])\n                remaining_to_rank.clear()\n                return True\n            # NFL Rule: If 3 teams remain after elimination, restart at step 1 of three-team format\n            elif len(remaining_to_rank) == 3:\n                # Restart the multi-way tie process with the remaining 3 teams\n                sub_results = break_multi_way_tie(\n                    remaining_to_rank, all_h2h_records, all_div_records, all_conf_records,\n                    all_sov, all_sos, teams, results\n                )\n                ranked_list.extend(sub_results)\n                remaining_to_rank.clear()\n                return True\n            \n            return False\n        \n        # No tie broken at this level\n        return False\n\n    # (1) Head-to-head among tied teams\n    if apply_tiebreaker(lambda t: _get_h2h_pct_among_tied(t, [x for x in remaining_to_rank if x != t], all_h2h_records), \"h2h_among_tied\"):\n        return ranked_list\n\n    # (2) Division record (only if all teams in same division)\n    first_team_div = teams.filter(pl.col('team') == remaining_to_rank[0]).select('division').item()\n    all_same_division = all(teams.filter(pl.col('team') == t).select('division').item() == first_team_div for t in remaining_to_rank)\n    \n    if all_same_division:\n        if apply_tiebreaker(lambda t: _get_div_pct(t, all_div_records), \"division_record_pct\"):\n            return ranked_list\n\n    # (3) Common games record\n    if apply_tiebreaker(lambda t: _get_common_games_pct(t, [x for x in remaining_to_rank if x != t], results), \"common_games_pct\"):\n        return ranked_list\n\n    # (4) Conference record\n    if apply_tiebreaker(lambda t: _get_conf_pct(t, all_conf_records), \"conference_record_pct\"):\n        return ranked_list\n\n    # (5) Strength of victory\n    if apply_tiebreaker(lambda t: all_sov.get(t, 0.0), \"strength_of_victory\"):\n        return ranked_list\n\n    # (6) Strength of schedule\n    if apply_tiebreaker(lambda t: all_sos.get(t, 0.0), \"strength_of_schedule\"):\n        return ranked_list\n\n    # Final fallback - random order\n    final_sort = sorted(remaining_to_rank)\n    ranked_list.extend([(t, \"coin_toss\") for t in final_sort])\n    \n    return ranked_list\n\ndef model(dbt, sess):\n    # Get data and use StringCache + Categoricals for fast joins\n    with pl.StringCache():\n        simulator = pl.from_pandas(dbt.ref(\"nfl_reg_season_simulator\").df()).select([\n            \"scenario_id\", \"home_team\", \"visiting_team\", \"winning_team\"\n        ]).with_columns([\n            pl.col(\"home_team\").cast(pl.Categorical),\n            pl.col(\"visiting_team\").cast(pl.Categorical), \n            pl.col(\"winning_team\").cast(pl.Categorical)\n        ])\n        \n        teams = pl.from_pandas(dbt.ref(\"nfl_ratings\").df()).select([\n            \"team\", \"conf\", \"division\"\n        ]).with_columns([\n            pl.col(\"team\").cast(pl.Categorical),\n            pl.col(\"conf\").cast(pl.Categorical),\n            pl.col(\"division\").cast(pl.Categorical)\n        ])\n        \n        # Create long-form table: one row per (scenario_id, team, win_flag)\n        # This eliminates all Python loops and iter_rows()\n        long_table = pl.concat([\n            # Home team perspective\n            simulator.select([\n                \"scenario_id\",\n                pl.col(\"home_team\").alias(\"team\"),\n                pl.when(pl.col(\"winning_team\") == pl.col(\"home_team\")).then(1).otherwise(0).alias(\"wins\"),\n                pl.lit(1).alias(\"games\")\n            ]),\n            # Visiting team perspective  \n            simulator.select([\n                \"scenario_id\", \n                pl.col(\"visiting_team\").alias(\"team\"),\n                pl.when(pl.col(\"winning_team\") == pl.col(\"visiting_team\")).then(1).otherwise(0).alias(\"wins\"),\n                pl.lit(1).alias(\"games\")\n            ])\n        ])\n        \n        # Calculate team records in one aggregation\n        team_records = long_table.group_by([\"scenario_id\", \"team\"]).agg([\n            pl.sum(\"wins\").alias(\"wins\"),\n            pl.sum(\"games\").alias(\"games\")\n        ]).with_columns([\n            (pl.col(\"games\") - pl.col(\"wins\")).alias(\"losses\")\n        ])\n        \n        # Join team metadata once\n        standings = team_records.join(teams, on=\"team\", how=\"left\")\n        \n        # Pre-calculate H2H records for tiebreaking\n        h2h_results = simulator.with_columns([\n            pl.min_horizontal(pl.col(\"home_team\"), pl.col(\"visiting_team\")).alias(\"team1\"),\n            pl.max_horizontal(pl.col(\"home_team\"), pl.col(\"visiting_team\")).alias(\"team2\"),\n            pl.when(pl.col(\"winning_team\") == pl.min_horizontal(pl.col(\"home_team\"), pl.col(\"visiting_team\"))).then(1).otherwise(0).alias(\"team1_won\"),\n            pl.when(pl.col(\"winning_team\") == pl.max_horizontal(pl.col(\"home_team\"), pl.col(\"visiting_team\"))).then(1).otherwise(0).alias(\"team2_won\")\n        ])\n        \n        h2h_summary = h2h_results.group_by([\"scenario_id\", \"team1\", \"team2\"]).agg([\n            pl.sum(\"team1_won\").alias(\"team1_wins\"),\n            pl.sum(\"team2_won\").alias(\"team2_wins\")\n        ])\n        \n        # Pre-calculate common games performance (used when H2H is tied or N/A)\n        # Common games = games against the same opponents\n        def calculate_common_games(tied_teams_df, games_data):\n            \"\"\"Calculate common games win percentage for tied teams\"\"\"\n            # Get all opponents each team played against\n            team_opponents = pl.concat([\n                games_data.select([\n                    \"scenario_id\", \n                    pl.col(\"home_team\").alias(\"team\"),\n                    pl.col(\"visiting_team\").alias(\"opponent\"),\n                    pl.when(pl.col(\"winning_team\") == pl.col(\"home_team\")).then(1).otherwise(0).alias(\"won\")\n                ]),\n                games_data.select([\n                    \"scenario_id\", \n                    pl.col(\"visiting_team\").alias(\"team\"),\n                    pl.col(\"home_team\").alias(\"opponent\"),\n                    pl.when(pl.col(\"winning_team\") == pl.col(\"visiting_team\")).then(1).otherwise(0).alias(\"won\")\n                ])\n            ])\n            \n            # Find common opponents for tied teams within each conference\n            tied_opponents = tied_teams_df.join(\n                team_opponents, on=[\"scenario_id\", \"team\"], how=\"inner\"\n            ).select([\"scenario_id\", \"conf\", \"team\", \"opponent\", \"won\"])\n            \n            # Group by scenario/conf/opponent to find which opponents are common to multiple tied teams\n            common_opponents = tied_opponents.group_by([\"scenario_id\", \"conf\", \"opponent\"]).agg([\n                pl.col(\"team\").n_unique().alias(\"teams_played_opponent\")\n            ]).join(\n                tied_teams_df.group_by([\"scenario_id\", \"conf\"]).agg([\n                    pl.col(\"team\").count().alias(\"total_tied_teams\")\n                ]), on=[\"scenario_id\", \"conf\"]\n            ).filter(pl.col(\"teams_played_opponent\") >= 2)  # At least 2 tied teams played this opponent\n            \n            # Calculate common games record for each tied team\n            common_games_performance = tied_opponents.join(\n                common_opponents.select([\"scenario_id\", \"conf\", \"opponent\"]),\n                on=[\"scenario_id\", \"conf\", \"opponent\"], how=\"inner\"\n            ).group_by([\"scenario_id\", \"conf\", \"team\"]).agg([\n                pl.sum(\"won\").alias(\"common_wins\"),\n                pl.count().alias(\"common_games\")\n            ]).with_columns([\n                (pl.col(\"common_wins\") / (pl.col(\"common_games\") + 1e-10)).alias(\"common_pct\")\n            ])\n            \n            return common_games_performance\n        \n        # Calculate strength of victory (sum of win percentages of defeated teams)\n        def calculate_strength_of_victory(tied_teams_df, games_data, team_records_df):\n            \"\"\"Calculate strength of victory for tied teams\"\"\"\n            # Get all teams each tied team defeated\n            team_victories = pl.concat([\n                games_data.filter(pl.col(\"winning_team\") == pl.col(\"home_team\")).select([\n                    \"scenario_id\", \n                    pl.col(\"home_team\").alias(\"team\"),\n                    pl.col(\"visiting_team\").alias(\"defeated_team\")\n                ]),\n                games_data.filter(pl.col(\"winning_team\") == pl.col(\"visiting_team\")).select([\n                    \"scenario_id\", \n                    pl.col(\"visiting_team\").alias(\"team\"),\n                    pl.col(\"home_team\").alias(\"defeated_team\")\n                ])\n            ])\n            \n            # Join with tied teams to only calculate for teams that need it\n            tied_victories = tied_teams_df.join(\n                team_victories, on=[\"scenario_id\", \"team\"], how=\"inner\"\n            )\n            \n            # Get the win percentage of each defeated team\n            defeated_team_records = team_records_df.with_columns([\n                (pl.col(\"wins\") / pl.col(\"games\")).alias(\"defeated_team_pct\")\n            ]).select([\"scenario_id\", \"team\", \"defeated_team_pct\"]).rename({\"team\": \"defeated_team\"})\n            \n            # Calculate strength of victory as sum of defeated teams' win percentages\n            strength_of_victory = tied_victories.join(\n                defeated_team_records, on=[\"scenario_id\", \"defeated_team\"], how=\"left\"\n            ).group_by([\"scenario_id\", \"conf\", \"team\"]).agg([\n                pl.sum(\"defeated_team_pct\").alias(\"strength_of_victory\"),\n                pl.count().alias(\"victories_count\")\n            ]).with_columns([\n                # Normalize by number of victories to get average opponent strength\n                (pl.col(\"strength_of_victory\") / (pl.col(\"victories_count\") + 1e-10)).alias(\"avg_defeated_pct\")\n            ])\n            \n            return strength_of_victory\n        \n        # Pre-calculate division and conference records\n        games_with_teams = simulator.join(\n            teams.rename({'conf': 'home_conf', 'division': 'home_division'}), \n            left_on='home_team', right_on='team'\n        ).join(\n            teams.rename({'conf': 'visiting_conf', 'division': 'visiting_division'}), \n            left_on='visiting_team', right_on='team'\n        )\n        \n        # Division records\n        div_records = pl.concat([\n            games_with_teams.filter(pl.col('home_division') == pl.col('visiting_division')).select([\n                \"scenario_id\",\n                pl.col(\"home_team\").alias(\"team\"),\n                pl.when(pl.col(\"winning_team\") == pl.col(\"home_team\")).then(1).otherwise(0).alias(\"wins\"),\n                pl.when(pl.col(\"winning_team\") != pl.col(\"home_team\")).then(1).otherwise(0).alias(\"losses\")\n            ]),\n            games_with_teams.filter(pl.col('home_division') == pl.col('visiting_division')).select([\n                \"scenario_id\",\n                pl.col(\"visiting_team\").alias(\"team\"),\n                pl.when(pl.col(\"winning_team\") == pl.col(\"visiting_team\")).then(1).otherwise(0).alias(\"wins\"),\n                pl.when(pl.col(\"winning_team\") != pl.col(\"visiting_team\")).then(1).otherwise(0).alias(\"losses\")\n            ])\n        ]).group_by([\"scenario_id\", \"team\"]).agg([\n            pl.sum(\"wins\").alias(\"div_wins\"),\n            pl.sum(\"losses\").alias(\"div_losses\")\n        ])\n        \n        # Conference records  \n        conf_records = pl.concat([\n            games_with_teams.filter(pl.col('home_conf') == pl.col('visiting_conf')).select([\n                \"scenario_id\",\n                pl.col(\"home_team\").alias(\"team\"),\n                pl.when(pl.col(\"winning_team\") == pl.col(\"home_team\")).then(1).otherwise(0).alias(\"wins\"),\n                pl.when(pl.col(\"winning_team\") != pl.col(\"home_team\")).then(1).otherwise(0).alias(\"losses\")\n            ]),\n            games_with_teams.filter(pl.col('home_conf') == pl.col('visiting_conf')).select([\n                \"scenario_id\",\n                pl.col(\"visiting_team\").alias(\"team\"),\n                pl.when(pl.col(\"winning_team\") == pl.col(\"visiting_team\")).then(1).otherwise(0).alias(\"wins\"),\n                pl.when(pl.col(\"winning_team\") != pl.col(\"visiting_team\")).then(1).otherwise(0).alias(\"losses\")\n            ])\n        ]).group_by([\"scenario_id\", \"team\"]).agg([\n            pl.sum(\"wins\").alias(\"conf_wins\"),\n            pl.sum(\"losses\").alias(\"conf_losses\")\n        ])\n        \n        # --- Simple Division Winner and Wildcard Logic ---\n        \n        # Step 1: Identify division winners using proper division tiebreaker sequence\n        # Join division and conference records for tiebreaking\n        standings_with_tiebreakers = standings.join(\n            div_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).join(\n            conf_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).with_columns([\n            (pl.col(\"div_wins\").fill_null(0) / (pl.col(\"div_wins\").fill_null(0) + pl.col(\"div_losses\").fill_null(0) + 1e-10)).alias(\"div_pct\"),\n            (pl.col(\"conf_wins\").fill_null(0) / (pl.col(\"conf_wins\").fill_null(0) + pl.col(\"conf_losses\").fill_null(0) + 1e-10)).alias(\"conf_pct\")\n        ])\n        \n        # Calculate strength of schedule for division tiebreakers\n        def calculate_strength_of_schedule_simple(teams_df, games_data, team_records_df):\n            \"\"\"Calculate strength of schedule (combined win% of all opponents)\"\"\"\n            # Get all opponents each team played against\n            team_opponents = pl.concat([\n                games_data.select([\n                    \"scenario_id\", \n                    pl.col(\"home_team\").alias(\"team\"),\n                    pl.col(\"visiting_team\").alias(\"opponent\")\n                ]),\n                games_data.select([\n                    \"scenario_id\", \n                    pl.col(\"visiting_team\").alias(\"team\"),\n                    pl.col(\"home_team\").alias(\"opponent\")\n                ])\n            ])\n            \n            # Join with teams of interest\n            team_opps = teams_df.join(\n                team_opponents, on=[\"scenario_id\", \"team\"], how=\"inner\"\n            ).select([\"scenario_id\", \"conf\", \"team\", \"opponent\"])\n            \n            # Get opponent win percentages\n            opponent_records = team_records_df.with_columns([\n                (pl.col(\"wins\") / pl.col(\"games\")).alias(\"opp_pct\")\n            ]).select([\"scenario_id\", \"team\", \"opp_pct\"]).rename({\"team\": \"opponent\"})\n            \n            # Calculate average opponent strength\n            sos = team_opps.join(\n                opponent_records, on=[\"scenario_id\", \"opponent\"], how=\"left\"\n            ).group_by([\"scenario_id\", \"conf\", \"team\"]).agg([\n                pl.mean(\"opp_pct\").alias(\"strength_of_schedule\")\n            ])\n            \n            return sos\n\n        # Calculate strength of schedule for division winner determination\n        div_sos = calculate_strength_of_schedule_simple(standings, simulator, team_records)\n        \n        standings_with_tiebreakers_sos = standings_with_tiebreakers.join(\n            div_sos, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        )\n        \n        # Apply proper division tiebreaker sequence to determine division winners\n        # NFL Rules: 1. Wins, 2. H2H, 3. Div Record, 4. Common Games, 5. Conf Record, 6. SOV, 7. SOS\n        division_winners = standings_with_tiebreakers_sos.with_columns([\n            pl.struct([\n                pl.col(\"wins\"),\n                pl.lit(0.5).alias(\"h2h_placeholder\"),  # H2H placeholder (calculated properly in detailed tiebreaker)\n                pl.col(\"div_pct\"),\n                pl.lit(0.5).alias(\"common_placeholder\"),  # Common games placeholder (calculated properly in detailed tiebreaker)\n                pl.col(\"conf_pct\"),\n                pl.lit(0.5).alias(\"sov_placeholder\"),  # SOV placeholder (calculated properly in detailed tiebreaker)\n                pl.col(\"strength_of_schedule\").fill_null(0.5),\n                pl.col(\"team\").cast(pl.String)\n            ]).rank(method=\"ordinal\", descending=True).over([\"scenario_id\", \"conf\", \"division\"]).alias(\"div_rank\")\n        ]).filter(pl.col(\"div_rank\") == 1)\n        \n        # Step 2: Apply proper tiebreakers for division winner seeding (1-4)\n        \n        # Check for ties among division winners within each conference\n        div_winner_tie_check = division_winners.group_by([\"scenario_id\", \"conf\"]).agg([\n            pl.col(\"wins\").n_unique().alias(\"unique_wins\"),\n            pl.col(\"team\").count().alias(\"total_div_winners\")\n        ])\n        \n        # Fast path: No ties among division winners (all have different records)\n        clear_div_winners = division_winners.join(\n            div_winner_tie_check.filter(pl.col(\"unique_wins\") == pl.col(\"total_div_winners\")),\n            on=[\"scenario_id\", \"conf\"],\n            how=\"inner\"\n        ).with_columns([\n            pl.col(\"wins\").rank(method=\"ordinal\", descending=True).over([\"scenario_id\", \"conf\"]).alias(\"rank\"),\n            pl.col(\"conf\").alias(\"conference\"),\n            pl.lit(\"wins\").alias(\"tiebreaker_used\")\n        ])\n        \n        # Detailed path: Ties among division winners need NFL tiebreaking\n        tied_div_winners = division_winners.join(\n            div_winner_tie_check.filter(pl.col(\"unique_wins\") < pl.col(\"total_div_winners\")),\n            on=[\"scenario_id\", \"conf\"],\n            how=\"inner\"\n        )\n        \n        # Apply NFL division winner tiebreaking sequence\n        tied_resolved = tied_div_winners.join(\n            div_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).join(\n            conf_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).with_columns([\n            (pl.col(\"div_wins\").fill_null(0) / (pl.col(\"div_wins\").fill_null(0) + pl.col(\"div_losses\").fill_null(0) + 1e-10)).alias(\"div_pct\"),\n            (pl.col(\"conf_wins\").fill_null(0) / (pl.col(\"conf_wins\").fill_null(0) + pl.col(\"conf_losses\").fill_null(0) + 1e-10)).alias(\"conf_pct\")\n        ])\n        \n        # Calculate H2H performance for each team against other tied teams in their conference\n        def get_h2h_performance(tied_teams_df, h2h_data):\n            \"\"\"Calculate head-to-head win percentage for tied teams\"\"\"\n            # Create all team pairs within each tied group (same wins only)\n            tied_with_pairs = tied_teams_df.join(\n                tied_teams_df.select([\"scenario_id\", \"conf\", \"wins\", pl.col(\"team\").alias(\"opponent\")]),\n                on=[\"scenario_id\", \"conf\", \"wins\"], how=\"inner\"\n            ).filter(pl.col(\"team\") != pl.col(\"opponent\"))\n            \n            # Create normalized team pairs for H2H lookup\n            pairs_normalized = tied_with_pairs.with_columns([\n                pl.min_horizontal(pl.col(\"team\"), pl.col(\"opponent\")).alias(\"team1\"),\n                pl.max_horizontal(pl.col(\"team\"), pl.col(\"opponent\")).alias(\"team2\"),\n                pl.col(\"team\").alias(\"lookup_team\")\n            ])\n            \n            # Join with H2H results\n            h2h_lookup = pairs_normalized.join(\n                h2h_data, on=[\"scenario_id\", \"team1\", \"team2\"], how=\"left\"\n            ).with_columns([\n                # Determine if lookup_team is team1 or team2, get their wins\n                pl.when(pl.col(\"lookup_team\") == pl.col(\"team1\"))\n                .then(pl.col(\"team1_wins\").fill_null(0))\n                .otherwise(pl.col(\"team2_wins\").fill_null(0))\n                .alias(\"h2h_wins\"),\n                \n                # Total games = team1_wins + team2_wins\n                (pl.col(\"team1_wins\").fill_null(0) + pl.col(\"team2_wins\").fill_null(0)).alias(\"h2h_games\")\n            ])\n            \n            # Aggregate H2H performance by team (within same win groups)\n            h2h_performance = h2h_lookup.group_by([\"scenario_id\", \"conf\", \"wins\", \"lookup_team\"]).agg([\n                pl.sum(\"h2h_wins\").alias(\"h2h_wins\"),\n                pl.sum(\"h2h_games\").alias(\"h2h_games\")\n            ]).with_columns([\n                (pl.col(\"h2h_wins\") / (pl.col(\"h2h_games\") + 1e-10)).alias(\"h2h_pct\")\n            ]).rename({\"lookup_team\": \"team\"})\n            \n            return h2h_performance\n        \n        # Get H2H performance for tied division winners\n        h2h_performance = get_h2h_performance(tied_div_winners, h2h_summary)\n        \n        # Get common games performance for tied division winners\n        common_games_performance = calculate_common_games(tied_div_winners, simulator)\n        \n        # Get strength of victory for tied division winners\n        strength_of_victory_performance = calculate_strength_of_victory(tied_div_winners, simulator, team_records)\n        \n        # Create a tiebreaker score for ranking tied division winners\n        tied_ranked = tied_resolved.join(\n            h2h_performance, on=[\"scenario_id\", \"conf\", \"wins\", \"team\"], how=\"left\"\n        ).join(\n            common_games_performance, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        ).join(\n            strength_of_victory_performance, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        ).with_columns([\n            # NFL Division Winner Tiebreaker Sequence:\n            # 1. Overall record (already tied)\n            # 2. Head-to-head win percentage against tied teams\n            # 3. Division record percentage\n            # 4. Common games win percentage\n            # 5. Conference record percentage\n            # 6. Strength of victory (avg win % of defeated teams)\n            # 7. Team name for determinism\n            pl.struct([\n                pl.col(\"wins\"),\n                pl.col(\"h2h_pct\").fill_null(0.5),  # 50% if no H2H games\n                pl.col(\"div_pct\"),\n                pl.col(\"common_pct\").fill_null(0.5),  # 50% if no common games\n                pl.col(\"conf_pct\"),\n                pl.col(\"avg_defeated_pct\").fill_null(0.5),  # 50% if no victories\n                pl.col(\"team\").cast(pl.String)\n            ]).rank(method=\"ordinal\", descending=True).over([\"scenario_id\", \"conf\"]).alias(\"rank\")\n        ]).with_columns([\n            pl.col(\"conf\").alias(\"conference\"),\n            # Create informative tiebreaker descriptions showing actual results\n            pl.when((pl.col(\"h2h_games\").fill_null(0) > 0) & (pl.col(\"h2h_pct\").fill_null(0.5) != 0.5))\n            .then(pl.concat_str([\n                pl.lit(\"head-to-head \"),\n                pl.col(\"h2h_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"h2h_games\").fill_null(0) - pl.col(\"h2h_wins\").fill_null(0)).cast(pl.String),\n                pl.lit(\" vs tied teams\")\n            ]))\n            .when(pl.col(\"div_pct\") > pl.lit(0.001))\n            .then(pl.concat_str([\n                pl.lit(\"division record \"),\n                pl.col(\"div_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                pl.col(\"div_losses\").fill_null(0).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"div_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            .when((pl.col(\"common_games\").fill_null(0) >= 4) & (pl.col(\"common_pct\").fill_null(0.5) != 0.5))\n            .then(pl.concat_str([\n                pl.lit(\"common games \"),\n                pl.col(\"common_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"common_games\").fill_null(0) - pl.col(\"common_wins\").fill_null(0)).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"common_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            .when(pl.col(\"conf_pct\") > pl.lit(0.001))\n            .then(pl.concat_str([\n                pl.lit(\"conference record \"),\n                pl.col(\"conf_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                pl.col(\"conf_losses\").fill_null(0).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"conf_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            .when((pl.col(\"victories_count\").fill_null(0) > 0) & (pl.col(\"avg_defeated_pct\").fill_null(0.5) != 0.5))\n            .then(pl.concat_str([\n                pl.lit(\"strength of victory \"),\n                (pl.col(\"avg_defeated_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"% avg opponent strength\")\n            ]))\n            .otherwise(pl.lit(\"team name\"))\n            .alias(\"tiebreaker_used\")\n        ])\n        \n        # Determine actual tiebreaker used for tied division winners\n        tied_ranked_with_proper_tiebreaker = tied_ranked.with_columns([\n            # Determine which step in NFL sequence actually broke the tie\n            # Step 1: Check if H2H breaks ties (only for teams that actually played)\n            pl.when((pl.col(\"h2h_games\").fill_null(0) > 0) & \n                   (pl.col(\"h2h_pct\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"head-to-head \"),\n                pl.col(\"h2h_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"h2h_games\").fill_null(0) - pl.col(\"h2h_wins\").fill_null(0)).cast(pl.String),\n                pl.lit(\" vs tied teams\")\n            ]))\n            # Step 2: Division record (only if teams in same division AND it differentiates)\n            .when((pl.col(\"division\").over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() == 1) & \n                 (pl.col(\"div_pct\").over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"division record \"),\n                pl.col(\"div_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                pl.col(\"div_losses\").fill_null(0).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"div_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            # Step 3: Common games (min 4 games and differentiates)\n            .when((pl.col(\"common_games\").fill_null(0) >= 4) & \n                 (pl.col(\"common_pct\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"common games \"),\n                pl.col(\"common_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"common_games\").fill_null(0) - pl.col(\"common_wins\").fill_null(0)).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"common_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            # Step 4: Conference record\n            .when(pl.col(\"conf_pct\").over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1)\n            .then(pl.concat_str([\n                pl.lit(\"conference record \"),\n                pl.col(\"conf_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                pl.col(\"conf_losses\").fill_null(0).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"conf_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            # Step 5: Strength of victory\n            .when((pl.col(\"victories_count\").fill_null(0) > 0) & \n                 (pl.col(\"avg_defeated_pct\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"strength of victory \"),\n                (pl.col(\"avg_defeated_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"% avg opponent strength\")\n            ]))\n            .otherwise(pl.lit(\"team name\"))\n            .alias(\"tiebreaker_used\")\n        ])\n\n        # Combine all division winner rankings\n        div_winners_ranked = pl.concat([\n            clear_div_winners.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"]),\n            tied_ranked_with_proper_tiebreaker.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"])\n        ])\n        \n        # Step 3: Wildcard seeding (5-7) - Apply proper NFL wildcard tiebreaking\n        # First get all non-division winners\n        all_non_div_winners = standings.join(\n            division_winners.select([\"scenario_id\", \"team\"]), \n            on=[\"scenario_id\", \"team\"], \n            how=\"anti\"\n        )\n        \n        # Apply division tiebreaker to eliminate all but highest ranked club in each division\n        # For wildcard consideration, use same tiebreakers as division winners but only keep #1 from each division\n        non_div_winners_with_tiebreakers = all_non_div_winners.join(\n            div_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).join(\n            conf_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).with_columns([\n            (pl.col(\"div_wins\").fill_null(0) / (pl.col(\"div_wins\").fill_null(0) + pl.col(\"div_losses\").fill_null(0) + 1e-10)).alias(\"div_pct\"),\n            (pl.col(\"conf_wins\").fill_null(0) / (pl.col(\"conf_wins\").fill_null(0) + pl.col(\"conf_losses\").fill_null(0) + 1e-10)).alias(\"conf_pct\")\n        ])\n        \n        # Calculate strength of schedule for wildcard pre-elimination\n        wildcard_sos = calculate_strength_of_schedule_simple(non_div_winners_with_tiebreakers, simulator, team_records)\n        \n        non_div_winners_with_sos = non_div_winners_with_tiebreakers.join(\n            wildcard_sos, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        )\n        \n        # For wildcards, we consider ALL non-division winners, not just top from each division\n        # NFL wildcard rule: Best non-division winners regardless of division\n        wildcard_candidates = non_div_winners_with_sos\n        \n        # Check for ties among wildcard candidates within each conference\n        wildcard_tie_check = wildcard_candidates.group_by([\"scenario_id\", \"conf\"]).agg([\n            pl.col(\"wins\").n_unique().alias(\"unique_wins\"),\n            pl.col(\"team\").count().alias(\"total_candidates\")\n        ])\n        \n        # Fast path: No ties among top wildcard candidates (all have different records)\n        clear_wildcards = wildcard_candidates.join(\n            wildcard_tie_check.filter(pl.col(\"unique_wins\") == pl.col(\"total_candidates\")),\n            on=[\"scenario_id\", \"conf\"],\n            how=\"inner\"\n        ).with_columns([\n            pl.col(\"wins\").rank(method=\"ordinal\", descending=True).over([\"scenario_id\", \"conf\"]).alias(\"wildcard_rank\")\n        ]).filter(pl.col(\"wildcard_rank\") <= 3).with_columns([\n            (pl.col(\"wildcard_rank\") + 4).alias(\"rank\"),\n            pl.col(\"conf\").alias(\"conference\"),\n            pl.lit(\"wins\").alias(\"tiebreaker_used\")\n        ])\n        \n        # Detailed path: Ties among wildcard candidates need NFL tiebreaking\n        tied_wildcard_candidates = wildcard_candidates.join(\n            wildcard_tie_check.filter(pl.col(\"unique_wins\") < pl.col(\"total_candidates\")),\n            on=[\"scenario_id\", \"conf\"],\n            how=\"inner\"\n        )\n        \n        # Apply NFL wildcard tiebreaking sequence (different from division winner rules)\n        tied_wildcard_resolved = tied_wildcard_candidates.join(\n            conf_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).with_columns([\n            (pl.col(\"conf_wins\").fill_null(0) / (pl.col(\"conf_wins\").fill_null(0) + pl.col(\"conf_losses\").fill_null(0) + 1e-10)).alias(\"conf_pct\")\n        ])\n        \n        # Get H2H performance for tied wildcard candidates (when applicable)\n        wildcard_h2h_performance = get_h2h_performance(tied_wildcard_candidates, h2h_summary)\n        \n        # Get common games performance for tied wildcard candidates\n        wildcard_common_games_performance = calculate_common_games(tied_wildcard_candidates, simulator)\n        \n        # Get strength of victory for tied wildcard candidates\n        wildcard_strength_of_victory_performance = calculate_strength_of_victory(tied_wildcard_candidates, simulator, team_records)\n        \n        # Get strength of schedule for tied wildcard candidates\n        wildcard_strength_of_schedule_performance = calculate_strength_of_schedule_simple(tied_wildcard_candidates, simulator, team_records)\n        \n        # Create wildcard ranking with proper NFL tiebreaker sequence\n        tied_wildcard_ranked = tied_wildcard_resolved.join(\n            wildcard_h2h_performance, on=[\"scenario_id\", \"conf\", \"wins\", \"team\"], how=\"left\"\n        ).join(\n            wildcard_common_games_performance, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        ).join(\n            wildcard_strength_of_victory_performance, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        ).join(\n            wildcard_strength_of_schedule_performance, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        ).with_columns([\n            # NFL Wildcard Tiebreaker Sequence (for teams from different divisions):\n            # 1. Overall record (already tied in most cases)\n            # 2. Head-to-head (if applicable - only when teams actually played)\n            # 3. Conference record percentage\n            # 4. Common games win percentage (min 4 games required)\n            # 5. Strength of victory (avg win % of defeated teams)\n            # 6. Strength of schedule (avg win % of all opponents)\n            # 7. Team name for determinism\n            pl.struct([\n                pl.col(\"wins\"),\n                # Only use H2H if teams actually played (h2h_games > 0), otherwise neutral\n                pl.when(pl.col(\"h2h_games\").fill_null(0) > 0)\n                .then(pl.col(\"h2h_pct\"))\n                .otherwise(pl.lit(0.5)).alias(\"h2h_pct_adj\"),\n                pl.col(\"conf_pct\"),\n                # Only use common games percentage if minimum 4 games, otherwise neutral\n                pl.when(pl.col(\"common_games\").fill_null(0) >= 4)\n                .then(pl.col(\"common_pct\"))\n                .otherwise(pl.lit(0.5)).alias(\"common_pct_adj\"),\n                pl.col(\"avg_defeated_pct\").fill_null(0.5),  # 50% if no victories\n                pl.col(\"strength_of_schedule\").fill_null(0.5),  # 50% if no schedule data\n                pl.col(\"team\").cast(pl.String)\n            ]).rank(method=\"ordinal\", descending=True).over([\"scenario_id\", \"conf\"]).alias(\"wildcard_rank\")\n        ]).filter(pl.col(\"wildcard_rank\") <= 3).with_columns([\n            (pl.col(\"wildcard_rank\") + 4).alias(\"rank\"),\n            pl.col(\"conf\").alias(\"conference\")\n        ])\n        \n        # Apply proper tiebreaker descriptions for wildcard seeding\n        tied_wildcard_ranked_with_proper_tiebreaker = tied_wildcard_ranked.with_columns([\n            # Determine which step in NFL wildcard sequence actually broke the tie\n            pl.when((pl.col(\"h2h_games\").fill_null(0) > 0) & \n                   (pl.col(\"h2h_pct\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"head-to-head \"),\n                pl.col(\"h2h_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"h2h_games\").fill_null(0) - pl.col(\"h2h_wins\").fill_null(0)).cast(pl.String),\n                pl.lit(\" vs tied teams\")\n            ]))\n            .when(pl.col(\"conf_pct\").over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1)\n            .then(pl.concat_str([\n                pl.lit(\"conference record \"),\n                pl.col(\"conf_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                pl.col(\"conf_losses\").fill_null(0).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"conf_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            .when((pl.col(\"common_games\").fill_null(0) >= 4) & \n                 (pl.col(\"common_pct\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"common games \"),\n                pl.col(\"common_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"common_games\").fill_null(0) - pl.col(\"common_wins\").fill_null(0)).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"common_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            .when((pl.col(\"victories_count\").fill_null(0) > 0) & \n                 (pl.col(\"avg_defeated_pct\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"strength of victory \"),\n                (pl.col(\"avg_defeated_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"% avg opponent strength\")\n            ]))\n            .when(pl.col(\"strength_of_schedule\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1)\n            .then(pl.concat_str([\n                pl.lit(\"strength of schedule \"),\n                (pl.col(\"strength_of_schedule\") * 100).round(1).cast(pl.String),\n                pl.lit(\"% avg opponent strength\")\n            ]))\n            .otherwise(pl.lit(\"team name\"))\n            .alias(\"tiebreaker_used\")\n        ])\n        \n        # Combine all wildcard rankings\n        wildcards = pl.concat([\n            clear_wildcards.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"]),\n            tied_wildcard_ranked_with_proper_tiebreaker.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"])\n        ])\n        \n        # Get remaining teams that missed playoffs\n        playoff_teams = pl.concat([\n            div_winners_ranked.select([\"scenario_id\", \"team\"]),\n            wildcards.select([\"scenario_id\", \"team\"])\n        ])\n        \n        non_playoff = standings.join(\n            playoff_teams,\n            on=[\"scenario_id\", \"team\"],\n            how=\"anti\"\n        ).with_columns([\n            pl.col(\"wins\").rank(method=\"ordinal\", descending=True).over([\"scenario_id\", \"conf\"]).alias(\"remaining_rank\")\n        ]).with_columns([\n            (pl.col(\"remaining_rank\") + 7).alias(\"rank\"),\n            pl.col(\"conf\").alias(\"conference\"), \n            # Better tiebreaker description for non-playoff teams\n            pl.when(pl.col(\"wins\").over([\"scenario_id\", \"conf\"]).n_unique() > 1)\n            .then(pl.concat_str([\n                pl.lit(\"wins (\"),\n                pl.col(\"wins\").cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"games\") - pl.col(\"wins\")).cast(pl.String),\n                pl.lit(\")\")\n            ]))\n            .otherwise(pl.lit(\"team name\"))\n            .alias(\"tiebreaker_used\")\n        ])\n        \n        # Combine all results\n        final_result = pl.concat([\n            div_winners_ranked.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"]),\n            wildcards.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"]),\n            non_playoff.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"])\n        ]).sort([\"scenario_id\", \"conference\", \"rank\"])\n        \n        # Convert categoricals back to strings for pandas compatibility\n        final_result = final_result.with_columns([\n            pl.col(\"team\").cast(pl.String),\n            pl.col(\"conference\").cast(pl.String),\n            pl.col(\"tiebreaker_used\").cast(pl.String)\n        ])\n    \n    return final_result.to_pandas()", "language": "python", "refs": [{"name": "nfl_reg_season_simulator", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.sports_sims.nfl_reg_season_simulator", "model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/analysis/nfl_tiebreakers_optimized.py", "compiled": true, "compiled_code": "import pandas as pd\nimport polars as pl\nimport numpy as np\nfrom typing import List, Dict, Tuple, Optional\n\n# NFL TIEBREAKER RULES IMPLEMENTATION\n# Two Clubs:\n# (1) Head-to-head record\n# (2) Division record (if both teams in same division)\n# (3) Common games record\n# (4) Conference record\n# (5) Strength of victory\n# (6) Strength of schedule\n# (7-12) Point-based tiebreakers (skipped - no score data)\n#\n# Three or More Clubs:\n# (1) Head-to-head record among tied teams\n# (2) Division record (if all teams in same division)\n# (3) Common games record\n# (4) Conference record\n# (5) Strength of victory\n# (6) Strength of schedule\n# (7-12) Point-based tiebreakers (skipped - no score data)\n\ndef calculate_head_to_head(team1: str, team2: str, results: pl.DataFrame) -> Tuple[int, int]:\n    \"\"\"Calculate head-to-head record between two teams.\"\"\"\n    h2h_games = results.filter(\n        ((pl.col('visiting_team') == team1) & (pl.col('home_team') == team2)) |\n        ((pl.col('visiting_team') == team2) & (pl.col('home_team') == team1))\n    )\n    \n    team1_wins = h2h_games.filter(pl.col('winning_team') == team1).height\n    team2_wins = h2h_games.filter(pl.col('winning_team') == team2).height\n    \n    return team1_wins, team2_wins\n\ndef calculate_division_record(team: str, division: str, results: pl.DataFrame, teams: pl.DataFrame) -> Tuple[int, int]:\n    \"\"\"Calculate a team's record against teams in their division.\"\"\"\n    division_teams = teams.filter(pl.col('division') == division)['team'].to_list()\n    if team in division_teams:\n        division_teams.remove(team)\n    \n    div_games = results.filter(\n        ((pl.col('visiting_team') == team) & (pl.col('home_team').is_in(division_teams))) |\n        ((pl.col('home_team') == team) & (pl.col('visiting_team').is_in(division_teams)))\n    )\n    \n    wins = div_games.filter(pl.col('winning_team') == team).height\n    losses = div_games.filter(pl.col('winning_team') != team).height\n    \n    return wins, losses\n\ndef calculate_conference_record(team: str, conference: str, results: pl.DataFrame, teams: pl.DataFrame) -> Tuple[int, int]:\n    \"\"\"Calculate a team's record against teams in their conference.\"\"\"\n    conf_teams = teams.filter(pl.col('conf') == conference)['team'].to_list()\n    if team in conf_teams:\n        conf_teams.remove(team)\n    \n    conf_games = results.filter(\n        ((pl.col('visiting_team') == team) & (pl.col('home_team').is_in(conf_teams))) |\n        ((pl.col('home_team') == team) & (pl.col('visiting_team').is_in(conf_teams)))\n    )\n    \n    wins = conf_games.filter(pl.col('winning_team') == team).height\n    losses = conf_games.filter(pl.col('winning_team') != team).height\n    \n    return wins, losses\n\ndef calculate_common_games_record(team: str, tied_teams: List[str], results: pl.DataFrame) -> Tuple[int, int]:\n    \"\"\"Calculate a team's record in games against common opponents.\"\"\"\n    # Find opponents that all tied teams have played\n    all_opponents = {}\n    \n    for t in [team] + tied_teams:\n        team_games = results.filter(\n            (pl.col('visiting_team') == t) | (pl.col('home_team') == t)\n        )\n        opponents = set()\n        for row in team_games.iter_rows(named=True):\n            opp = row['home_team'] if row['visiting_team'] == t else row['visiting_team']\n            if opp not in [team] + tied_teams:  # Exclude tied teams themselves\n                opponents.add(opp)\n        all_opponents[t] = opponents\n    \n    # Find common opponents (opponents played by ALL tied teams)\n    common_opponents = set.intersection(*all_opponents.values()) if all_opponents else set()\n    common_opponents = list(common_opponents)\n    \n    if not common_opponents:\n        return 0, 0\n    \n    # Calculate record against common opponents\n    common_games = results.filter(\n        ((pl.col('visiting_team') == team) & (pl.col('home_team').is_in(common_opponents))) |\n        ((pl.col('home_team') == team) & (pl.col('visiting_team').is_in(common_opponents)))\n    )\n    \n    wins = common_games.filter(pl.col('winning_team') == team).height\n    losses = common_games.filter(pl.col('winning_team') != team).height\n    \n    return wins, losses\n\ndef calculate_strength_of_victory(team: str, results: pl.DataFrame, all_team_records: Dict[str, Tuple[int, int]]) -> float:\n    \"\"\"Calculate strength of victory (combined win% of teams this team beat).\"\"\"\n    team_wins = results.filter(pl.col('winning_team') == team)\n    \n    if team_wins.height == 0:\n        return 0.0\n    \n    total_beaten_wins = 0\n    total_beaten_games = 0\n    \n    for row in team_wins.iter_rows(named=True):\n        beaten_team = row['home_team'] if row['visiting_team'] == team else row['visiting_team']\n        beaten_wins, beaten_losses = all_team_records.get(beaten_team, (0, 0))\n        total_beaten_wins += beaten_wins\n        total_beaten_games += beaten_wins + beaten_losses\n    \n    return total_beaten_wins / total_beaten_games if total_beaten_games > 0 else 0.0\n\ndef calculate_strength_of_schedule(team: str, results: pl.DataFrame, all_team_records: Dict[str, Tuple[int, int]]) -> float:\n    \"\"\"Calculate strength of schedule (combined win% of all opponents).\"\"\"\n    team_games = results.filter(\n        (pl.col('visiting_team') == team) | (pl.col('home_team') == team)\n    )\n    \n    if team_games.height == 0:\n        return 0.0\n    \n    total_opp_wins = 0\n    total_opp_games = 0\n    \n    for row in team_games.iter_rows(named=True):\n        opponent = row['home_team'] if row['visiting_team'] == team else row['visiting_team']\n        opp_wins, opp_losses = all_team_records.get(opponent, (0, 0))\n        total_opp_wins += opp_wins\n        total_opp_games += opp_wins + opp_losses\n    \n    return total_opp_wins / total_opp_games if total_opp_games > 0 else 0.0\n\ndef _calculate_win_percentage(wins: int, losses: int) -> float:\n    \"\"\"Calculates win percentage, handling division by zero.\"\"\"\n    if wins + losses == 0:\n        return 0.0\n    return wins / (wins + losses)\n\ndef _get_record_against_teams(team: str, opponent_list: List[str], all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]]) -> Tuple[int, int]:\n    \"\"\"Calculates a team's W/L record against a specific list of opponents.\"\"\"\n    wins = 0\n    losses = 0\n    for opponent in opponent_list:\n        if team == opponent:\n            continue\n        w, l = all_h2h_records.get((team, opponent), (0, 0))\n        wins += w\n        losses += l\n    return wins, losses\n\ndef break_two_way_tie(team1: str, team2: str,\n                      all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]],\n                      all_div_records: Dict[str, Tuple[int, int]],\n                      all_conf_records: Dict[str, Tuple[int, int]],\n                      all_common_records: Dict,\n                      all_sov: Dict[str, float],\n                      all_sos: Dict[str, float],\n                      teams: pl.DataFrame,\n                      results: pl.DataFrame) -> Tuple[str, str]:\n    \"\"\"Apply NFL tiebreaker rules for two teams. Returns (winner, tiebreaker_used).\"\"\"\n    \n    team1_info = teams.filter(pl.col('team') == team1).row(index=0, named=True)\n    team2_info = teams.filter(pl.col('team') == team2).row(index=0, named=True)\n    if not team1_info or not team2_info:\n        return team1, \"error_missing_team_info\"\n\n    # (1) Head-to-head record\n    t1_h2h_wins, t2_h2h_wins = all_h2h_records.get((team1, team2), (0, 0))\n    if t1_h2h_wins > t2_h2h_wins:\n        return team1, \"h2h_wins\"\n    if t2_h2h_wins > t1_h2h_wins:\n        return team2, \"h2h_wins\"\n\n    # (2) Division record (only if teams are in same division)\n    if team1_info['division'] == team2_info['division']:\n        t1_div_wins, t1_div_losses = all_div_records.get(team1, (0, 0))\n        t2_div_wins, t2_div_losses = all_div_records.get(team2, (0, 0))\n        t1_div_pct = _calculate_win_percentage(t1_div_wins, t1_div_losses)\n        t2_div_pct = _calculate_win_percentage(t2_div_wins, t2_div_losses)\n        if t1_div_pct > t2_div_pct:\n            return team1, \"division_record_pct\"\n        if t2_div_pct > t1_div_pct:\n            return team2, \"division_record_pct\"\n\n    # (3) Common games record\n    # Calculate common games record between the two teams\n    team1_common_wins, team1_common_losses = calculate_common_games_record(team1, [team2], results)\n    team2_common_wins, team2_common_losses = calculate_common_games_record(team2, [team1], results)\n    \n    # Only apply if both teams have common games\n    if team1_common_wins + team1_common_losses > 0 and team2_common_wins + team2_common_losses > 0:\n        team1_common_pct = _calculate_win_percentage(team1_common_wins, team1_common_losses)\n        team2_common_pct = _calculate_win_percentage(team2_common_wins, team2_common_losses)\n        if team1_common_pct > team2_common_pct:\n            return team1, \"common_games_pct\"\n        if team2_common_pct > team1_common_pct:\n            return team2, \"common_games_pct\"\n\n    # (4) Conference record\n    t1_conf_wins, t1_conf_losses = all_conf_records.get(team1, (0, 0))\n    t2_conf_wins, t2_conf_losses = all_conf_records.get(team2, (0, 0))\n    t1_conf_pct = _calculate_win_percentage(t1_conf_wins, t1_conf_losses)\n    t2_conf_pct = _calculate_win_percentage(t2_conf_wins, t2_conf_losses)\n    if t1_conf_pct > t2_conf_pct:\n        return team1, \"conference_record_pct\"\n    if t2_conf_pct > t1_conf_pct:\n        return team2, \"conference_record_pct\"\n\n    # (5) Strength of victory\n    team1_sov = all_sov.get(team1, 0.0)\n    team2_sov = all_sov.get(team2, 0.0)\n    if team1_sov > team2_sov:\n        return team1, \"strength_of_victory\"\n    if team2_sov > team1_sov:\n        return team2, \"strength_of_victory\"\n\n    # (6) Strength of schedule\n    team1_sos = all_sos.get(team1, 0.0)\n    team2_sos = all_sos.get(team2, 0.0)\n    if team1_sos > team2_sos:\n        return team1, \"strength_of_schedule\"\n    if team2_sos > team1_sos:\n        return team2, \"strength_of_schedule\"\n\n    # Final fallback (coin toss equivalent)\n    return team1, \"coin_toss\"\n\ndef _get_h2h_pct_among_tied(team: str, tied_group: List[str], all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]]) -> float:\n    \"\"\"Calculates H2H win pct for a team ONLY against others in the tied_group.\"\"\"\n    wins, losses = _get_record_against_teams(team, tied_group, all_h2h_records)\n    return _calculate_win_percentage(wins, losses)\n\ndef _get_div_pct(team: str, all_div_records: Dict[str, Tuple[int, int]]) -> float:\n    \"\"\"Gets division win pct from pre-calculated records.\"\"\"\n    wins, losses = all_div_records.get(team, (0, 0))\n    return _calculate_win_percentage(wins, losses)\n\ndef _get_conf_pct(team: str, all_conf_records: Dict[str, Tuple[int, int]]) -> float:\n    \"\"\"Gets conference win pct from pre-calculated records.\"\"\"\n    wins, losses = all_conf_records.get(team, (0, 0))\n    return _calculate_win_percentage(wins, losses)\n\ndef _get_common_games_pct(team: str, tied_group: List[str], results: pl.DataFrame) -> float:\n    \"\"\"Gets common games win pct for a team against tied group (calculated on-demand).\"\"\"\n    wins, losses = calculate_common_games_record(team, tied_group, results)\n    return _calculate_win_percentage(wins, losses)\n\ndef break_multi_way_tie(tied_teams: List[str],\n                        all_h2h_records: Dict[Tuple[str, str], Tuple[int, int]],\n                        all_div_records: Dict[str, Tuple[int, int]],\n                        all_conf_records: Dict[str, Tuple[int, int]],\n                        all_sov: Dict[str, float],\n                        all_sos: Dict[str, float],\n                        teams: pl.DataFrame,\n                        results: pl.DataFrame) -> List[Tuple[str, str]]:\n    \"\"\"Break ties among 3+ teams. Returns list of (team, tiebreaker_used) in order.\"\"\"\n    \n    if len(tied_teams) <= 1:\n        return [(tied_teams[0], \"no_tie\")] if tied_teams else []\n    \n    if len(tied_teams) == 2:\n        # For two teams, we don't need the common games logic\n        winner, tb = break_two_way_tie(\n            tied_teams[0], tied_teams[1],\n            all_h2h_records, all_div_records, all_conf_records,\n            {}, all_sov, all_sos, teams, results  # Empty dict for common records\n        )\n        loser = tied_teams[1] if winner == tied_teams[0] else tied_teams[0]\n        return [(winner, tb), (loser, tb)]\n    \n    remaining_to_rank = tied_teams.copy()\n    ranked_list = []\n    \n    def apply_tiebreaker(criterion_func, tiebreaker_name: str) -> bool:\n        \"\"\"Apply a tiebreaker criterion and update rankings if it breaks any ties.\"\"\"\n        if len(remaining_to_rank) <= 1:\n            return True\n        \n        # Calculate criterion for all remaining teams\n        team_values = [(team, criterion_func(team)) for team in remaining_to_rank]\n        team_values.sort(key=lambda x: x[1], reverse=True)\n        \n        # Group teams by criterion value\n        best_value = team_values[0][1]\n        best_teams = [team for team, value in team_values if value == best_value]\n        \n        if len(best_teams) == 1:\n            # Clear winner\n            ranked_list.append((best_teams[0], tiebreaker_name))\n            remaining_to_rank.remove(best_teams[0])\n            \n            # NFL Rule: If remaining teams reduced to 2, restart with two-team format\n            if len(remaining_to_rank) == 2:\n                winner, tb = break_two_way_tie(\n                    remaining_to_rank[0], remaining_to_rank[1],\n                    all_h2h_records, all_div_records, all_conf_records,\n                    {}, all_sov, all_sos, teams, results\n                )\n                loser = remaining_to_rank[1] if winner == remaining_to_rank[0] else remaining_to_rank[0]\n                ranked_list.extend([(winner, tb), (loser, tb)])\n                remaining_to_rank.clear()\n                return True\n            \n            return False\n        elif len(best_teams) < len(remaining_to_rank):\n            # Partial tie break - some teams eliminated\n            eliminated_teams = [team for team in remaining_to_rank if team not in best_teams]\n            for team in eliminated_teams:\n                remaining_to_rank.remove(team)\n            \n            # NFL Rule: If remaining teams reduced to 2, restart with two-team format\n            if len(remaining_to_rank) == 2:\n                winner, tb = break_two_way_tie(\n                    remaining_to_rank[0], remaining_to_rank[1],\n                    all_h2h_records, all_div_records, all_conf_records,\n                    {}, all_sov, all_sos, teams, results\n                )\n                loser = remaining_to_rank[1] if winner == remaining_to_rank[0] else remaining_to_rank[0]\n                ranked_list.extend([(winner, tb), (loser, tb)])\n                remaining_to_rank.clear()\n                return True\n            # NFL Rule: If 3 teams remain after elimination, restart at step 1 of three-team format\n            elif len(remaining_to_rank) == 3:\n                # Restart the multi-way tie process with the remaining 3 teams\n                sub_results = break_multi_way_tie(\n                    remaining_to_rank, all_h2h_records, all_div_records, all_conf_records,\n                    all_sov, all_sos, teams, results\n                )\n                ranked_list.extend(sub_results)\n                remaining_to_rank.clear()\n                return True\n            \n            return False\n        \n        # No tie broken at this level\n        return False\n\n    # (1) Head-to-head among tied teams\n    if apply_tiebreaker(lambda t: _get_h2h_pct_among_tied(t, [x for x in remaining_to_rank if x != t], all_h2h_records), \"h2h_among_tied\"):\n        return ranked_list\n\n    # (2) Division record (only if all teams in same division)\n    first_team_div = teams.filter(pl.col('team') == remaining_to_rank[0]).select('division').item()\n    all_same_division = all(teams.filter(pl.col('team') == t).select('division').item() == first_team_div for t in remaining_to_rank)\n    \n    if all_same_division:\n        if apply_tiebreaker(lambda t: _get_div_pct(t, all_div_records), \"division_record_pct\"):\n            return ranked_list\n\n    # (3) Common games record\n    if apply_tiebreaker(lambda t: _get_common_games_pct(t, [x for x in remaining_to_rank if x != t], results), \"common_games_pct\"):\n        return ranked_list\n\n    # (4) Conference record\n    if apply_tiebreaker(lambda t: _get_conf_pct(t, all_conf_records), \"conference_record_pct\"):\n        return ranked_list\n\n    # (5) Strength of victory\n    if apply_tiebreaker(lambda t: all_sov.get(t, 0.0), \"strength_of_victory\"):\n        return ranked_list\n\n    # (6) Strength of schedule\n    if apply_tiebreaker(lambda t: all_sos.get(t, 0.0), \"strength_of_schedule\"):\n        return ranked_list\n\n    # Final fallback - random order\n    final_sort = sorted(remaining_to_rank)\n    ranked_list.extend([(t, \"coin_toss\") for t in final_sort])\n    \n    return ranked_list\n\ndef model(dbt, sess):\n    # Get data and use StringCache + Categoricals for fast joins\n    with pl.StringCache():\n        simulator = pl.from_pandas(dbt.ref(\"nfl_reg_season_simulator\").df()).select([\n            \"scenario_id\", \"home_team\", \"visiting_team\", \"winning_team\"\n        ]).with_columns([\n            pl.col(\"home_team\").cast(pl.Categorical),\n            pl.col(\"visiting_team\").cast(pl.Categorical), \n            pl.col(\"winning_team\").cast(pl.Categorical)\n        ])\n        \n        teams = pl.from_pandas(dbt.ref(\"nfl_ratings\").df()).select([\n            \"team\", \"conf\", \"division\"\n        ]).with_columns([\n            pl.col(\"team\").cast(pl.Categorical),\n            pl.col(\"conf\").cast(pl.Categorical),\n            pl.col(\"division\").cast(pl.Categorical)\n        ])\n        \n        # Create long-form table: one row per (scenario_id, team, win_flag)\n        # This eliminates all Python loops and iter_rows()\n        long_table = pl.concat([\n            # Home team perspective\n            simulator.select([\n                \"scenario_id\",\n                pl.col(\"home_team\").alias(\"team\"),\n                pl.when(pl.col(\"winning_team\") == pl.col(\"home_team\")).then(1).otherwise(0).alias(\"wins\"),\n                pl.lit(1).alias(\"games\")\n            ]),\n            # Visiting team perspective  \n            simulator.select([\n                \"scenario_id\", \n                pl.col(\"visiting_team\").alias(\"team\"),\n                pl.when(pl.col(\"winning_team\") == pl.col(\"visiting_team\")).then(1).otherwise(0).alias(\"wins\"),\n                pl.lit(1).alias(\"games\")\n            ])\n        ])\n        \n        # Calculate team records in one aggregation\n        team_records = long_table.group_by([\"scenario_id\", \"team\"]).agg([\n            pl.sum(\"wins\").alias(\"wins\"),\n            pl.sum(\"games\").alias(\"games\")\n        ]).with_columns([\n            (pl.col(\"games\") - pl.col(\"wins\")).alias(\"losses\")\n        ])\n        \n        # Join team metadata once\n        standings = team_records.join(teams, on=\"team\", how=\"left\")\n        \n        # Pre-calculate H2H records for tiebreaking\n        h2h_results = simulator.with_columns([\n            pl.min_horizontal(pl.col(\"home_team\"), pl.col(\"visiting_team\")).alias(\"team1\"),\n            pl.max_horizontal(pl.col(\"home_team\"), pl.col(\"visiting_team\")).alias(\"team2\"),\n            pl.when(pl.col(\"winning_team\") == pl.min_horizontal(pl.col(\"home_team\"), pl.col(\"visiting_team\"))).then(1).otherwise(0).alias(\"team1_won\"),\n            pl.when(pl.col(\"winning_team\") == pl.max_horizontal(pl.col(\"home_team\"), pl.col(\"visiting_team\"))).then(1).otherwise(0).alias(\"team2_won\")\n        ])\n        \n        h2h_summary = h2h_results.group_by([\"scenario_id\", \"team1\", \"team2\"]).agg([\n            pl.sum(\"team1_won\").alias(\"team1_wins\"),\n            pl.sum(\"team2_won\").alias(\"team2_wins\")\n        ])\n        \n        # Pre-calculate common games performance (used when H2H is tied or N/A)\n        # Common games = games against the same opponents\n        def calculate_common_games(tied_teams_df, games_data):\n            \"\"\"Calculate common games win percentage for tied teams\"\"\"\n            # Get all opponents each team played against\n            team_opponents = pl.concat([\n                games_data.select([\n                    \"scenario_id\", \n                    pl.col(\"home_team\").alias(\"team\"),\n                    pl.col(\"visiting_team\").alias(\"opponent\"),\n                    pl.when(pl.col(\"winning_team\") == pl.col(\"home_team\")).then(1).otherwise(0).alias(\"won\")\n                ]),\n                games_data.select([\n                    \"scenario_id\", \n                    pl.col(\"visiting_team\").alias(\"team\"),\n                    pl.col(\"home_team\").alias(\"opponent\"),\n                    pl.when(pl.col(\"winning_team\") == pl.col(\"visiting_team\")).then(1).otherwise(0).alias(\"won\")\n                ])\n            ])\n            \n            # Find common opponents for tied teams within each conference\n            tied_opponents = tied_teams_df.join(\n                team_opponents, on=[\"scenario_id\", \"team\"], how=\"inner\"\n            ).select([\"scenario_id\", \"conf\", \"team\", \"opponent\", \"won\"])\n            \n            # Group by scenario/conf/opponent to find which opponents are common to multiple tied teams\n            common_opponents = tied_opponents.group_by([\"scenario_id\", \"conf\", \"opponent\"]).agg([\n                pl.col(\"team\").n_unique().alias(\"teams_played_opponent\")\n            ]).join(\n                tied_teams_df.group_by([\"scenario_id\", \"conf\"]).agg([\n                    pl.col(\"team\").count().alias(\"total_tied_teams\")\n                ]), on=[\"scenario_id\", \"conf\"]\n            ).filter(pl.col(\"teams_played_opponent\") >= 2)  # At least 2 tied teams played this opponent\n            \n            # Calculate common games record for each tied team\n            common_games_performance = tied_opponents.join(\n                common_opponents.select([\"scenario_id\", \"conf\", \"opponent\"]),\n                on=[\"scenario_id\", \"conf\", \"opponent\"], how=\"inner\"\n            ).group_by([\"scenario_id\", \"conf\", \"team\"]).agg([\n                pl.sum(\"won\").alias(\"common_wins\"),\n                pl.count().alias(\"common_games\")\n            ]).with_columns([\n                (pl.col(\"common_wins\") / (pl.col(\"common_games\") + 1e-10)).alias(\"common_pct\")\n            ])\n            \n            return common_games_performance\n        \n        # Calculate strength of victory (sum of win percentages of defeated teams)\n        def calculate_strength_of_victory(tied_teams_df, games_data, team_records_df):\n            \"\"\"Calculate strength of victory for tied teams\"\"\"\n            # Get all teams each tied team defeated\n            team_victories = pl.concat([\n                games_data.filter(pl.col(\"winning_team\") == pl.col(\"home_team\")).select([\n                    \"scenario_id\", \n                    pl.col(\"home_team\").alias(\"team\"),\n                    pl.col(\"visiting_team\").alias(\"defeated_team\")\n                ]),\n                games_data.filter(pl.col(\"winning_team\") == pl.col(\"visiting_team\")).select([\n                    \"scenario_id\", \n                    pl.col(\"visiting_team\").alias(\"team\"),\n                    pl.col(\"home_team\").alias(\"defeated_team\")\n                ])\n            ])\n            \n            # Join with tied teams to only calculate for teams that need it\n            tied_victories = tied_teams_df.join(\n                team_victories, on=[\"scenario_id\", \"team\"], how=\"inner\"\n            )\n            \n            # Get the win percentage of each defeated team\n            defeated_team_records = team_records_df.with_columns([\n                (pl.col(\"wins\") / pl.col(\"games\")).alias(\"defeated_team_pct\")\n            ]).select([\"scenario_id\", \"team\", \"defeated_team_pct\"]).rename({\"team\": \"defeated_team\"})\n            \n            # Calculate strength of victory as sum of defeated teams' win percentages\n            strength_of_victory = tied_victories.join(\n                defeated_team_records, on=[\"scenario_id\", \"defeated_team\"], how=\"left\"\n            ).group_by([\"scenario_id\", \"conf\", \"team\"]).agg([\n                pl.sum(\"defeated_team_pct\").alias(\"strength_of_victory\"),\n                pl.count().alias(\"victories_count\")\n            ]).with_columns([\n                # Normalize by number of victories to get average opponent strength\n                (pl.col(\"strength_of_victory\") / (pl.col(\"victories_count\") + 1e-10)).alias(\"avg_defeated_pct\")\n            ])\n            \n            return strength_of_victory\n        \n        # Pre-calculate division and conference records\n        games_with_teams = simulator.join(\n            teams.rename({'conf': 'home_conf', 'division': 'home_division'}), \n            left_on='home_team', right_on='team'\n        ).join(\n            teams.rename({'conf': 'visiting_conf', 'division': 'visiting_division'}), \n            left_on='visiting_team', right_on='team'\n        )\n        \n        # Division records\n        div_records = pl.concat([\n            games_with_teams.filter(pl.col('home_division') == pl.col('visiting_division')).select([\n                \"scenario_id\",\n                pl.col(\"home_team\").alias(\"team\"),\n                pl.when(pl.col(\"winning_team\") == pl.col(\"home_team\")).then(1).otherwise(0).alias(\"wins\"),\n                pl.when(pl.col(\"winning_team\") != pl.col(\"home_team\")).then(1).otherwise(0).alias(\"losses\")\n            ]),\n            games_with_teams.filter(pl.col('home_division') == pl.col('visiting_division')).select([\n                \"scenario_id\",\n                pl.col(\"visiting_team\").alias(\"team\"),\n                pl.when(pl.col(\"winning_team\") == pl.col(\"visiting_team\")).then(1).otherwise(0).alias(\"wins\"),\n                pl.when(pl.col(\"winning_team\") != pl.col(\"visiting_team\")).then(1).otherwise(0).alias(\"losses\")\n            ])\n        ]).group_by([\"scenario_id\", \"team\"]).agg([\n            pl.sum(\"wins\").alias(\"div_wins\"),\n            pl.sum(\"losses\").alias(\"div_losses\")\n        ])\n        \n        # Conference records  \n        conf_records = pl.concat([\n            games_with_teams.filter(pl.col('home_conf') == pl.col('visiting_conf')).select([\n                \"scenario_id\",\n                pl.col(\"home_team\").alias(\"team\"),\n                pl.when(pl.col(\"winning_team\") == pl.col(\"home_team\")).then(1).otherwise(0).alias(\"wins\"),\n                pl.when(pl.col(\"winning_team\") != pl.col(\"home_team\")).then(1).otherwise(0).alias(\"losses\")\n            ]),\n            games_with_teams.filter(pl.col('home_conf') == pl.col('visiting_conf')).select([\n                \"scenario_id\",\n                pl.col(\"visiting_team\").alias(\"team\"),\n                pl.when(pl.col(\"winning_team\") == pl.col(\"visiting_team\")).then(1).otherwise(0).alias(\"wins\"),\n                pl.when(pl.col(\"winning_team\") != pl.col(\"visiting_team\")).then(1).otherwise(0).alias(\"losses\")\n            ])\n        ]).group_by([\"scenario_id\", \"team\"]).agg([\n            pl.sum(\"wins\").alias(\"conf_wins\"),\n            pl.sum(\"losses\").alias(\"conf_losses\")\n        ])\n        \n        # --- Simple Division Winner and Wildcard Logic ---\n        \n        # Step 1: Identify division winners using proper division tiebreaker sequence\n        # Join division and conference records for tiebreaking\n        standings_with_tiebreakers = standings.join(\n            div_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).join(\n            conf_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).with_columns([\n            (pl.col(\"div_wins\").fill_null(0) / (pl.col(\"div_wins\").fill_null(0) + pl.col(\"div_losses\").fill_null(0) + 1e-10)).alias(\"div_pct\"),\n            (pl.col(\"conf_wins\").fill_null(0) / (pl.col(\"conf_wins\").fill_null(0) + pl.col(\"conf_losses\").fill_null(0) + 1e-10)).alias(\"conf_pct\")\n        ])\n        \n        # Calculate strength of schedule for division tiebreakers\n        def calculate_strength_of_schedule_simple(teams_df, games_data, team_records_df):\n            \"\"\"Calculate strength of schedule (combined win% of all opponents)\"\"\"\n            # Get all opponents each team played against\n            team_opponents = pl.concat([\n                games_data.select([\n                    \"scenario_id\", \n                    pl.col(\"home_team\").alias(\"team\"),\n                    pl.col(\"visiting_team\").alias(\"opponent\")\n                ]),\n                games_data.select([\n                    \"scenario_id\", \n                    pl.col(\"visiting_team\").alias(\"team\"),\n                    pl.col(\"home_team\").alias(\"opponent\")\n                ])\n            ])\n            \n            # Join with teams of interest\n            team_opps = teams_df.join(\n                team_opponents, on=[\"scenario_id\", \"team\"], how=\"inner\"\n            ).select([\"scenario_id\", \"conf\", \"team\", \"opponent\"])\n            \n            # Get opponent win percentages\n            opponent_records = team_records_df.with_columns([\n                (pl.col(\"wins\") / pl.col(\"games\")).alias(\"opp_pct\")\n            ]).select([\"scenario_id\", \"team\", \"opp_pct\"]).rename({\"team\": \"opponent\"})\n            \n            # Calculate average opponent strength\n            sos = team_opps.join(\n                opponent_records, on=[\"scenario_id\", \"opponent\"], how=\"left\"\n            ).group_by([\"scenario_id\", \"conf\", \"team\"]).agg([\n                pl.mean(\"opp_pct\").alias(\"strength_of_schedule\")\n            ])\n            \n            return sos\n\n        # Calculate strength of schedule for division winner determination\n        div_sos = calculate_strength_of_schedule_simple(standings, simulator, team_records)\n        \n        standings_with_tiebreakers_sos = standings_with_tiebreakers.join(\n            div_sos, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        )\n        \n        # Apply proper division tiebreaker sequence to determine division winners\n        # NFL Rules: 1. Wins, 2. H2H, 3. Div Record, 4. Common Games, 5. Conf Record, 6. SOV, 7. SOS\n        division_winners = standings_with_tiebreakers_sos.with_columns([\n            pl.struct([\n                pl.col(\"wins\"),\n                pl.lit(0.5).alias(\"h2h_placeholder\"),  # H2H placeholder (calculated properly in detailed tiebreaker)\n                pl.col(\"div_pct\"),\n                pl.lit(0.5).alias(\"common_placeholder\"),  # Common games placeholder (calculated properly in detailed tiebreaker)\n                pl.col(\"conf_pct\"),\n                pl.lit(0.5).alias(\"sov_placeholder\"),  # SOV placeholder (calculated properly in detailed tiebreaker)\n                pl.col(\"strength_of_schedule\").fill_null(0.5),\n                pl.col(\"team\").cast(pl.String)\n            ]).rank(method=\"ordinal\", descending=True).over([\"scenario_id\", \"conf\", \"division\"]).alias(\"div_rank\")\n        ]).filter(pl.col(\"div_rank\") == 1)\n        \n        # Step 2: Apply proper tiebreakers for division winner seeding (1-4)\n        \n        # Check for ties among division winners within each conference\n        div_winner_tie_check = division_winners.group_by([\"scenario_id\", \"conf\"]).agg([\n            pl.col(\"wins\").n_unique().alias(\"unique_wins\"),\n            pl.col(\"team\").count().alias(\"total_div_winners\")\n        ])\n        \n        # Fast path: No ties among division winners (all have different records)\n        clear_div_winners = division_winners.join(\n            div_winner_tie_check.filter(pl.col(\"unique_wins\") == pl.col(\"total_div_winners\")),\n            on=[\"scenario_id\", \"conf\"],\n            how=\"inner\"\n        ).with_columns([\n            pl.col(\"wins\").rank(method=\"ordinal\", descending=True).over([\"scenario_id\", \"conf\"]).alias(\"rank\"),\n            pl.col(\"conf\").alias(\"conference\"),\n            pl.lit(\"wins\").alias(\"tiebreaker_used\")\n        ])\n        \n        # Detailed path: Ties among division winners need NFL tiebreaking\n        tied_div_winners = division_winners.join(\n            div_winner_tie_check.filter(pl.col(\"unique_wins\") < pl.col(\"total_div_winners\")),\n            on=[\"scenario_id\", \"conf\"],\n            how=\"inner\"\n        )\n        \n        # Apply NFL division winner tiebreaking sequence\n        tied_resolved = tied_div_winners.join(\n            div_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).join(\n            conf_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).with_columns([\n            (pl.col(\"div_wins\").fill_null(0) / (pl.col(\"div_wins\").fill_null(0) + pl.col(\"div_losses\").fill_null(0) + 1e-10)).alias(\"div_pct\"),\n            (pl.col(\"conf_wins\").fill_null(0) / (pl.col(\"conf_wins\").fill_null(0) + pl.col(\"conf_losses\").fill_null(0) + 1e-10)).alias(\"conf_pct\")\n        ])\n        \n        # Calculate H2H performance for each team against other tied teams in their conference\n        def get_h2h_performance(tied_teams_df, h2h_data):\n            \"\"\"Calculate head-to-head win percentage for tied teams\"\"\"\n            # Create all team pairs within each tied group (same wins only)\n            tied_with_pairs = tied_teams_df.join(\n                tied_teams_df.select([\"scenario_id\", \"conf\", \"wins\", pl.col(\"team\").alias(\"opponent\")]),\n                on=[\"scenario_id\", \"conf\", \"wins\"], how=\"inner\"\n            ).filter(pl.col(\"team\") != pl.col(\"opponent\"))\n            \n            # Create normalized team pairs for H2H lookup\n            pairs_normalized = tied_with_pairs.with_columns([\n                pl.min_horizontal(pl.col(\"team\"), pl.col(\"opponent\")).alias(\"team1\"),\n                pl.max_horizontal(pl.col(\"team\"), pl.col(\"opponent\")).alias(\"team2\"),\n                pl.col(\"team\").alias(\"lookup_team\")\n            ])\n            \n            # Join with H2H results\n            h2h_lookup = pairs_normalized.join(\n                h2h_data, on=[\"scenario_id\", \"team1\", \"team2\"], how=\"left\"\n            ).with_columns([\n                # Determine if lookup_team is team1 or team2, get their wins\n                pl.when(pl.col(\"lookup_team\") == pl.col(\"team1\"))\n                .then(pl.col(\"team1_wins\").fill_null(0))\n                .otherwise(pl.col(\"team2_wins\").fill_null(0))\n                .alias(\"h2h_wins\"),\n                \n                # Total games = team1_wins + team2_wins\n                (pl.col(\"team1_wins\").fill_null(0) + pl.col(\"team2_wins\").fill_null(0)).alias(\"h2h_games\")\n            ])\n            \n            # Aggregate H2H performance by team (within same win groups)\n            h2h_performance = h2h_lookup.group_by([\"scenario_id\", \"conf\", \"wins\", \"lookup_team\"]).agg([\n                pl.sum(\"h2h_wins\").alias(\"h2h_wins\"),\n                pl.sum(\"h2h_games\").alias(\"h2h_games\")\n            ]).with_columns([\n                (pl.col(\"h2h_wins\") / (pl.col(\"h2h_games\") + 1e-10)).alias(\"h2h_pct\")\n            ]).rename({\"lookup_team\": \"team\"})\n            \n            return h2h_performance\n        \n        # Get H2H performance for tied division winners\n        h2h_performance = get_h2h_performance(tied_div_winners, h2h_summary)\n        \n        # Get common games performance for tied division winners\n        common_games_performance = calculate_common_games(tied_div_winners, simulator)\n        \n        # Get strength of victory for tied division winners\n        strength_of_victory_performance = calculate_strength_of_victory(tied_div_winners, simulator, team_records)\n        \n        # Create a tiebreaker score for ranking tied division winners\n        tied_ranked = tied_resolved.join(\n            h2h_performance, on=[\"scenario_id\", \"conf\", \"wins\", \"team\"], how=\"left\"\n        ).join(\n            common_games_performance, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        ).join(\n            strength_of_victory_performance, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        ).with_columns([\n            # NFL Division Winner Tiebreaker Sequence:\n            # 1. Overall record (already tied)\n            # 2. Head-to-head win percentage against tied teams\n            # 3. Division record percentage\n            # 4. Common games win percentage\n            # 5. Conference record percentage\n            # 6. Strength of victory (avg win % of defeated teams)\n            # 7. Team name for determinism\n            pl.struct([\n                pl.col(\"wins\"),\n                pl.col(\"h2h_pct\").fill_null(0.5),  # 50% if no H2H games\n                pl.col(\"div_pct\"),\n                pl.col(\"common_pct\").fill_null(0.5),  # 50% if no common games\n                pl.col(\"conf_pct\"),\n                pl.col(\"avg_defeated_pct\").fill_null(0.5),  # 50% if no victories\n                pl.col(\"team\").cast(pl.String)\n            ]).rank(method=\"ordinal\", descending=True).over([\"scenario_id\", \"conf\"]).alias(\"rank\")\n        ]).with_columns([\n            pl.col(\"conf\").alias(\"conference\"),\n            # Create informative tiebreaker descriptions showing actual results\n            pl.when((pl.col(\"h2h_games\").fill_null(0) > 0) & (pl.col(\"h2h_pct\").fill_null(0.5) != 0.5))\n            .then(pl.concat_str([\n                pl.lit(\"head-to-head \"),\n                pl.col(\"h2h_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"h2h_games\").fill_null(0) - pl.col(\"h2h_wins\").fill_null(0)).cast(pl.String),\n                pl.lit(\" vs tied teams\")\n            ]))\n            .when(pl.col(\"div_pct\") > pl.lit(0.001))\n            .then(pl.concat_str([\n                pl.lit(\"division record \"),\n                pl.col(\"div_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                pl.col(\"div_losses\").fill_null(0).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"div_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            .when((pl.col(\"common_games\").fill_null(0) >= 4) & (pl.col(\"common_pct\").fill_null(0.5) != 0.5))\n            .then(pl.concat_str([\n                pl.lit(\"common games \"),\n                pl.col(\"common_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"common_games\").fill_null(0) - pl.col(\"common_wins\").fill_null(0)).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"common_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            .when(pl.col(\"conf_pct\") > pl.lit(0.001))\n            .then(pl.concat_str([\n                pl.lit(\"conference record \"),\n                pl.col(\"conf_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                pl.col(\"conf_losses\").fill_null(0).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"conf_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            .when((pl.col(\"victories_count\").fill_null(0) > 0) & (pl.col(\"avg_defeated_pct\").fill_null(0.5) != 0.5))\n            .then(pl.concat_str([\n                pl.lit(\"strength of victory \"),\n                (pl.col(\"avg_defeated_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"% avg opponent strength\")\n            ]))\n            .otherwise(pl.lit(\"team name\"))\n            .alias(\"tiebreaker_used\")\n        ])\n        \n        # Determine actual tiebreaker used for tied division winners\n        tied_ranked_with_proper_tiebreaker = tied_ranked.with_columns([\n            # Determine which step in NFL sequence actually broke the tie\n            # Step 1: Check if H2H breaks ties (only for teams that actually played)\n            pl.when((pl.col(\"h2h_games\").fill_null(0) > 0) & \n                   (pl.col(\"h2h_pct\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"head-to-head \"),\n                pl.col(\"h2h_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"h2h_games\").fill_null(0) - pl.col(\"h2h_wins\").fill_null(0)).cast(pl.String),\n                pl.lit(\" vs tied teams\")\n            ]))\n            # Step 2: Division record (only if teams in same division AND it differentiates)\n            .when((pl.col(\"division\").over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() == 1) & \n                 (pl.col(\"div_pct\").over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"division record \"),\n                pl.col(\"div_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                pl.col(\"div_losses\").fill_null(0).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"div_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            # Step 3: Common games (min 4 games and differentiates)\n            .when((pl.col(\"common_games\").fill_null(0) >= 4) & \n                 (pl.col(\"common_pct\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"common games \"),\n                pl.col(\"common_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"common_games\").fill_null(0) - pl.col(\"common_wins\").fill_null(0)).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"common_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            # Step 4: Conference record\n            .when(pl.col(\"conf_pct\").over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1)\n            .then(pl.concat_str([\n                pl.lit(\"conference record \"),\n                pl.col(\"conf_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                pl.col(\"conf_losses\").fill_null(0).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"conf_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            # Step 5: Strength of victory\n            .when((pl.col(\"victories_count\").fill_null(0) > 0) & \n                 (pl.col(\"avg_defeated_pct\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"strength of victory \"),\n                (pl.col(\"avg_defeated_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"% avg opponent strength\")\n            ]))\n            .otherwise(pl.lit(\"team name\"))\n            .alias(\"tiebreaker_used\")\n        ])\n\n        # Combine all division winner rankings\n        div_winners_ranked = pl.concat([\n            clear_div_winners.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"]),\n            tied_ranked_with_proper_tiebreaker.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"])\n        ])\n        \n        # Step 3: Wildcard seeding (5-7) - Apply proper NFL wildcard tiebreaking\n        # First get all non-division winners\n        all_non_div_winners = standings.join(\n            division_winners.select([\"scenario_id\", \"team\"]), \n            on=[\"scenario_id\", \"team\"], \n            how=\"anti\"\n        )\n        \n        # Apply division tiebreaker to eliminate all but highest ranked club in each division\n        # For wildcard consideration, use same tiebreakers as division winners but only keep #1 from each division\n        non_div_winners_with_tiebreakers = all_non_div_winners.join(\n            div_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).join(\n            conf_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).with_columns([\n            (pl.col(\"div_wins\").fill_null(0) / (pl.col(\"div_wins\").fill_null(0) + pl.col(\"div_losses\").fill_null(0) + 1e-10)).alias(\"div_pct\"),\n            (pl.col(\"conf_wins\").fill_null(0) / (pl.col(\"conf_wins\").fill_null(0) + pl.col(\"conf_losses\").fill_null(0) + 1e-10)).alias(\"conf_pct\")\n        ])\n        \n        # Calculate strength of schedule for wildcard pre-elimination\n        wildcard_sos = calculate_strength_of_schedule_simple(non_div_winners_with_tiebreakers, simulator, team_records)\n        \n        non_div_winners_with_sos = non_div_winners_with_tiebreakers.join(\n            wildcard_sos, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        )\n        \n        # For wildcards, we consider ALL non-division winners, not just top from each division\n        # NFL wildcard rule: Best non-division winners regardless of division\n        wildcard_candidates = non_div_winners_with_sos\n        \n        # Check for ties among wildcard candidates within each conference\n        wildcard_tie_check = wildcard_candidates.group_by([\"scenario_id\", \"conf\"]).agg([\n            pl.col(\"wins\").n_unique().alias(\"unique_wins\"),\n            pl.col(\"team\").count().alias(\"total_candidates\")\n        ])\n        \n        # Fast path: No ties among top wildcard candidates (all have different records)\n        clear_wildcards = wildcard_candidates.join(\n            wildcard_tie_check.filter(pl.col(\"unique_wins\") == pl.col(\"total_candidates\")),\n            on=[\"scenario_id\", \"conf\"],\n            how=\"inner\"\n        ).with_columns([\n            pl.col(\"wins\").rank(method=\"ordinal\", descending=True).over([\"scenario_id\", \"conf\"]).alias(\"wildcard_rank\")\n        ]).filter(pl.col(\"wildcard_rank\") <= 3).with_columns([\n            (pl.col(\"wildcard_rank\") + 4).alias(\"rank\"),\n            pl.col(\"conf\").alias(\"conference\"),\n            pl.lit(\"wins\").alias(\"tiebreaker_used\")\n        ])\n        \n        # Detailed path: Ties among wildcard candidates need NFL tiebreaking\n        tied_wildcard_candidates = wildcard_candidates.join(\n            wildcard_tie_check.filter(pl.col(\"unique_wins\") < pl.col(\"total_candidates\")),\n            on=[\"scenario_id\", \"conf\"],\n            how=\"inner\"\n        )\n        \n        # Apply NFL wildcard tiebreaking sequence (different from division winner rules)\n        tied_wildcard_resolved = tied_wildcard_candidates.join(\n            conf_records, on=[\"scenario_id\", \"team\"], how=\"left\"\n        ).with_columns([\n            (pl.col(\"conf_wins\").fill_null(0) / (pl.col(\"conf_wins\").fill_null(0) + pl.col(\"conf_losses\").fill_null(0) + 1e-10)).alias(\"conf_pct\")\n        ])\n        \n        # Get H2H performance for tied wildcard candidates (when applicable)\n        wildcard_h2h_performance = get_h2h_performance(tied_wildcard_candidates, h2h_summary)\n        \n        # Get common games performance for tied wildcard candidates\n        wildcard_common_games_performance = calculate_common_games(tied_wildcard_candidates, simulator)\n        \n        # Get strength of victory for tied wildcard candidates\n        wildcard_strength_of_victory_performance = calculate_strength_of_victory(tied_wildcard_candidates, simulator, team_records)\n        \n        # Get strength of schedule for tied wildcard candidates\n        wildcard_strength_of_schedule_performance = calculate_strength_of_schedule_simple(tied_wildcard_candidates, simulator, team_records)\n        \n        # Create wildcard ranking with proper NFL tiebreaker sequence\n        tied_wildcard_ranked = tied_wildcard_resolved.join(\n            wildcard_h2h_performance, on=[\"scenario_id\", \"conf\", \"wins\", \"team\"], how=\"left\"\n        ).join(\n            wildcard_common_games_performance, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        ).join(\n            wildcard_strength_of_victory_performance, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        ).join(\n            wildcard_strength_of_schedule_performance, on=[\"scenario_id\", \"conf\", \"team\"], how=\"left\"\n        ).with_columns([\n            # NFL Wildcard Tiebreaker Sequence (for teams from different divisions):\n            # 1. Overall record (already tied in most cases)\n            # 2. Head-to-head (if applicable - only when teams actually played)\n            # 3. Conference record percentage\n            # 4. Common games win percentage (min 4 games required)\n            # 5. Strength of victory (avg win % of defeated teams)\n            # 6. Strength of schedule (avg win % of all opponents)\n            # 7. Team name for determinism\n            pl.struct([\n                pl.col(\"wins\"),\n                # Only use H2H if teams actually played (h2h_games > 0), otherwise neutral\n                pl.when(pl.col(\"h2h_games\").fill_null(0) > 0)\n                .then(pl.col(\"h2h_pct\"))\n                .otherwise(pl.lit(0.5)).alias(\"h2h_pct_adj\"),\n                pl.col(\"conf_pct\"),\n                # Only use common games percentage if minimum 4 games, otherwise neutral\n                pl.when(pl.col(\"common_games\").fill_null(0) >= 4)\n                .then(pl.col(\"common_pct\"))\n                .otherwise(pl.lit(0.5)).alias(\"common_pct_adj\"),\n                pl.col(\"avg_defeated_pct\").fill_null(0.5),  # 50% if no victories\n                pl.col(\"strength_of_schedule\").fill_null(0.5),  # 50% if no schedule data\n                pl.col(\"team\").cast(pl.String)\n            ]).rank(method=\"ordinal\", descending=True).over([\"scenario_id\", \"conf\"]).alias(\"wildcard_rank\")\n        ]).filter(pl.col(\"wildcard_rank\") <= 3).with_columns([\n            (pl.col(\"wildcard_rank\") + 4).alias(\"rank\"),\n            pl.col(\"conf\").alias(\"conference\")\n        ])\n        \n        # Apply proper tiebreaker descriptions for wildcard seeding\n        tied_wildcard_ranked_with_proper_tiebreaker = tied_wildcard_ranked.with_columns([\n            # Determine which step in NFL wildcard sequence actually broke the tie\n            pl.when((pl.col(\"h2h_games\").fill_null(0) > 0) & \n                   (pl.col(\"h2h_pct\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"head-to-head \"),\n                pl.col(\"h2h_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"h2h_games\").fill_null(0) - pl.col(\"h2h_wins\").fill_null(0)).cast(pl.String),\n                pl.lit(\" vs tied teams\")\n            ]))\n            .when(pl.col(\"conf_pct\").over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1)\n            .then(pl.concat_str([\n                pl.lit(\"conference record \"),\n                pl.col(\"conf_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                pl.col(\"conf_losses\").fill_null(0).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"conf_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            .when((pl.col(\"common_games\").fill_null(0) >= 4) & \n                 (pl.col(\"common_pct\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"common games \"),\n                pl.col(\"common_wins\").fill_null(0).cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"common_games\").fill_null(0) - pl.col(\"common_wins\").fill_null(0)).cast(pl.String),\n                pl.lit(\" (\"),\n                (pl.col(\"common_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"%)\")\n            ]))\n            .when((pl.col(\"victories_count\").fill_null(0) > 0) & \n                 (pl.col(\"avg_defeated_pct\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1))\n            .then(pl.concat_str([\n                pl.lit(\"strength of victory \"),\n                (pl.col(\"avg_defeated_pct\") * 100).round(1).cast(pl.String),\n                pl.lit(\"% avg opponent strength\")\n            ]))\n            .when(pl.col(\"strength_of_schedule\").fill_null(0.5).over([\"scenario_id\", \"conf\", \"wins\"]).n_unique() > 1)\n            .then(pl.concat_str([\n                pl.lit(\"strength of schedule \"),\n                (pl.col(\"strength_of_schedule\") * 100).round(1).cast(pl.String),\n                pl.lit(\"% avg opponent strength\")\n            ]))\n            .otherwise(pl.lit(\"team name\"))\n            .alias(\"tiebreaker_used\")\n        ])\n        \n        # Combine all wildcard rankings\n        wildcards = pl.concat([\n            clear_wildcards.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"]),\n            tied_wildcard_ranked_with_proper_tiebreaker.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"])\n        ])\n        \n        # Get remaining teams that missed playoffs\n        playoff_teams = pl.concat([\n            div_winners_ranked.select([\"scenario_id\", \"team\"]),\n            wildcards.select([\"scenario_id\", \"team\"])\n        ])\n        \n        non_playoff = standings.join(\n            playoff_teams,\n            on=[\"scenario_id\", \"team\"],\n            how=\"anti\"\n        ).with_columns([\n            pl.col(\"wins\").rank(method=\"ordinal\", descending=True).over([\"scenario_id\", \"conf\"]).alias(\"remaining_rank\")\n        ]).with_columns([\n            (pl.col(\"remaining_rank\") + 7).alias(\"rank\"),\n            pl.col(\"conf\").alias(\"conference\"), \n            # Better tiebreaker description for non-playoff teams\n            pl.when(pl.col(\"wins\").over([\"scenario_id\", \"conf\"]).n_unique() > 1)\n            .then(pl.concat_str([\n                pl.lit(\"wins (\"),\n                pl.col(\"wins\").cast(pl.String),\n                pl.lit(\"-\"),\n                (pl.col(\"games\") - pl.col(\"wins\")).cast(pl.String),\n                pl.lit(\")\")\n            ]))\n            .otherwise(pl.lit(\"team name\"))\n            .alias(\"tiebreaker_used\")\n        ])\n        \n        # Combine all results\n        final_result = pl.concat([\n            div_winners_ranked.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"]),\n            wildcards.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"]),\n            non_playoff.select([\"scenario_id\", \"team\", \"conference\", \"wins\", \"rank\", \"tiebreaker_used\"])\n        ]).sort([\"scenario_id\", \"conference\", \"rank\"])\n        \n        # Convert categoricals back to strings for pandas compatibility\n        final_result = final_result.with_columns([\n            pl.col(\"team\").cast(pl.String),\n            pl.col(\"conference\").cast(pl.String),\n            pl.col(\"tiebreaker_used\").cast(pl.String)\n        ])\n    \n    return final_result.to_pandas()\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"nfl_ratings\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"nfl_ratings\\\"\", \"nfl_reg_season_simulator\": \"\\\"mdsbox\\\".\\\"main\\\".\\\"nfl_reg_season_simulator\\\"\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"mdsbox\"\n    schema = \"main\"\n    identifier = \"nfl_tiebreakers_optimized\"\n    \n    def __repr__(self):\n        return '\"mdsbox\".\"main\".\"nfl_tiebreakers_optimized\"'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.sports_sims.assert_nfl_tiebreakers_properly_broken": {"database": "mdsbox", "schema": "main_dbt_test__audit", "name": "assert_nfl_tiebreakers_properly_broken", "resource_type": "test", "package_name": "sports_sims", "path": "assert_nfl_tiebreakers_properly_broken.sql", "original_file_path": "tests/assert_nfl_tiebreakers_properly_broken.sql", "unique_id": "test.sports_sims.assert_nfl_tiebreakers_properly_broken", "fqn": ["sports_sims", "assert_nfl_tiebreakers_properly_broken"], "alias": "assert_nfl_tiebreakers_properly_broken", "checksum": {"name": "sha256", "checksum": "22eed5902601db83d304b7d2b447f7bf8cda2d216e06648c8775a73667365093"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/tests/assert_nfl_tiebreakers_properly_broken.sql", "unrendered_config": {"store_failures": true, "store_failures_as": "table"}, "created_at": 1756353816.269118, "relation_name": "\"mdsbox\".\"main_dbt_test__audit\".\"assert_nfl_tiebreakers_properly_broken\"", "raw_code": "{{ config(\n    store_failures=true,\n    store_failures_as='table'\n) }}\n\n-- Test that all NFL tiebreakers are properly broken according to official NFL rules\n-- This query should return 0 rows if all ties are properly resolved\n\nWITH \n-- Get base tiebreaker results\ntiebreaker_results AS (\n    SELECT \n        scenario_id,\n        team,\n        conference,\n        rank,\n        wins,\n        tiebreaker_used\n    FROM {{ ref('nfl_tiebreakers_optimized') }}\n),\n\n-- Get game results for validation\ngame_results AS (\n    SELECT \n        scenario_id,\n        home_team,\n        visiting_team,\n        winning_team\n    FROM {{ ref('nfl_reg_season_simulator') }}\n),\n\n-- Get team metadata\nteam_info AS (\n    SELECT \n        team,\n        conf as conference,\n        division\n    FROM {{ ref('nfl_ratings') }}\n),\n\n-- Test 1: Basic structural validation\ntie_validation AS (\n    SELECT \n        scenario_id,\n        conference,\n        rank,\n        COUNT(*) as teams_with_same_rank,\n        STRING_AGG(team, ', ') as tied_teams\n    FROM tiebreaker_results\n    GROUP BY scenario_id, conference, rank\n    HAVING COUNT(*) > 1\n),\n\nrank_gaps AS (\n    SELECT \n        scenario_id,\n        conference,\n        rank,\n        LAG(rank) OVER (PARTITION BY scenario_id, conference ORDER BY rank) as prev_rank,\n        CAST(rank AS INT) - CAST(LAG(rank) OVER (PARTITION BY scenario_id, conference ORDER BY rank) AS INT) as rank_gap\n    FROM tiebreaker_results\n),\n\nseeding_validation AS (\n    SELECT \n        scenario_id,\n        conference,\n        -- Count teams in each seeding category\n        COUNT(CASE WHEN rank BETWEEN 1 AND 4 THEN 1 END) as division_winners,\n        COUNT(CASE WHEN rank BETWEEN 5 AND 7 THEN 1 END) as wildcards,\n        COUNT(CASE WHEN rank >= 8 THEN 1 END) as non_playoff_teams,\n        COUNT(*) as total_teams\n    FROM tiebreaker_results\n    GROUP BY scenario_id, conference\n),\n\n-- Test 2: Division winner validation\ndivision_winners AS (\n    SELECT \n        tr.scenario_id,\n        tr.team,\n        tr.conference,\n        tr.wins,\n        tr.rank,\n        tr.tiebreaker_used,\n        ti.division\n    FROM tiebreaker_results tr\n    JOIN team_info ti ON tr.team = ti.team\n    WHERE tr.rank BETWEEN 1 AND 4\n),\n\n-- Check if division winners actually won their divisions\ndivision_winner_validation AS (\n    SELECT \n        dw.scenario_id,\n        dw.conference,\n        dw.division,\n        dw.team as division_winner,\n        dw.wins as winner_wins,\n        COUNT(other.team) as teams_with_better_record\n    FROM division_winners dw\n    JOIN team_info ti ON ti.division = dw.division AND ti.conference = dw.conference\n    JOIN tiebreaker_results other ON other.team = ti.team AND other.scenario_id = dw.scenario_id\n    WHERE other.wins > dw.wins\n    GROUP BY dw.scenario_id, dw.conference, dw.division, dw.team, dw.wins\n    HAVING COUNT(other.team) > 0\n),\n\n-- Test 3: Head-to-head tiebreaker validation for true two-team ties only\ntwo_team_h2h_validation AS (\n    SELECT DISTINCT\n        tr1.scenario_id,\n        tr1.conference,\n        tr1.team as team1,\n        tr2.team as team2,\n        tr1.wins as team1_wins,\n        tr2.wins as team2_wins,\n        tr1.rank as team1_rank,\n        tr2.rank as team2_rank,\n        tr1.tiebreaker_used as team1_tiebreaker,\n        tr2.tiebreaker_used as team2_tiebreaker,\n        -- Calculate actual head-to-head record\n        COALESCE(h2h.team1_games_won, 0) as team1_h2h_wins,\n        COALESCE(h2h.team2_games_won, 0) as team2_h2h_wins,\n        COALESCE(h2h.total_h2h_games, 0) as total_h2h_games,\n        tied_teams.team_count\n    FROM tiebreaker_results tr1\n    JOIN tiebreaker_results tr2 ON tr1.scenario_id = tr2.scenario_id \n        AND tr1.conference = tr2.conference \n        AND tr1.team != tr2.team\n        AND tr1.wins = tr2.wins  -- Same record\n        AND ABS(CAST(tr1.rank AS INT) - CAST(tr2.rank AS INT)) = 1  -- Adjacent ranks\n    -- Count how many teams have the same record in this scenario/conference\n    JOIN (\n        SELECT \n            scenario_id,\n            conference,\n            wins,\n            COUNT(*) as team_count\n        FROM tiebreaker_results\n        GROUP BY scenario_id, conference, wins\n    ) tied_teams ON tied_teams.scenario_id = tr1.scenario_id \n        AND tied_teams.conference = tr1.conference \n        AND tied_teams.wins = tr1.wins\n    LEFT JOIN (\n        -- Calculate head-to-head records\n        SELECT \n            gr.scenario_id,\n            LEAST(gr.home_team, gr.visiting_team) as team1,\n            GREATEST(gr.home_team, gr.visiting_team) as team2,\n            SUM(CASE WHEN gr.winning_team = LEAST(gr.home_team, gr.visiting_team) THEN 1 ELSE 0 END) as team1_games_won,\n            SUM(CASE WHEN gr.winning_team = GREATEST(gr.home_team, gr.visiting_team) THEN 1 ELSE 0 END) as team2_games_won,\n            COUNT(*) as total_h2h_games\n        FROM game_results gr\n        GROUP BY gr.scenario_id, LEAST(gr.home_team, gr.visiting_team), GREATEST(gr.home_team, gr.visiting_team)\n    ) h2h ON h2h.scenario_id = tr1.scenario_id\n        AND h2h.team1 = LEAST(tr1.team, tr2.team)\n        AND h2h.team2 = GREATEST(tr1.team, tr2.team)\n    WHERE tr1.team < tr2.team  -- Avoid duplicates\n        AND tied_teams.team_count = 2  -- Only validate true 2-team ties\n),\n\n-- Validate head-to-head tiebreakers were applied correctly\nh2h_tiebreaker_violations AS (\n    SELECT \n        scenario_id,\n        conference,\n        team1,\n        team2,\n        team1_rank,\n        team2_rank,\n        team1_h2h_wins,\n        team2_h2h_wins,\n        total_h2h_games,\n        team1_tiebreaker,\n        team2_tiebreaker\n    FROM two_team_h2h_validation\n    WHERE total_h2h_games > 0  -- Teams actually played head-to-head\n        AND (\n            -- Team with worse H2H record ranked higher\n            (team1_h2h_wins > team2_h2h_wins AND team1_rank > team2_rank) OR\n            (team2_h2h_wins > team1_h2h_wins AND team2_rank > team1_rank)\n        )\n        AND (team1_tiebreaker LIKE '%head-to-head%' OR team2_tiebreaker LIKE '%head-to-head%')\n),\n\n-- Test 4: Wildcard seeding validation\nwildcard_validation AS (\n    SELECT \n        scenario_id,\n        conference,\n        rank,\n        team,\n        wins,\n        tiebreaker_used\n    FROM tiebreaker_results\n    WHERE rank BETWEEN 5 AND 7\n),\n\n-- Check if wildcards are actually the best non-division winners\nwildcard_seeding_violations AS (\n    SELECT \n        wc.scenario_id,\n        wc.conference,\n        wc.team as wildcard_team,\n        wc.wins as wildcard_wins,\n        wc.rank as wildcard_rank,\n        COUNT(better.team) as better_non_division_winners\n    FROM wildcard_validation wc\n    JOIN tiebreaker_results better ON better.scenario_id = wc.scenario_id \n        AND better.conference = wc.conference\n        AND better.rank > 7  -- Non-playoff team\n        AND better.wins > wc.wins\n    GROUP BY wc.scenario_id, wc.conference, wc.team, wc.wins, wc.rank\n    HAVING COUNT(better.team) > 0\n),\n\n-- Test 5: Tiebreaker consistency validation\ntiebreaker_consistency AS (\n    SELECT \n        scenario_id,\n        conference,\n        wins,\n        tiebreaker_used,\n        COUNT(DISTINCT team) as teams_with_same_record,\n        COUNT(DISTINCT tiebreaker_used) as different_tiebreakers_used\n    FROM tiebreaker_results\n    GROUP BY scenario_id, conference, wins, tiebreaker_used\n    HAVING COUNT(DISTINCT team) > 1 AND COUNT(DISTINCT tiebreaker_used) > 1\n),\n\n-- Test 6: Coin toss validation (should only be used as last resort)\npremature_coin_toss AS (\n    SELECT \n        tr.scenario_id,\n        tr.conference,\n        tr.team,\n        tr.wins,\n        tr.rank,\n        tr.tiebreaker_used\n    FROM tiebreaker_results tr\n    WHERE tr.tiebreaker_used = 'coin_toss'\n        OR tr.tiebreaker_used LIKE '%team name%'\n),\n\n-- Aggregate all assertion failures\nassertion_failures AS (\n    -- Test 1: No tied ranks\n    SELECT \n        'TIED_RANKS' as failure_type,\n        scenario_id,\n        conference,\n        CAST(rank AS VARCHAR) as detail,\n        'Teams tied at same rank: ' || tied_teams as description\n    FROM tie_validation\n    \n    UNION ALL\n    \n    -- Test 2: No gaps in ranking\n    SELECT \n        'RANK_GAPS' as failure_type,\n        scenario_id,\n        conference,\n        CAST(rank AS VARCHAR) as detail,\n        'Gap of ' || CAST(rank_gap AS VARCHAR) || ' between rank ' || CAST(prev_rank AS VARCHAR) || ' and ' || CAST(rank AS VARCHAR) as description\n    FROM rank_gaps \n    WHERE prev_rank IS NOT NULL AND rank_gap > 1\n    \n    UNION ALL\n    \n    -- Test 3: Proper seeding structure\n    SELECT \n        'SEEDING_STRUCTURE' as failure_type,\n        scenario_id,\n        conference,\n        'DivWin:' || CAST(division_winners AS VARCHAR) || ' WC:' || CAST(wildcards AS VARCHAR) as detail,\n        'Expected 4 division winners and 3 wildcards, got ' || CAST(division_winners AS VARCHAR) || ' division winners and ' || CAST(wildcards AS VARCHAR) || ' wildcards' as description\n    FROM seeding_validation\n    WHERE division_winners != 4 OR wildcards != 3\n    \n    UNION ALL\n    \n    -- Test 4: Total teams per conference\n    SELECT \n        'TEAM_COUNT' as failure_type,\n        scenario_id,\n        conference,\n        CAST(total_teams AS VARCHAR) as detail,\n        'Expected 16 teams per conference, got ' || CAST(total_teams AS VARCHAR) as description\n    FROM seeding_validation\n    WHERE total_teams != 16\n    \n    UNION ALL\n    \n    -- Test 5: Ranks start at 1\n    SELECT \n        'RANK_START' as failure_type,\n        t1.scenario_id,\n        t1.conference,\n        CAST(MIN(t1.rank) AS VARCHAR) as detail,\n        'Ranks should start at 1, but lowest rank is ' || CAST(MIN(t1.rank) AS VARCHAR) as description\n    FROM tiebreaker_results t1\n    GROUP BY t1.scenario_id, t1.conference\n    HAVING MIN(t1.rank) != 1\n    \n    UNION ALL\n    \n    -- Test 6: Division winners actually won their divisions\n    SELECT \n        'DIVISION_WINNER_INVALID' as failure_type,\n        scenario_id,\n        conference,\n        division_winner as detail,\n        division_winner || ' ranked as division winner but ' || CAST(teams_with_better_record AS VARCHAR) || ' team(s) in same division have better record' as description\n    FROM division_winner_validation\n    \n    UNION ALL\n    \n    -- Test 7: Head-to-head tiebreakers applied correctly\n    SELECT \n        'H2H_VIOLATION' as failure_type,\n        scenario_id,\n        conference,\n        team1 || ' vs ' || team2 as detail,\n        'Head-to-head tiebreaker violation: ' || team1 || ' (H2H: ' || CAST(team1_h2h_wins AS VARCHAR) || '-' || CAST(team2_h2h_wins AS VARCHAR) || ', Rank: ' || CAST(team1_rank AS VARCHAR) || ') vs ' || team2 || ' (Rank: ' || CAST(team2_rank AS VARCHAR) || ')' as description\n    FROM h2h_tiebreaker_violations\n    \n    UNION ALL\n    \n    -- Test 8: Wildcard seeding violations\n    SELECT \n        'WILDCARD_VIOLATION' as failure_type,\n        scenario_id,\n        conference,\n        wildcard_team as detail,\n        wildcard_team || ' is wildcard with ' || CAST(wildcard_wins AS VARCHAR) || ' wins, but ' || CAST(better_non_division_winners AS VARCHAR) || ' non-division winner(s) have better record' as description\n    FROM wildcard_seeding_violations\n    \n    UNION ALL\n    \n    -- Test 9: Tiebreaker consistency\n    SELECT \n        'TIEBREAKER_INCONSISTENCY' as failure_type,\n        scenario_id,\n        conference,\n        CAST(wins AS VARCHAR) || ' wins' as detail,\n        CAST(teams_with_same_record AS VARCHAR) || ' teams with same record used ' || CAST(different_tiebreakers_used AS VARCHAR) || ' different tiebreakers' as description\n    FROM tiebreaker_consistency\n    \n    UNION ALL\n    \n    -- Test 10: Premature coin toss usage\n    SELECT \n        'PREMATURE_COIN_TOSS' as failure_type,\n        scenario_id,\n        conference,\n        team as detail,\n        team || ' resolved by coin toss/team name - verify all other tiebreakers were properly exhausted' as description\n    FROM premature_coin_toss\n)\n\n-- Return all assertion failures (should be 0 rows if everything is correct)\nSELECT \n    failure_type,\n    scenario_id,\n    conference,\n    detail,\n    description\nFROM assertion_failures\nORDER BY failure_type, scenario_id, conference", "language": "sql", "refs": [{"name": "nfl_tiebreakers_optimized", "package": null, "version": null}, {"name": "nfl_reg_season_simulator", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.sports_sims.nfl_tiebreakers_optimized", "model.sports_sims.nfl_reg_season_simulator", "model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/tests/assert_nfl_tiebreakers_properly_broken.sql", "compiled": true, "compiled_code": "\n\n-- Test that all NFL tiebreakers are properly broken according to official NFL rules\n-- This query should return 0 rows if all ties are properly resolved\n\nWITH \n-- Get base tiebreaker results\ntiebreaker_results AS (\n    SELECT \n        scenario_id,\n        team,\n        conference,\n        rank,\n        wins,\n        tiebreaker_used\n    FROM \"mdsbox\".\"main\".\"nfl_tiebreakers_optimized\"\n),\n\n-- Get game results for validation\ngame_results AS (\n    SELECT \n        scenario_id,\n        home_team,\n        visiting_team,\n        winning_team\n    FROM \"mdsbox\".\"main\".\"nfl_reg_season_simulator\"\n),\n\n-- Get team metadata\nteam_info AS (\n    SELECT \n        team,\n        conf as conference,\n        division\n    FROM \"mdsbox\".\"main\".\"nfl_ratings\"\n),\n\n-- Test 1: Basic structural validation\ntie_validation AS (\n    SELECT \n        scenario_id,\n        conference,\n        rank,\n        COUNT(*) as teams_with_same_rank,\n        STRING_AGG(team, ', ') as tied_teams\n    FROM tiebreaker_results\n    GROUP BY scenario_id, conference, rank\n    HAVING COUNT(*) > 1\n),\n\nrank_gaps AS (\n    SELECT \n        scenario_id,\n        conference,\n        rank,\n        LAG(rank) OVER (PARTITION BY scenario_id, conference ORDER BY rank) as prev_rank,\n        CAST(rank AS INT) - CAST(LAG(rank) OVER (PARTITION BY scenario_id, conference ORDER BY rank) AS INT) as rank_gap\n    FROM tiebreaker_results\n),\n\nseeding_validation AS (\n    SELECT \n        scenario_id,\n        conference,\n        -- Count teams in each seeding category\n        COUNT(CASE WHEN rank BETWEEN 1 AND 4 THEN 1 END) as division_winners,\n        COUNT(CASE WHEN rank BETWEEN 5 AND 7 THEN 1 END) as wildcards,\n        COUNT(CASE WHEN rank >= 8 THEN 1 END) as non_playoff_teams,\n        COUNT(*) as total_teams\n    FROM tiebreaker_results\n    GROUP BY scenario_id, conference\n),\n\n-- Test 2: Division winner validation\ndivision_winners AS (\n    SELECT \n        tr.scenario_id,\n        tr.team,\n        tr.conference,\n        tr.wins,\n        tr.rank,\n        tr.tiebreaker_used,\n        ti.division\n    FROM tiebreaker_results tr\n    JOIN team_info ti ON tr.team = ti.team\n    WHERE tr.rank BETWEEN 1 AND 4\n),\n\n-- Check if division winners actually won their divisions\ndivision_winner_validation AS (\n    SELECT \n        dw.scenario_id,\n        dw.conference,\n        dw.division,\n        dw.team as division_winner,\n        dw.wins as winner_wins,\n        COUNT(other.team) as teams_with_better_record\n    FROM division_winners dw\n    JOIN team_info ti ON ti.division = dw.division AND ti.conference = dw.conference\n    JOIN tiebreaker_results other ON other.team = ti.team AND other.scenario_id = dw.scenario_id\n    WHERE other.wins > dw.wins\n    GROUP BY dw.scenario_id, dw.conference, dw.division, dw.team, dw.wins\n    HAVING COUNT(other.team) > 0\n),\n\n-- Test 3: Head-to-head tiebreaker validation for true two-team ties only\ntwo_team_h2h_validation AS (\n    SELECT DISTINCT\n        tr1.scenario_id,\n        tr1.conference,\n        tr1.team as team1,\n        tr2.team as team2,\n        tr1.wins as team1_wins,\n        tr2.wins as team2_wins,\n        tr1.rank as team1_rank,\n        tr2.rank as team2_rank,\n        tr1.tiebreaker_used as team1_tiebreaker,\n        tr2.tiebreaker_used as team2_tiebreaker,\n        -- Calculate actual head-to-head record\n        COALESCE(h2h.team1_games_won, 0) as team1_h2h_wins,\n        COALESCE(h2h.team2_games_won, 0) as team2_h2h_wins,\n        COALESCE(h2h.total_h2h_games, 0) as total_h2h_games,\n        tied_teams.team_count\n    FROM tiebreaker_results tr1\n    JOIN tiebreaker_results tr2 ON tr1.scenario_id = tr2.scenario_id \n        AND tr1.conference = tr2.conference \n        AND tr1.team != tr2.team\n        AND tr1.wins = tr2.wins  -- Same record\n        AND ABS(CAST(tr1.rank AS INT) - CAST(tr2.rank AS INT)) = 1  -- Adjacent ranks\n    -- Count how many teams have the same record in this scenario/conference\n    JOIN (\n        SELECT \n            scenario_id,\n            conference,\n            wins,\n            COUNT(*) as team_count\n        FROM tiebreaker_results\n        GROUP BY scenario_id, conference, wins\n    ) tied_teams ON tied_teams.scenario_id = tr1.scenario_id \n        AND tied_teams.conference = tr1.conference \n        AND tied_teams.wins = tr1.wins\n    LEFT JOIN (\n        -- Calculate head-to-head records\n        SELECT \n            gr.scenario_id,\n            LEAST(gr.home_team, gr.visiting_team) as team1,\n            GREATEST(gr.home_team, gr.visiting_team) as team2,\n            SUM(CASE WHEN gr.winning_team = LEAST(gr.home_team, gr.visiting_team) THEN 1 ELSE 0 END) as team1_games_won,\n            SUM(CASE WHEN gr.winning_team = GREATEST(gr.home_team, gr.visiting_team) THEN 1 ELSE 0 END) as team2_games_won,\n            COUNT(*) as total_h2h_games\n        FROM game_results gr\n        GROUP BY gr.scenario_id, LEAST(gr.home_team, gr.visiting_team), GREATEST(gr.home_team, gr.visiting_team)\n    ) h2h ON h2h.scenario_id = tr1.scenario_id\n        AND h2h.team1 = LEAST(tr1.team, tr2.team)\n        AND h2h.team2 = GREATEST(tr1.team, tr2.team)\n    WHERE tr1.team < tr2.team  -- Avoid duplicates\n        AND tied_teams.team_count = 2  -- Only validate true 2-team ties\n),\n\n-- Validate head-to-head tiebreakers were applied correctly\nh2h_tiebreaker_violations AS (\n    SELECT \n        scenario_id,\n        conference,\n        team1,\n        team2,\n        team1_rank,\n        team2_rank,\n        team1_h2h_wins,\n        team2_h2h_wins,\n        total_h2h_games,\n        team1_tiebreaker,\n        team2_tiebreaker\n    FROM two_team_h2h_validation\n    WHERE total_h2h_games > 0  -- Teams actually played head-to-head\n        AND (\n            -- Team with worse H2H record ranked higher\n            (team1_h2h_wins > team2_h2h_wins AND team1_rank > team2_rank) OR\n            (team2_h2h_wins > team1_h2h_wins AND team2_rank > team1_rank)\n        )\n        AND (team1_tiebreaker LIKE '%head-to-head%' OR team2_tiebreaker LIKE '%head-to-head%')\n),\n\n-- Test 4: Wildcard seeding validation\nwildcard_validation AS (\n    SELECT \n        scenario_id,\n        conference,\n        rank,\n        team,\n        wins,\n        tiebreaker_used\n    FROM tiebreaker_results\n    WHERE rank BETWEEN 5 AND 7\n),\n\n-- Check if wildcards are actually the best non-division winners\nwildcard_seeding_violations AS (\n    SELECT \n        wc.scenario_id,\n        wc.conference,\n        wc.team as wildcard_team,\n        wc.wins as wildcard_wins,\n        wc.rank as wildcard_rank,\n        COUNT(better.team) as better_non_division_winners\n    FROM wildcard_validation wc\n    JOIN tiebreaker_results better ON better.scenario_id = wc.scenario_id \n        AND better.conference = wc.conference\n        AND better.rank > 7  -- Non-playoff team\n        AND better.wins > wc.wins\n    GROUP BY wc.scenario_id, wc.conference, wc.team, wc.wins, wc.rank\n    HAVING COUNT(better.team) > 0\n),\n\n-- Test 5: Tiebreaker consistency validation\ntiebreaker_consistency AS (\n    SELECT \n        scenario_id,\n        conference,\n        wins,\n        tiebreaker_used,\n        COUNT(DISTINCT team) as teams_with_same_record,\n        COUNT(DISTINCT tiebreaker_used) as different_tiebreakers_used\n    FROM tiebreaker_results\n    GROUP BY scenario_id, conference, wins, tiebreaker_used\n    HAVING COUNT(DISTINCT team) > 1 AND COUNT(DISTINCT tiebreaker_used) > 1\n),\n\n-- Test 6: Coin toss validation (should only be used as last resort)\npremature_coin_toss AS (\n    SELECT \n        tr.scenario_id,\n        tr.conference,\n        tr.team,\n        tr.wins,\n        tr.rank,\n        tr.tiebreaker_used\n    FROM tiebreaker_results tr\n    WHERE tr.tiebreaker_used = 'coin_toss'\n        OR tr.tiebreaker_used LIKE '%team name%'\n),\n\n-- Aggregate all assertion failures\nassertion_failures AS (\n    -- Test 1: No tied ranks\n    SELECT \n        'TIED_RANKS' as failure_type,\n        scenario_id,\n        conference,\n        CAST(rank AS VARCHAR) as detail,\n        'Teams tied at same rank: ' || tied_teams as description\n    FROM tie_validation\n    \n    UNION ALL\n    \n    -- Test 2: No gaps in ranking\n    SELECT \n        'RANK_GAPS' as failure_type,\n        scenario_id,\n        conference,\n        CAST(rank AS VARCHAR) as detail,\n        'Gap of ' || CAST(rank_gap AS VARCHAR) || ' between rank ' || CAST(prev_rank AS VARCHAR) || ' and ' || CAST(rank AS VARCHAR) as description\n    FROM rank_gaps \n    WHERE prev_rank IS NOT NULL AND rank_gap > 1\n    \n    UNION ALL\n    \n    -- Test 3: Proper seeding structure\n    SELECT \n        'SEEDING_STRUCTURE' as failure_type,\n        scenario_id,\n        conference,\n        'DivWin:' || CAST(division_winners AS VARCHAR) || ' WC:' || CAST(wildcards AS VARCHAR) as detail,\n        'Expected 4 division winners and 3 wildcards, got ' || CAST(division_winners AS VARCHAR) || ' division winners and ' || CAST(wildcards AS VARCHAR) || ' wildcards' as description\n    FROM seeding_validation\n    WHERE division_winners != 4 OR wildcards != 3\n    \n    UNION ALL\n    \n    -- Test 4: Total teams per conference\n    SELECT \n        'TEAM_COUNT' as failure_type,\n        scenario_id,\n        conference,\n        CAST(total_teams AS VARCHAR) as detail,\n        'Expected 16 teams per conference, got ' || CAST(total_teams AS VARCHAR) as description\n    FROM seeding_validation\n    WHERE total_teams != 16\n    \n    UNION ALL\n    \n    -- Test 5: Ranks start at 1\n    SELECT \n        'RANK_START' as failure_type,\n        t1.scenario_id,\n        t1.conference,\n        CAST(MIN(t1.rank) AS VARCHAR) as detail,\n        'Ranks should start at 1, but lowest rank is ' || CAST(MIN(t1.rank) AS VARCHAR) as description\n    FROM tiebreaker_results t1\n    GROUP BY t1.scenario_id, t1.conference\n    HAVING MIN(t1.rank) != 1\n    \n    UNION ALL\n    \n    -- Test 6: Division winners actually won their divisions\n    SELECT \n        'DIVISION_WINNER_INVALID' as failure_type,\n        scenario_id,\n        conference,\n        division_winner as detail,\n        division_winner || ' ranked as division winner but ' || CAST(teams_with_better_record AS VARCHAR) || ' team(s) in same division have better record' as description\n    FROM division_winner_validation\n    \n    UNION ALL\n    \n    -- Test 7: Head-to-head tiebreakers applied correctly\n    SELECT \n        'H2H_VIOLATION' as failure_type,\n        scenario_id,\n        conference,\n        team1 || ' vs ' || team2 as detail,\n        'Head-to-head tiebreaker violation: ' || team1 || ' (H2H: ' || CAST(team1_h2h_wins AS VARCHAR) || '-' || CAST(team2_h2h_wins AS VARCHAR) || ', Rank: ' || CAST(team1_rank AS VARCHAR) || ') vs ' || team2 || ' (Rank: ' || CAST(team2_rank AS VARCHAR) || ')' as description\n    FROM h2h_tiebreaker_violations\n    \n    UNION ALL\n    \n    -- Test 8: Wildcard seeding violations\n    SELECT \n        'WILDCARD_VIOLATION' as failure_type,\n        scenario_id,\n        conference,\n        wildcard_team as detail,\n        wildcard_team || ' is wildcard with ' || CAST(wildcard_wins AS VARCHAR) || ' wins, but ' || CAST(better_non_division_winners AS VARCHAR) || ' non-division winner(s) have better record' as description\n    FROM wildcard_seeding_violations\n    \n    UNION ALL\n    \n    -- Test 9: Tiebreaker consistency\n    SELECT \n        'TIEBREAKER_INCONSISTENCY' as failure_type,\n        scenario_id,\n        conference,\n        CAST(wins AS VARCHAR) || ' wins' as detail,\n        CAST(teams_with_same_record AS VARCHAR) || ' teams with same record used ' || CAST(different_tiebreakers_used AS VARCHAR) || ' different tiebreakers' as description\n    FROM tiebreaker_consistency\n    \n    UNION ALL\n    \n    -- Test 10: Premature coin toss usage\n    SELECT \n        'PREMATURE_COIN_TOSS' as failure_type,\n        scenario_id,\n        conference,\n        team as detail,\n        team || ' resolved by coin toss/team name - verify all other tiebreakers were properly exhausted' as description\n    FROM premature_coin_toss\n)\n\n-- Return all assertion failures (should be 0 rows if everything is correct)\nSELECT \n    failure_type,\n    scenario_id,\n    conference,\n    detail,\n    description\nFROM assertion_failures\nORDER BY failure_type, scenario_id, conference", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "model.sports_sims.nfl_reg_season_summary": {"database": "mdsbox", "schema": "main", "name": "nfl_reg_season_summary", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/analysis/nfl_reg_season_summary.sql", "original_file_path": "models/nfl/analysis/nfl_reg_season_summary.sql", "unique_id": "model.sports_sims.nfl_reg_season_summary", "fqn": ["sports_sims", "nfl", "analysis", "nfl_reg_season_summary"], "alias": "nfl_reg_season_summary", "checksum": {"name": "sha256", "checksum": "c1d37d604650633f201f5b57cbc8f452d8185e0d5d562572c60c1a5b2479eb26"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/analysis/nfl_reg_season_summary.sql", "unrendered_config": {"tags": "nfl", "materialized": "view"}, "created_at": 1756354116.807828, "relation_name": "\"mdsbox\".\"main\".\"nfl_reg_season_summary\"", "raw_code": "with\n    cte_summary as (\n        select\n            winning_team as team,\n            e.conf,\n            round(avg(wins), 1) as avg_wins,\n            v.win_total as vegas_wins,\n            round(avg(v.win_total) - avg(wins), 1) as elo_vs_vegas,\n            round(\n                percentile_cont(0.05) within group (order by wins asc), 1\n            ) as wins_5th,\n            round(\n                percentile_cont(0.95) within group (order by wins asc), 1\n            ) as wins_95th,\n            count(*) filter (\n                where made_playoffs = 1 and first_round_bye = 0\n            ) as made_postseason,\n            count(*) filter (where first_round_bye = 1) as first_round_bye,\n            round(\n                percentile_cont(0.05) within group (order by season_rank asc), 1\n            ) as seed_5th,\n            round(avg(season_rank), 1) as avg_seed,\n            round(\n                percentile_cont(0.95) within group (order by season_rank asc), 1\n            ) as seed_95th\n        from {{ ref(\"nfl_reg_season_end\") }} e\n        left join {{ ref(\"nfl_vegas_wins\") }} v on v.team = e.winning_team\n        group by all\n    )\n\nselect\n    c.team,\n    c.conf,\n    a.wins::int || ' - ' || a.losses::int as record,\n    c.avg_wins,\n    c.vegas_wins,\n    r.elo_rating,\n    c.elo_vs_vegas,\n    c.wins_5th::int || ' to ' || c.wins_95th::int as win_range,\n    c.seed_5th::int || ' to ' || c.seed_95th::int as seed_range,\n    c.made_postseason,\n    c.first_round_bye,\n    {{ var(\"sim_start_game_id\") }} as sim_start_game_id\nfrom cte_summary c\nleft join 'nfl_reg_season_actuals' a on a.team = c.team\nleft join {{ ref(\"nfl_ratings\") }} r on r.team = c.team", "language": "sql", "refs": [{"name": "nfl_reg_season_end", "package": null, "version": null}, {"name": "nfl_vegas_wins", "package": null, "version": null}, {"name": "nfl_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_reg_season_end", "model.sports_sims.nfl_vegas_wins", "model.sports_sims.nfl_ratings"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/analysis/nfl_reg_season_summary.sql", "compiled": true, "compiled_code": "with\n    cte_summary as (\n        select\n            winning_team as team,\n            e.conf,\n            round(avg(wins), 1) as avg_wins,\n            v.win_total as vegas_wins,\n            round(avg(v.win_total) - avg(wins), 1) as elo_vs_vegas,\n            round(\n                percentile_cont(0.05) within group (order by wins asc), 1\n            ) as wins_5th,\n            round(\n                percentile_cont(0.95) within group (order by wins asc), 1\n            ) as wins_95th,\n            count(*) filter (\n                where made_playoffs = 1 and first_round_bye = 0\n            ) as made_postseason,\n            count(*) filter (where first_round_bye = 1) as first_round_bye,\n            round(\n                percentile_cont(0.05) within group (order by season_rank asc), 1\n            ) as seed_5th,\n            round(avg(season_rank), 1) as avg_seed,\n            round(\n                percentile_cont(0.95) within group (order by season_rank asc), 1\n            ) as seed_95th\n        from \"mdsbox\".\"main\".\"nfl_reg_season_end\" e\n        left join \"mdsbox\".\"main\".\"nfl_vegas_wins\" v on v.team = e.winning_team\n        group by all\n    )\n\nselect\n    c.team,\n    c.conf,\n    a.wins::int || ' - ' || a.losses::int as record,\n    c.avg_wins,\n    c.vegas_wins,\n    r.elo_rating,\n    c.elo_vs_vegas,\n    c.wins_5th::int || ' to ' || c.wins_95th::int as win_range,\n    c.seed_5th::int || ' to ' || c.seed_95th::int as seed_range,\n    c.made_postseason,\n    c.first_round_bye,\n    0 as sim_start_game_id\nfrom cte_summary c\nleft join 'nfl_reg_season_actuals' a on a.team = c.team\nleft join \"mdsbox\".\"main\".\"nfl_ratings\" r on r.team = c.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sports_sims.nfl_reg_season_end": {"database": "mdsbox", "schema": "main", "name": "nfl_reg_season_end", "resource_type": "model", "package_name": "sports_sims", "path": "nfl/simulator/nfl_reg_season_end.sql", "original_file_path": "models/nfl/simulator/nfl_reg_season_end.sql", "unique_id": "model.sports_sims.nfl_reg_season_end", "fqn": ["sports_sims", "nfl", "simulator", "nfl_reg_season_end"], "alias": "nfl_reg_season_end", "checksum": {"name": "sha256", "checksum": "1c28afb39df76986956d3de450b978c8180c9ada4a61cd2ed682fcd93613cccd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nfl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["nfl"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/sports_sims/models/nfl/simulator/nfl_reg_season_end.sql", "unrendered_config": {"tags": "nfl", "materialized": "table"}, "created_at": 1756354116.820723, "relation_name": "\"mdsbox\".\"main\".\"nfl_reg_season_end\"", "raw_code": "with\n    cte_wins as (\n        select\n            s.scenario_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team then s.home_conf else s.visiting_conf\n            end as conf,\n            /*  CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n            count(*) as wins\n        from {{ ref(\"nfl_reg_season_simulator\") }} s\n        group by all\n    ),\n\n    cte_ranked_wins as (\n        select\n            scenario_id,\n            team as winning_team,\n            conference as conf,\n            wins,\n            rank as season_rank,\n            tiebreaker_used\n        from {{ ref(\"nfl_tiebreakers_optimized\") }}\n    ),\n\n    cte_made_playoffs as (\n        select\n            *,\n            case when season_rank = 1 then 1 else 0 end as first_round_bye,\n            case when season_rank between 1 and 7 then 1 else 0 end as made_playoffs,\n            conf || '-' || season_rank::text as seed\n        from cte_ranked_wins\n    )\n\nselect mp.*, le.elo_rating, {{ var(\"sim_start_game_id\") }} as sim_start_game_id\nfrom cte_made_playoffs mp\nleft join {{ ref(\"nfl_latest_elo\") }} le on le.team = mp.winning_team", "language": "sql", "refs": [{"name": "nfl_reg_season_simulator", "package": null, "version": null}, {"name": "nfl_tiebreakers_optimized", "package": null, "version": null}, {"name": "nfl_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nfl_reg_season_simulator", "model.sports_sims.nfl_tiebreakers_optimized", "model.sports_sims.nfl_latest_elo"]}, "compiled_path": "../docs/compiled/sports_sims/models/nfl/simulator/nfl_reg_season_end.sql", "compiled": true, "compiled_code": "with\n    cte_wins as (\n        select\n            s.scenario_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team then s.home_conf else s.visiting_conf\n            end as conf,\n            /*  CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n            count(*) as wins\n        from \"mdsbox\".\"main\".\"nfl_reg_season_simulator\" s\n        group by all\n    ),\n\n    cte_ranked_wins as (\n        select\n            scenario_id,\n            team as winning_team,\n            conference as conf,\n            wins,\n            rank as season_rank,\n            tiebreaker_used\n        from \"mdsbox\".\"main\".\"nfl_tiebreakers_optimized\"\n    ),\n\n    cte_made_playoffs as (\n        select\n            *,\n            case when season_rank = 1 then 1 else 0 end as first_round_bye,\n            case when season_rank between 1 and 7 then 1 else 0 end as made_playoffs,\n            conf || '-' || season_rank::text as seed\n        from cte_ranked_wins\n    )\n\nselect mp.*, le.elo_rating, 0 as sim_start_game_id\nfrom cte_made_playoffs mp\nleft join \"mdsbox\".\"main\".\"nfl_latest_elo\" le on le.team = mp.winning_team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}}, "sources": {"source.sports_sims.nba.nba_schedule": {"database": "mdsbox", "schema": "psa", "name": "nba_schedule", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.nba_schedule", "fqn": ["sports_sims", "nba", "nba_schedule"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_schedule", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "this is the nba schedule", "columns": {}, "meta": {"external_location": "../data/nba/{identifier}.csv"}, "source_meta": {"external_location": "../data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nba/nba_schedule.csv'", "created_at": 1756344405.2439811, "unrendered_database": null, "unrendered_schema": "psa"}, "source.sports_sims.nba.nba_team_ratings": {"database": "mdsbox", "schema": "psa", "name": "nba_team_ratings", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.nba_team_ratings", "fqn": ["sports_sims", "nba", "nba_team_ratings"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_team_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "team ELO ratings & win totals", "columns": {}, "meta": {"external_location": "../data/nba/{identifier}.csv"}, "source_meta": {"external_location": "../data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nba/nba_team_ratings.csv'", "created_at": 1756344405.244406, "unrendered_database": null, "unrendered_schema": "psa"}, "source.sports_sims.nba.xf_series_to_seed": {"database": "mdsbox", "schema": "psa", "name": "xf_series_to_seed", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.xf_series_to_seed", "fqn": ["sports_sims", "nba", "xf_series_to_seed"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "xf_series_to_seed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "cross ref table to match series to seeds", "columns": {}, "meta": {"external_location": "../data/nba/{identifier}.csv"}, "source_meta": {"external_location": "../data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nba/xf_series_to_seed.csv'", "created_at": 1756344405.2444701, "unrendered_database": null, "unrendered_schema": "psa"}, "source.sports_sims.nba.nba_results": {"database": "mdsbox", "schema": "psa", "name": "nba_results", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.nba_results", "fqn": ["sports_sims", "nba", "nba_results"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_results", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nba results for the current season", "columns": {}, "meta": {"external_location": "../data/nba/{identifier}.csv"}, "source_meta": {"external_location": "../data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nba/nba_results.csv'", "created_at": 1756344405.244523, "unrendered_database": null, "unrendered_schema": "psa"}, "source.sports_sims.nba.nba_elo": {"database": "mdsbox", "schema": "psa", "name": "nba_elo", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.nba_elo", "fqn": ["sports_sims", "nba", "nba_elo"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_elo", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "complete ELO ratings for all teams", "columns": {}, "meta": {"external_location": "../data/nba/{identifier}.csv"}, "source_meta": {"external_location": "../data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nba/nba_elo.csv'", "created_at": 1756344405.2445781, "unrendered_database": null, "unrendered_schema": "psa"}, "source.sports_sims.nfl.nfl_schedule": {"database": "mdsbox", "schema": "psa", "name": "nfl_schedule", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nfl.nfl_schedule", "fqn": ["sports_sims", "nfl", "nfl_schedule"], "source_name": "nfl", "source_description": "", "loader": "", "identifier": "nfl_schedule", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nfl schedule", "columns": {}, "meta": {"external_location": "../data/nfl/{identifier}.csv"}, "source_meta": {"external_location": "../data/nfl/{identifier}.csv"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nfl/nfl_schedule.csv'", "created_at": 1756344405.2446258, "unrendered_database": null, "unrendered_schema": "psa"}, "source.sports_sims.nfl.nfl_team_ratings": {"database": "mdsbox", "schema": "psa", "name": "nfl_team_ratings", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nfl.nfl_team_ratings", "fqn": ["sports_sims", "nfl", "nfl_team_ratings"], "source_name": "nfl", "source_description": "", "loader": "", "identifier": "nfl_team_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nfl team ratings from vegas", "columns": {}, "meta": {"external_location": "../data/nfl/{identifier}.csv"}, "source_meta": {"external_location": "../data/nfl/{identifier}.csv"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nfl/nfl_team_ratings.csv'", "created_at": 1756344405.244677, "unrendered_database": null, "unrendered_schema": "psa"}, "source.sports_sims.nfl.nfl_results": {"database": "mdsbox", "schema": "psa", "name": "nfl_results", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nfl.nfl_results", "fqn": ["sports_sims", "nfl", "nfl_results"], "source_name": "nfl", "source_description": "", "loader": "", "identifier": "nfl_results", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nfl results for the current season", "columns": {}, "meta": {"external_location": "../data/nfl/{identifier}.csv"}, "source_meta": {"external_location": "../data/nfl/{identifier}.csv"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/nfl/nfl_results.csv'", "created_at": 1756344405.244734, "unrendered_database": null, "unrendered_schema": "psa"}, "source.sports_sims.ncaaf.ncaaf_schedule": {"database": "mdsbox", "schema": "psa", "name": "ncaaf_schedule", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.ncaaf.ncaaf_schedule", "fqn": ["sports_sims", "ncaaf", "ncaaf_schedule"], "source_name": "ncaaf", "source_description": "", "loader": "", "identifier": "ncaaf_schedule", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ncaa football schedule", "columns": {}, "meta": {"external_location": "../data/ncaaf/{identifier}.csv"}, "source_meta": {"external_location": "../data/ncaaf/{identifier}.csv"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/ncaaf/ncaaf_schedule.csv'", "created_at": 1756344405.244787, "unrendered_database": null, "unrendered_schema": "psa"}, "source.sports_sims.ncaaf.ncaaf_team_ratings": {"database": "mdsbox", "schema": "psa", "name": "ncaaf_team_ratings", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.ncaaf.ncaaf_team_ratings", "fqn": ["sports_sims", "ncaaf", "ncaaf_team_ratings"], "source_name": "ncaaf", "source_description": "", "loader": "", "identifier": "ncaaf_team_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ncaa football team ratings from vegas", "columns": {}, "meta": {"external_location": "../data/ncaaf/{identifier}.csv"}, "source_meta": {"external_location": "../data/ncaaf/{identifier}.csv"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/ncaaf/ncaaf_team_ratings.csv'", "created_at": 1756344405.244838, "unrendered_database": null, "unrendered_schema": "psa"}, "source.sports_sims.ncaaf.ncaaf_results": {"database": "mdsbox", "schema": "psa", "name": "ncaaf_results", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.ncaaf.ncaaf_results", "fqn": ["sports_sims", "ncaaf", "ncaaf_results"], "source_name": "ncaaf", "source_description": "", "loader": "", "identifier": "ncaaf_results", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ncaa results for current season", "columns": {}, "meta": {"external_location": "../data/ncaaf/{identifier}.csv"}, "source_meta": {"external_location": "../data/ncaaf/{identifier}.csv"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../data/ncaaf/ncaaf_results.csv'", "created_at": 1756344405.244883, "unrendered_database": null, "unrendered_schema": "psa"}, "source.sports_sims.nba_dlt.games": {"database": "mdsbox", "schema": "nba_data", "name": "games", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba_dlt.games", "fqn": ["sports_sims", "nba_dlt", "games"], "source_name": "nba_dlt", "source_description": "", "loader": "", "identifier": "games", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nba games as sourced from pbpstats.com", "columns": {}, "meta": {"external_location": "../dlt/data/nba/nba_data/games/*.csv"}, "source_meta": {"external_location": "../dlt/data/nba/nba_data/games/*.csv"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "'../dlt/data/nba/nba_data/games/*.csv'", "created_at": 1756344405.2449322, "unrendered_database": null, "unrendered_schema": "nba_data"}}, "macros": {"macro.sports_sims.elo_calc": {"name": "elo_calc", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.elo_calc", "macro_sql": "{%- macro elo_calc(home_team, visiting_team, home_adv) -%}\n\n   ( 1 - (1 / (10 ^ (-( {{visiting_team}} - {{home_team}} - {{home_adv}})::real/400)+1))) * 10000\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5450509, "supported_languages": null}, "macro.sports_sims.elo_diff": {"name": "elo_diff", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.elo_diff", "macro_sql": "{%- macro elo_diff(home_team, visiting_team, result, home_adv)  -%}\n\n   25.0 * (( {{result}} ) - (1 / (10 ^ ( - ({{visiting_team}} - {{home_team}} - {{home_adv}})::real / 400) + 1)))\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5452092, "supported_languages": null}, "macro.sports_sims.playoff_sim": {"name": "playoff_sim", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.playoff_sim", "macro_sql": "{% macro playoff_sim(round,seed_file) %}\n-- depends-on: {{ ref( 'nba_random_num_gen' ) }}\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating',var('nba_elo_offset') ) }} as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating', var('nba_elo_offset') ) }} >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM {{ ref( 'nba_schedules' ) }} S\n        LEFT JOIN {{ ref( 'nba_random_num_gen' ) }} R ON R.game_id = S.game_id\n        LEFT JOIN  {{ ref( seed_file ) }} EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  {{ ref( seed_file ) }} EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  '{{ round }}'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.sports_sims.elo_calc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5455968, "supported_languages": null}, "macro.sports_sims.playoff_sim_end": {"name": "playoff_sim_end", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.playoff_sim_end", "macro_sql": "{%- macro playoff_sim_end(precedent) -%}\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM {{ precedent }} E\nLEFT JOIN {{ ref( 'nba_xf_series_to_seed' ) }} XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.545747, "supported_languages": null}, "macro.sports_sims.american_odds": {"name": "american_odds", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.american_odds", "macro_sql": "{%- macro american_odds(value) -%}\n\n    CASE WHEN {{ value }} >= 0.5 \n        THEN '-' || ROUND( {{ value }} / ( 1.0 - {{ value }} ) * 100 )::int\n        ELSE '+' || ((( 1.0 - {{ value }} ) / ({{ value }}::real ) * 100)::int)\n    END \n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.545869, "supported_languages": null}, "macro.sports_sims.test_empty_table": {"name": "test_empty_table", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.sports_sims.test_empty_table", "macro_sql": "{% test empty_table(model) %}\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM {{ model }}\n    HAVING COUNT(*) = 0\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.545967, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5462651, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.546345, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.547297, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.547668, "supported_languages": null}, "macro.dbt_duckdb.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.547893, "supported_languages": null}, "macro.dbt_duckdb.duckdb__post_snapshot": {"name": "duckdb__post_snapshot", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot", "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.547979, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    with relations AS (\n      select\n        t.table_name\n        , t.database_name\n        , t.schema_name\n        , 'BASE TABLE' as table_type\n        , {{ adapter.catalog_comment('t') }} as table_comment\n      from duckdb_tables() t\n      WHERE t.database_name = '{{ database }}'\n      UNION ALL\n      SELECT v.view_name as table_name\n      , v.database_name\n      , v.schema_name\n      , 'VIEW' as table_type\n      , {{ adapter.catalog_comment('v') }} as table_comment\n      from duckdb_views() v\n      WHERE v.database_name = '{{ database }}'\n    )\n    select\n        '{{ database }}' as table_database,\n        r.schema_name as table_schema,\n        r.table_name,\n        r.table_type,\n        r.table_comment,\n        c.column_name,\n        c.column_index as column_index,\n        c.data_type as column_type,\n        {{ adapter.catalog_comment('c') }} as column_comment,\n        '' as table_owner\n    FROM relations r JOIN duckdb_columns() c ON r.schema_name = c.schema_name AND r.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(r.schema_name) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    ORDER BY\n        r.schema_name,\n        r.table_name,\n        c.column_index\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5484438, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    {% set sql %}\n        select type from duckdb_databases()\n        where lower(database_name)='{{ relation.database | lower }}'\n        and type='sqlite'\n    {% endset %}\n    {% set results = run_query(sql) %}\n    {% if results|length == 0 %}\n        create schema if not exists {{ relation.without_identifier() }}\n    {% else %}\n        {% if relation.schema!='main' %}\n            {{ exceptions.raise_compiler_error(\n                \"Schema must be 'main' when writing to sqlite \"\n                ~ \"instead got \" ~ relation.schema\n            )}}\n        {% endif %}\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.549533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5496361, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where lower(catalog_name) = '{{ database | lower }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.54979, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where lower(schema_name) = '{{ schema | lower }}'\n        and lower(catalog_name) = '{{ information_schema.database | lower }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.549935, "supported_languages": null}, "macro.dbt_duckdb.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.550122, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_duckdb.get_column_names", "macro.dbt.get_select_subquery", "macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.550671, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    tmp_name = '__dbt_python_model_df_' + '{{ relation.identifier }}'\n    con.register(tmp_name, df)\n    con.execute('create table {{ relation }} as select * from ' + tmp_name)\n    con.unregister(tmp_name)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.55081, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.551033, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and lower(table_schema) = '{{ relation.schema | lower }}'\n      {% endif %}\n      {% if relation.database %}\n      and lower(table_catalog) = '{{ relation.database | lower }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.551306, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where lower(table_schema) = '{{ schema_relation.schema | lower }}'\n    and lower(table_catalog) = '{{ schema_relation.database | lower }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5515058, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.55162, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.551786, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5520341, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.552083, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.55218, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.552237, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.552315, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.552396, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.552511, "supported_languages": null}, "macro.dbt_duckdb.store_relation": {"name": "store_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.store_relation", "macro_sql": "{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.552667, "supported_languages": null}, "macro.dbt_duckdb.render_write_options": {"name": "render_write_options", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.render_write_options", "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.553151, "supported_languages": null}, "macro.dbt_duckdb.duckdb__apply_grants": {"name": "duckdb__apply_grants", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__apply_grants", "macro_sql": "{% macro duckdb__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n      {{ adapter.warn_once('Grants for relations are not supported by DuckDB') }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.553272, "supported_languages": null}, "macro.dbt_duckdb.duckdb_escape_comment": {"name": "duckdb_escape_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb_escape_comment", "macro_sql": "{% macro duckdb_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.553646, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_comment": {"name": "duckdb__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_comment", "macro_sql": "{% macro duckdb__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = duckdb_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.553771, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_column_comment": {"name": "duckdb__alter_column_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_column_comment", "macro_sql": "{% macro duckdb__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = duckdb_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.554112, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {"name": "duckdb__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/incremental_helper.sql", "original_file_path": "macros/incremental_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql", "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.554774, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {"name": "duckdb__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/columns.sql", "original_file_path": "macros/columns.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns", "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.555199, "supported_languages": null}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.556292, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/external.sql", "original_file_path": "macros/materializations/external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n\n  {%- set format = config.get('format') -%}\n  {%- set allowed_formats = ['csv', 'parquet', 'json'] -%}\n  {%- if format -%}\n      {%- if format not in allowed_formats -%}\n          {{ exceptions.raise_compiler_error(\"Invalid format: \" ~ format ~ \". Allowed formats are: \" ~ allowed_formats | join(', ')) }}\n      {%- endif -%}\n  {%- else -%}\n    {%- set format = location.split('.')[-1].lower() if '.' in location else 'parquet' -%}\n    {%- set format = format if format in allowed_formats else 'parquet' -%}\n  {%- endif -%}\n\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n  {%- set parquet_read_options = config.get('parquet_read_options', {'union_by_name': False}) -%}\n  {%- set json_read_options = config.get('json_read_options', {'auto_detect': True}) -%}\n  {%- set csv_read_options = config.get('csv_read_options', {'auto_detect': True}) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- check if relation is empty\n  {%- set count_query -%}\n    select count(*) as row_count from {{ temp_relation }}\n  {%- endset -%}\n  {%- set row_count = run_query(count_query) -%}\n\n  -- if relation is empty, write a non-empty table with column names and null values\n  {% call statement('main', language='sql') -%}\n    {% if row_count[0][0] == 0 %}\n    insert into {{ temp_relation }} values (\n      {%- for col in get_columns_in_relation(temp_relation) -%}\n      NULL,\n      {%- endfor -%}\n    )\n    {% endif %}\n  {%- endcall %}\n\n  -- write a temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n\n-- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    {% if format == 'json' %}\n      create or replace view {{ intermediate_relation }} as (\n        select * from read_json('{{ read_location }}'\n        {%- for key, value in json_read_options.items() -%}\n          , {{ key }}=\n          {%- if value is string -%}\n            '{{ value }}'\n          {%- else -%}\n            {{ value }}\n          {%- endif -%}\n        {%- endfor -%}\n        )\n        -- if relation is empty, filter by all columns having null values\n        {% if row_count[0][0] == 0 %}\n          where 1\n          {%- for col in get_columns_in_relation(temp_relation) -%}\n            {{ print(' ') }} AND {{ col.column }} is not NULL\n          {%- endfor -%}\n        {% endif %}\n      );\n    {% elif format == 'parquet' %}\n      create or replace view {{ intermediate_relation }} as (\n        select * from read_parquet('{{ read_location }}'\n        {%- for key, value in parquet_read_options.items() -%}\n          , {{ key }}=\n          {%- if value is string -%}\n            '{{ value }}'\n          {%- else -%}\n            {{ value }}\n          {%- endif -%}\n        {%- endfor -%}\n        )\n        -- if relation is empty, filter by all columns having null values\n        {% if row_count[0][0] == 0 %}\n          where 1\n          {%- for col in get_columns_in_relation(temp_relation) -%}\n            {{ print(' ') }} AND {{ col.column }} is not NULL\n          {%- endfor -%}\n        {% endif %}\n      );\n    {% elif format == 'csv' %}\n    create or replace view {{ intermediate_relation }} as (\n      select * from read_csv('{{ read_location }}'\n      {%- for key, value in csv_read_options.items() -%}\n        , {{ key }}=\n        {%- if value is string -%}\n          '{{ value }}'\n        {%- else -%}\n          {{ value }}\n        {%- endif -%}\n      {%- endfor -%}\n      )\n      -- if relation is empty, filter by all columns having null values\n      {% if row_count[0][0] == 0 %}\n        where 1\n        {%- for col in get_columns_in_relation(temp_relation) -%}\n          {{ print(' ') }} AND {{ col.column }} is not NULL\n        {%- endfor -%}\n      {% endif %}\n    );\n    {% endif %}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {%- set partition_columns = config.get('partition_columns', []) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.get_columns_in_relation", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.store_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.560064, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n  -- only create temp tables if using local duckdb, as it is not currently supported for remote databases\n  {%- set temporary = not adapter.is_motherduck() -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if not temporary %}\n      -- if not using a temporary table we will update the temp relation to use a different temp schema (\"dbt_temp\" by default)\n      {% set temp_relation = temp_relation.incorporate(path=adapter.get_temp_relation_path(this)) %}\n      {% do run_query(create_schema(temp_relation)) %}\n      -- then drop the temp relation after we insert the incremental data into the target relation\n      {% do to_drop.append(temp_relation) %}\n    {% endif %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(temporary, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.create_schema", "macro.dbt.statement", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.562616, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    date_add({{ from_date_or_timestamp }}, interval ({{ interval }}) {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.562758, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5630379, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n    {% if datepart == 'week' %}\n            ({{ datediff(first_date, second_date, 'day') }} // 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% else %}\n        (date_diff('{{ datepart }}', {{ first_date }}::timestamp, {{ second_date}}::timestamp ))\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.563327, "supported_languages": null}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5634098, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/upstream.sql", "original_file_path": "macros/utils/upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% if node not in graph['nodes'] %}{% continue %}{% endif %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.564518, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/splitpart.sql", "original_file_path": "macros/utils/splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.564647, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/lastday.sql", "original_file_path": "macros/utils/lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.564909, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/external_location.sql", "original_file_path": "macros/utils/external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.565202, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.565661, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.565772, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5658538, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.565941, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.566018, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.566185, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.566348, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5665228, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.566753, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n       and (DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or\n            DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null)\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5671198, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.568219, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.568311, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5684302, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.569006, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.569105, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.569212, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.569956, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.570694, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.571754, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.57191, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.572002, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.572051, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.572135, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.572196, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.572302, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5724318, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n               {# Check for either dbt_valid_to_current OR null, in order to correctly update records with nulls #}\n               ( {{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or {{ columns.dbt_valid_to }} is null)\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.unique_key_fields", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.574152, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5742662, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5745301, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5747688, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.575092, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.575325, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5754712, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5756512, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ identifier }}.dbt_unique_key_{{ loop.index }} = {{ from_identifier }}.dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.575874, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.575989, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.576098, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5781848, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5793102, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.579616, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.579775, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.57989, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.580208, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.580396, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.580609, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.581394, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.58222, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.582463, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.582602, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.583342, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.583474, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5838232, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.584952, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5860732, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.58652, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.586805, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.587146, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.587274, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.587672, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.588317, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.589132, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5892742, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.589792, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.589932, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.590274, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5905988, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.590952, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.591079, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.591182, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5913432, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.591444, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5915961, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.591692, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.591827, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.591924, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.592003, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5921621, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5922508, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5923982, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5944908, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.595148, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5957792, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5963972, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.596859, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.5969942, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.597059, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.597219, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.597311, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.598594, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.59994, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.600461, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6009102, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6010392, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.60129, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.601391, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.601463, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.60154, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.601608, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.601696, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.601761, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.602022, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6021812, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.602802, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6030312, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6032388, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.603489, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.603629, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6037838, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6039848, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6041348, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.604377, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.604578, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6046772, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.604782, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.604886, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.605197, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6058009, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.605984, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.606123, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.606266, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.606381, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.60656, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.606669, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.606941, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.607177, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.60729, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.60745, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6076212, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.607828, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.608031, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6082602, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.608428, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6085389, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6086771, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.608747, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.608895, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.608976, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.609136, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6092129, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.609358, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.609441, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6097379, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.609843, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.609993, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6100721, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.61022, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6102989, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6107059, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.610772, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.611049, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6111412, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6112158, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.612085, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.612291, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.612496, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6126442, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6127129, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.61286, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.61294, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.613083, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.613166, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.613497, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.613594, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.613825, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.614181, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.614423, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.614538, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6146328, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.61477, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.614843, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.615127, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.615208, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6157792, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.615882, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.616008, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6161542, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6162329, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6164322, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.616517, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.616616, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6169128, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.61708, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.617238, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6173608, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6176372, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.618336, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.618637, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.618794, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.619189, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.619786, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.620172, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6202939, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.620419, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.620467, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.620762, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6210701, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6211982, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6213918, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.621564, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.621716, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6218822, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.621971, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6221042, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.622174, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6224089, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6227012, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6227992, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.623073, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6232178, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.623286, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.623455, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.623544, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6236632, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.623708, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.623866, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.623942, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6240928, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.624167, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.624405, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.624614, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.624785, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.624873, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6250272, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.625102, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6252391, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6253262, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.625458, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6255429, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.625692, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.625762, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6258922, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6259499, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6261, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.62624, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6263711, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.626427, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.626849, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.62693, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.627018, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6270971, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6271832, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.627265, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6273532, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6274471, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.627532, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6276128, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.627697, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.627773, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.627858, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.627933, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.628077, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.628148, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6282802, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.628342, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.628526, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.62867, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.62875, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.628948, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.629051, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.629178, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6293828, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.629455, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6296551, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6297832, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.629938, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6300092, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6301792, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6302779, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6303658, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.630464, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.630732, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.630815, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.630891, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.630948, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.631165, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.631254, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6313002, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.631387, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.631475, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.631736, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.631812, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.631897, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.632106, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.632204, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6322792, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.632363, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6324322, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.632846, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6329348, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.633047, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.633198, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.633336, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6335092, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.633604, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.633704, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6338382, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.63413, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6342568, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6343338, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.634527, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.634735, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.634888, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.635011, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.635627, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6356962, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.635781, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.635844, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.636024, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.636124, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.636189, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.636308, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.636417, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.636538, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.63671, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6368299, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.637181, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6372821, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6374311, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.637554, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.638138, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.63835, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.63845, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ compiled_code }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.638571, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.638804, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.63891, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.639033, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.639125, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.639271, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6395159, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.63996, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.640096, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6402051, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.640346, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6404421, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.640528, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.640621, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.640747, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.640857, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.641075, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.641176, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.641261, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.641355, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.641443, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.641531, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.641611, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.641717, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.641809, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.642422, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.642508, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6426759, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6427891, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.642899, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.642994, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.643587, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.643772, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.64388, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.644062, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.644184, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6445382, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.644692, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6451032, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.646452, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6467478, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6473541, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.64747, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.647524, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.647903, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.647986, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.648407, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.648625, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.648926, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.649181, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.649225, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.649477, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.649615, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6497831, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.649948, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6501179, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.650429, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6506162, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.650948, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.651113, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6512809, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.651597, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.652131, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.652451, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.653007, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6532679, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.65345, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.653733, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6542568, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.65448, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.65473, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6549911, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.655274, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.655492, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6556969, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.655949, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.656356, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.65659, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.656925, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.65714, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.657324, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6575239, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.657708, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6579452, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6583538, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6586492, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.659103, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6593962, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.659869, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6600718, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.660235, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6606982, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6615622, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6617112, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6618009, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.66206, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.662213, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6623309, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.662465, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.662556, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6628952, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.663311, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.663577, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.663884, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.664008, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6641989, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.664377, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.664661, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.664819, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.664997, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.665248, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.665687, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.66595, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.666175, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.666275, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6665652, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.666819, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.667316, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.667522, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.667674, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.668053, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.668774, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6691809, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.67, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.670159, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.670235, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.670837, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.672805, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.67297, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6731079, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.673432, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.673553, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6736588, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6737611, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.673855, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.673949, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.674143, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.674279, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6744561, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.674746, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.674916, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.675092, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.675452, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6756532, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.676053, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.676321, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6767318, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.677568, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.678019, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.678454, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6786811, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.679081, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.679341, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.679583, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.679682, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.679872, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.680183, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.680385, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6807182, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.680903, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.680985, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.6810722, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.681159, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.681439, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.681856, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.682104, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.682256, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.682579, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756344404.682986, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.sports_sims.nba_xf_series_to_seed": ["model.sports_sims.nba_raw_xf_series_to_seed"], "model.sports_sims.nba_reg_season_schedule": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_ratings", "model.sports_sims.nba_raw_schedule"], "model.sports_sims.nba_results_by_team": ["model.sports_sims.nba_results_log"], "model.sports_sims.nba_schedules": ["model.sports_sims.nba_post_season_schedule", "model.sports_sims.nba_reg_season_schedule"], "model.sports_sims.nba_seasons": ["model.sports_sims.nba_elo_history"], "model.sports_sims.nba_post_season_schedule": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_ratings", "model.sports_sims.nba_raw_schedule"], "model.sports_sims.nba_latest_results": ["model.sports_sims.nba_raw_results", "model.sports_sims.nba_raw_schedule", "model.sports_sims.nba_teams"], "model.sports_sims.nba_latest_elo": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_raw_team_ratings"], "model.sports_sims.nba_ratings": ["model.sports_sims.nba_latest_elo", "model.sports_sims.nba_raw_team_ratings"], "model.sports_sims.nba_random_num_gen": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_schedules"], "model.sports_sims.nba_results_log": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_latest_elo", "model.sports_sims.nba_latest_results", "model.sports_sims.nba_schedules", "model.sports_sims.nba_teams"], "model.sports_sims.nba_reg_season_actuals": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_teams"], "model.sports_sims.nba_elo_history": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_results_log", "source.sports_sims.nba.nba_elo"], "model.sports_sims.nba_season_teams": ["model.sports_sims.nba_elo_history"], "model.sports_sims.nba_teams": ["model.sports_sims.nba_raw_team_ratings"], "model.sports_sims.nba_vegas_wins": ["model.sports_sims.nba_ratings"], "model.sports_sims.reg_season_actuals_enriched": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_results_log", "model.sports_sims.nba_teams"], "model.sports_sims.reg_season_end": ["model.sports_sims.nba_latest_elo", "model.sports_sims.nba_tiebreakers_optimized", "model.sports_sims.reg_season_simulator"], "model.sports_sims.nba_team_stats": ["model.sports_sims.nba_elo_history", "model.sports_sims.nba_season_teams"], "model.sports_sims.playoff_summary": ["model.sports_sims.initialize_seeding", "model.sports_sims.nba_teams", "model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4"], "model.sports_sims.season_summary": ["model.sports_sims.nba_ratings", "model.sports_sims.playoff_summary", "model.sports_sims.reg_season_summary"], "model.sports_sims.team_matchups": ["model.sports_sims.nba_ratings"], "model.sports_sims.tournament_end": ["model.sports_sims.nba_latest_elo", "model.sports_sims.nba_teams", "model.sports_sims.reg_season_predictions", "model.sports_sims.reg_season_simulator"], "model.sports_sims.reg_season_summary": ["model.sports_sims.nba_reg_season_actuals", "model.sports_sims.nba_vegas_wins", "model.sports_sims.reg_season_end"], "model.sports_sims.reg_season_predictions": ["model.sports_sims.nba_results_by_team", "model.sports_sims.nba_teams", "model.sports_sims.reg_season_simulator"], "model.sports_sims.playin_sim_r1": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.reg_season_end"], "model.sports_sims.playin_sim_r2": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.playin_sim_r1_end"], "model.sports_sims.playin_sim_r2_end": ["model.sports_sims.playin_sim_r1_end", "model.sports_sims.playin_sim_r2"], "model.sports_sims.playin_sim_r1_end": ["model.sports_sims.playin_sim_r1"], "model.sports_sims.reg_season_simulator": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules"], "model.sports_sims.playoff_sim_r4": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.nba_xf_series_to_seed", "model.sports_sims.playoff_sim_r3"], "model.sports_sims.playoff_sim_r2": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.nba_xf_series_to_seed", "model.sports_sims.playoff_sim_r1"], "model.sports_sims.playoff_sim_r3": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.nba_xf_series_to_seed", "model.sports_sims.playoff_sim_r2"], "model.sports_sims.playoff_sim_r1": ["model.sports_sims.initialize_seeding", "model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.nba_xf_series_to_seed"], "model.sports_sims.initialize_seeding": ["model.sports_sims.playin_sim_r2_end", "model.sports_sims.reg_season_end"], "model.sports_sims.nba_raw_results": ["model.sports_sims.nba_raw_team_ratings", "source.sports_sims.nba.nba_results", "source.sports_sims.nba_dlt.games"], "model.sports_sims.nba_raw_schedule": ["source.sports_sims.nba.nba_schedule"], "model.sports_sims.nba_raw_team_ratings": ["source.sports_sims.nba.nba_team_ratings"], "model.sports_sims.nba_raw_xf_series_to_seed": ["source.sports_sims.nba.xf_series_to_seed"], "model.sports_sims.nfl_schedules": ["model.sports_sims.nba_post_season_schedule", "model.sports_sims.nfl_elo_rollforward", "model.sports_sims.nfl_ratings", "model.sports_sims.nfl_raw_schedule"], "model.sports_sims.nfl_vegas_wins": ["model.sports_sims.nfl_ratings"], "model.sports_sims.nfl_ratings": ["model.sports_sims.nfl_latest_elo", "model.sports_sims.nfl_raw_team_ratings"], "model.sports_sims.nfl_random_num_gen": ["model.sports_sims.nfl_latest_results", "model.sports_sims.nfl_schedules"], "model.sports_sims.nfl_latest_results": ["model.sports_sims.nfl_raw_results", "model.sports_sims.nfl_raw_schedule"], "model.sports_sims.nfl_teams": ["model.sports_sims.nfl_ratings", "model.sports_sims.nfl_raw_schedule"], "model.sports_sims.nfl_reg_season_actuals": ["model.sports_sims.nfl_latest_results", "model.sports_sims.nfl_teams"], "model.sports_sims.nfl_latest_elo": ["model.sports_sims.nfl_elo_rollforward", "model.sports_sims.nfl_raw_team_ratings"], "model.sports_sims.nfl_reg_season_predictions": ["model.sports_sims.nfl_ratings", "model.sports_sims.nfl_reg_season_simulator"], "model.sports_sims.nfl_reg_season_simulator": ["model.sports_sims.nfl_latest_results", "model.sports_sims.nfl_random_num_gen", "model.sports_sims.nfl_schedules"], "model.sports_sims.nfl_raw_schedule": ["source.sports_sims.nfl.nfl_schedule"], "model.sports_sims.nfl_raw_team_ratings": ["source.sports_sims.nfl.nfl_team_ratings"], "model.sports_sims.nfl_raw_results": ["source.sports_sims.nfl.nfl_results"], "model.sports_sims.nba_elo_rollforward": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_raw_team_ratings"], "model.sports_sims.nba_tiebreakers_optimized": ["model.sports_sims.nba_raw_results", "model.sports_sims.nba_teams", "model.sports_sims.reg_season_simulator"], "model.sports_sims.nfl_elo_rollforward": ["model.sports_sims.nfl_latest_results", "model.sports_sims.nfl_raw_team_ratings"], "operation.sports_sims.sports_sims-on-run-start-0": [], "test.sports_sims.empty_table_nfl_raw_results_.4695a4b621": ["model.sports_sims.nfl_raw_results"], "test.sports_sims.empty_table_nfl_raw_schedule_.38577f458a": ["model.sports_sims.nfl_raw_schedule"], "test.sports_sims.empty_table_nfl_raw_team_ratings_.fd40ff9f75": ["model.sports_sims.nfl_raw_team_ratings"], "test.sports_sims.unique_nfl_schedules_game_id.38f1c777a5": ["model.sports_sims.nfl_schedules"], "test.sports_sims.not_null_nfl_schedules_game_id.3961bd8fd2": ["model.sports_sims.nfl_schedules"], "test.sports_sims.accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.3ce8130eae": ["model.sports_sims.nfl_schedules"], "test.sports_sims.not_null_nfl_schedules_visiting_team.fa5caebf37": ["model.sports_sims.nfl_schedules"], "test.sports_sims.not_null_nfl_schedules_home_team.4f29463b21": ["model.sports_sims.nfl_schedules"], "test.sports_sims.not_null_nfl_ratings_team.b2ede8bbf2": ["model.sports_sims.nfl_ratings"], "test.sports_sims.unique_nfl_ratings_team.8d6615a017": ["model.sports_sims.nfl_ratings"], "test.sports_sims.not_null_nfl_ratings_conf.c095117e8b": ["model.sports_sims.nfl_ratings"], "test.sports_sims.accepted_values_nfl_ratings_conf__AFC__NFC.a37211d1be": ["model.sports_sims.nfl_ratings"], "test.sports_sims.not_null_nfl_ratings_elo_rating.6dedfbc521": ["model.sports_sims.nfl_ratings"], "test.sports_sims.empty_table_nfl_random_num_gen_.0eb88dc7a0": ["model.sports_sims.nfl_random_num_gen"], "test.sports_sims.unique_nfl_teams_team_long.aba62e3173": ["model.sports_sims.nfl_teams"], "test.sports_sims.not_null_nfl_teams_team_long.12e97e9531": ["model.sports_sims.nfl_teams"], "test.sports_sims.unique_nfl_vegas_wins_team.af395b9444": ["model.sports_sims.nfl_vegas_wins"], "test.sports_sims.not_null_nfl_vegas_wins_team.2b5b398b1d": ["model.sports_sims.nfl_vegas_wins"], "test.sports_sims.not_null_nfl_vegas_wins_win_total.9fd12813b7": ["model.sports_sims.nfl_vegas_wins"], "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0": ["model.sports_sims.nba_raw_schedule"], "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759": ["model.sports_sims.nba_raw_team_ratings"], "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f": ["model.sports_sims.nba_raw_xf_series_to_seed"], "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f": ["model.sports_sims.nba_latest_elo"], "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f": ["model.sports_sims.nba_latest_elo"], "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2": ["model.sports_sims.nba_latest_results"], "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b": ["model.sports_sims.nba_schedules"], "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1": ["model.sports_sims.nba_schedules"], "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19": ["model.sports_sims.nba_schedules"], "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe": ["model.sports_sims.nba_schedules"], "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c": ["model.sports_sims.nba_schedules"], "test.sports_sims.not_null_nba_ratings_team.de3ad0b568": ["model.sports_sims.nba_ratings"], "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b": ["model.sports_sims.nba_ratings"], "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7": ["model.sports_sims.nba_ratings"], "test.sports_sims.unique_nba_ratings_team_long.6615b31795": ["model.sports_sims.nba_ratings"], "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6": ["model.sports_sims.nba_ratings"], "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69": ["model.sports_sims.nba_ratings"], "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393": ["model.sports_sims.nba_ratings"], "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01": ["model.sports_sims.nba_reg_season_schedule"], "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c": ["model.sports_sims.nba_random_num_gen"], "test.sports_sims.unique_nba_teams_team_long.a9afa2e873": ["model.sports_sims.nba_teams"], "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e": ["model.sports_sims.nba_teams"], "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1": ["model.sports_sims.nba_teams"], "test.sports_sims.not_null_nba_teams_team.6d25569f6c": ["model.sports_sims.nba_teams"], "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb": ["model.sports_sims.nba_vegas_wins"], "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e": ["model.sports_sims.nba_vegas_wins"], "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b": ["model.sports_sims.nba_vegas_wins"], "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf": ["model.sports_sims.nba_xf_series_to_seed"], "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed": ["model.sports_sims.nba_xf_series_to_seed"], "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82": ["model.sports_sims.nba_xf_series_to_seed"], "model.sports_sims.nfl_tiebreakers_optimized": ["model.sports_sims.nfl_ratings", "model.sports_sims.nfl_reg_season_simulator"], "test.sports_sims.assert_nfl_tiebreakers_properly_broken": ["model.sports_sims.nfl_ratings", "model.sports_sims.nfl_reg_season_simulator", "model.sports_sims.nfl_tiebreakers_optimized"], "model.sports_sims.nfl_reg_season_summary": ["model.sports_sims.nfl_ratings", "model.sports_sims.nfl_reg_season_end", "model.sports_sims.nfl_vegas_wins"], "model.sports_sims.nfl_reg_season_end": ["model.sports_sims.nfl_latest_elo", "model.sports_sims.nfl_reg_season_simulator", "model.sports_sims.nfl_tiebreakers_optimized"], "source.sports_sims.nba.nba_schedule": [], "source.sports_sims.nba.nba_team_ratings": [], "source.sports_sims.nba.xf_series_to_seed": [], "source.sports_sims.nba.nba_results": [], "source.sports_sims.nba.nba_elo": [], "source.sports_sims.nfl.nfl_schedule": [], "source.sports_sims.nfl.nfl_team_ratings": [], "source.sports_sims.nfl.nfl_results": [], "source.sports_sims.ncaaf.ncaaf_schedule": [], "source.sports_sims.ncaaf.ncaaf_team_ratings": [], "source.sports_sims.ncaaf.ncaaf_results": [], "source.sports_sims.nba_dlt.games": []}, "child_map": {"model.sports_sims.nba_xf_series_to_seed": ["model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4", "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82", "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf", "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed"], "model.sports_sims.nba_reg_season_schedule": ["model.sports_sims.nba_schedules", "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01"], "model.sports_sims.nba_results_by_team": ["model.sports_sims.reg_season_predictions"], "model.sports_sims.nba_schedules": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_results_log", "model.sports_sims.playin_sim_r1", "model.sports_sims.playin_sim_r2", "model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4", "model.sports_sims.reg_season_simulator", "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19", "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1", "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c", "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe", "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b"], "model.sports_sims.nba_seasons": [], "model.sports_sims.nba_post_season_schedule": ["model.sports_sims.nba_schedules", "model.sports_sims.nfl_schedules"], "model.sports_sims.nba_latest_results": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_reg_season_actuals", "model.sports_sims.nba_results_log", "model.sports_sims.reg_season_actuals_enriched", "model.sports_sims.reg_season_simulator", "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864", "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c", "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd", "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2", "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2", "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf", "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f", "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46"], "model.sports_sims.nba_latest_elo": ["model.sports_sims.nba_ratings", "model.sports_sims.nba_results_log", "model.sports_sims.reg_season_end", "model.sports_sims.tournament_end", "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f", "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f"], "model.sports_sims.nba_ratings": ["model.sports_sims.nba_post_season_schedule", "model.sports_sims.nba_reg_season_schedule", "model.sports_sims.nba_vegas_wins", "model.sports_sims.season_summary", "model.sports_sims.team_matchups", "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69", "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6", "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393", "test.sports_sims.not_null_nba_ratings_team.de3ad0b568", "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7", "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b", "test.sports_sims.unique_nba_ratings_team_long.6615b31795"], "model.sports_sims.nba_random_num_gen": ["model.sports_sims.playin_sim_r1", "model.sports_sims.playin_sim_r2", "model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4", "model.sports_sims.reg_season_simulator", "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c"], "model.sports_sims.nba_results_log": ["model.sports_sims.nba_elo_history", "model.sports_sims.nba_results_by_team", "model.sports_sims.reg_season_actuals_enriched"], "model.sports_sims.nba_reg_season_actuals": ["model.sports_sims.reg_season_summary"], "model.sports_sims.nba_elo_history": ["model.sports_sims.nba_season_teams", "model.sports_sims.nba_seasons", "model.sports_sims.nba_team_stats"], "model.sports_sims.nba_season_teams": ["model.sports_sims.nba_team_stats"], "model.sports_sims.nba_teams": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_reg_season_actuals", "model.sports_sims.nba_results_log", "model.sports_sims.nba_tiebreakers_optimized", "model.sports_sims.playoff_summary", "model.sports_sims.reg_season_actuals_enriched", "model.sports_sims.reg_season_predictions", "model.sports_sims.tournament_end", "test.sports_sims.not_null_nba_teams_team.6d25569f6c", "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e", "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1", "test.sports_sims.unique_nba_teams_team_long.a9afa2e873"], "model.sports_sims.nba_vegas_wins": ["model.sports_sims.reg_season_summary", "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e", "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b", "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb"], "model.sports_sims.reg_season_actuals_enriched": [], "model.sports_sims.reg_season_end": ["model.sports_sims.initialize_seeding", "model.sports_sims.playin_sim_r1", "model.sports_sims.reg_season_summary"], "model.sports_sims.nba_team_stats": [], "model.sports_sims.playoff_summary": ["model.sports_sims.season_summary"], "model.sports_sims.season_summary": [], "model.sports_sims.team_matchups": [], "model.sports_sims.tournament_end": [], "model.sports_sims.reg_season_summary": ["model.sports_sims.season_summary"], "model.sports_sims.reg_season_predictions": ["model.sports_sims.tournament_end"], "model.sports_sims.playin_sim_r1": ["model.sports_sims.playin_sim_r1_end"], "model.sports_sims.playin_sim_r2": ["model.sports_sims.playin_sim_r2_end"], "model.sports_sims.playin_sim_r2_end": ["model.sports_sims.initialize_seeding"], "model.sports_sims.playin_sim_r1_end": ["model.sports_sims.playin_sim_r2", "model.sports_sims.playin_sim_r2_end"], "model.sports_sims.reg_season_simulator": ["model.sports_sims.nba_tiebreakers_optimized", "model.sports_sims.reg_season_end", "model.sports_sims.reg_season_predictions", "model.sports_sims.tournament_end"], "model.sports_sims.playoff_sim_r4": ["model.sports_sims.playoff_summary"], "model.sports_sims.playoff_sim_r2": ["model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_summary"], "model.sports_sims.playoff_sim_r3": ["model.sports_sims.playoff_sim_r4", "model.sports_sims.playoff_summary"], "model.sports_sims.playoff_sim_r1": ["model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_summary"], "model.sports_sims.initialize_seeding": ["model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_summary"], "model.sports_sims.nba_raw_results": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_tiebreakers_optimized"], "model.sports_sims.nba_raw_schedule": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_post_season_schedule", "model.sports_sims.nba_reg_season_schedule", "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0"], "model.sports_sims.nba_raw_team_ratings": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_latest_elo", "model.sports_sims.nba_ratings", "model.sports_sims.nba_raw_results", "model.sports_sims.nba_teams", "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759"], "model.sports_sims.nba_raw_xf_series_to_seed": ["model.sports_sims.nba_xf_series_to_seed", "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f"], "model.sports_sims.nfl_schedules": ["model.sports_sims.nfl_random_num_gen", "model.sports_sims.nfl_reg_season_simulator", "test.sports_sims.accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.3ce8130eae", "test.sports_sims.not_null_nfl_schedules_game_id.3961bd8fd2", "test.sports_sims.not_null_nfl_schedules_home_team.4f29463b21", "test.sports_sims.not_null_nfl_schedules_visiting_team.fa5caebf37", "test.sports_sims.unique_nfl_schedules_game_id.38f1c777a5"], "model.sports_sims.nfl_vegas_wins": ["model.sports_sims.nfl_reg_season_summary", "test.sports_sims.not_null_nfl_vegas_wins_team.2b5b398b1d", "test.sports_sims.not_null_nfl_vegas_wins_win_total.9fd12813b7", "test.sports_sims.unique_nfl_vegas_wins_team.af395b9444"], "model.sports_sims.nfl_ratings": ["model.sports_sims.nfl_reg_season_predictions", "model.sports_sims.nfl_reg_season_summary", "model.sports_sims.nfl_schedules", "model.sports_sims.nfl_teams", "model.sports_sims.nfl_tiebreakers_optimized", "model.sports_sims.nfl_vegas_wins", "test.sports_sims.accepted_values_nfl_ratings_conf__AFC__NFC.a37211d1be", "test.sports_sims.assert_nfl_tiebreakers_properly_broken", "test.sports_sims.not_null_nfl_ratings_conf.c095117e8b", "test.sports_sims.not_null_nfl_ratings_elo_rating.6dedfbc521", "test.sports_sims.not_null_nfl_ratings_team.b2ede8bbf2", "test.sports_sims.unique_nfl_ratings_team.8d6615a017"], "model.sports_sims.nfl_random_num_gen": ["model.sports_sims.nfl_reg_season_simulator", "test.sports_sims.empty_table_nfl_random_num_gen_.0eb88dc7a0"], "model.sports_sims.nfl_latest_results": ["model.sports_sims.nfl_elo_rollforward", "model.sports_sims.nfl_random_num_gen", "model.sports_sims.nfl_reg_season_actuals", "model.sports_sims.nfl_reg_season_simulator"], "model.sports_sims.nfl_teams": ["model.sports_sims.nfl_reg_season_actuals", "test.sports_sims.not_null_nfl_teams_team_long.12e97e9531", "test.sports_sims.unique_nfl_teams_team_long.aba62e3173"], "model.sports_sims.nfl_reg_season_actuals": [], "model.sports_sims.nfl_latest_elo": ["model.sports_sims.nfl_ratings", "model.sports_sims.nfl_reg_season_end"], "model.sports_sims.nfl_reg_season_predictions": [], "model.sports_sims.nfl_reg_season_simulator": ["model.sports_sims.nfl_reg_season_end", "model.sports_sims.nfl_reg_season_predictions", "model.sports_sims.nfl_tiebreakers_optimized", "test.sports_sims.assert_nfl_tiebreakers_properly_broken"], "model.sports_sims.nfl_raw_schedule": ["model.sports_sims.nfl_latest_results", "model.sports_sims.nfl_schedules", "model.sports_sims.nfl_teams", "test.sports_sims.empty_table_nfl_raw_schedule_.38577f458a"], "model.sports_sims.nfl_raw_team_ratings": ["model.sports_sims.nfl_elo_rollforward", "model.sports_sims.nfl_latest_elo", "model.sports_sims.nfl_ratings", "test.sports_sims.empty_table_nfl_raw_team_ratings_.fd40ff9f75"], "model.sports_sims.nfl_raw_results": ["model.sports_sims.nfl_latest_results", "test.sports_sims.empty_table_nfl_raw_results_.4695a4b621"], "model.sports_sims.nba_elo_rollforward": ["model.sports_sims.nba_elo_history", "model.sports_sims.nba_latest_elo", "model.sports_sims.nba_post_season_schedule", "model.sports_sims.nba_reg_season_schedule", "model.sports_sims.nba_results_log"], "model.sports_sims.nba_tiebreakers_optimized": ["model.sports_sims.reg_season_end"], "model.sports_sims.nfl_elo_rollforward": ["model.sports_sims.nfl_latest_elo", "model.sports_sims.nfl_schedules"], "operation.sports_sims.sports_sims-on-run-start-0": [], "test.sports_sims.empty_table_nfl_raw_results_.4695a4b621": [], "test.sports_sims.empty_table_nfl_raw_schedule_.38577f458a": [], "test.sports_sims.empty_table_nfl_raw_team_ratings_.fd40ff9f75": [], "test.sports_sims.unique_nfl_schedules_game_id.38f1c777a5": [], "test.sports_sims.not_null_nfl_schedules_game_id.3961bd8fd2": [], "test.sports_sims.accepted_values_nfl_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.3ce8130eae": [], "test.sports_sims.not_null_nfl_schedules_visiting_team.fa5caebf37": [], "test.sports_sims.not_null_nfl_schedules_home_team.4f29463b21": [], "test.sports_sims.not_null_nfl_ratings_team.b2ede8bbf2": [], "test.sports_sims.unique_nfl_ratings_team.8d6615a017": [], "test.sports_sims.not_null_nfl_ratings_conf.c095117e8b": [], "test.sports_sims.accepted_values_nfl_ratings_conf__AFC__NFC.a37211d1be": [], "test.sports_sims.not_null_nfl_ratings_elo_rating.6dedfbc521": [], "test.sports_sims.empty_table_nfl_random_num_gen_.0eb88dc7a0": [], "test.sports_sims.unique_nfl_teams_team_long.aba62e3173": [], "test.sports_sims.not_null_nfl_teams_team_long.12e97e9531": [], "test.sports_sims.unique_nfl_vegas_wins_team.af395b9444": [], "test.sports_sims.not_null_nfl_vegas_wins_team.2b5b398b1d": [], "test.sports_sims.not_null_nfl_vegas_wins_win_total.9fd12813b7": [], "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0": [], "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759": [], "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f": [], "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f": [], "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f": [], "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46": [], "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864": [], "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c": [], "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd": [], "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2": [], "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf": [], "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f": [], "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2": [], "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b": [], "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1": [], "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19": [], "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe": [], "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c": [], "test.sports_sims.not_null_nba_ratings_team.de3ad0b568": [], "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b": [], "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7": [], "test.sports_sims.unique_nba_ratings_team_long.6615b31795": [], "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6": [], "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69": [], "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393": [], "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01": [], "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c": [], "test.sports_sims.unique_nba_teams_team_long.a9afa2e873": [], "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e": [], "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1": [], "test.sports_sims.not_null_nba_teams_team.6d25569f6c": [], "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb": [], "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e": [], "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b": [], "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf": [], "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed": [], "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82": [], "model.sports_sims.nfl_tiebreakers_optimized": ["model.sports_sims.nfl_reg_season_end", "test.sports_sims.assert_nfl_tiebreakers_properly_broken"], "test.sports_sims.assert_nfl_tiebreakers_properly_broken": [], "model.sports_sims.nfl_reg_season_summary": [], "model.sports_sims.nfl_reg_season_end": ["model.sports_sims.nfl_reg_season_summary"], "source.sports_sims.nba.nba_schedule": ["model.sports_sims.nba_raw_schedule"], "source.sports_sims.nba.nba_team_ratings": ["model.sports_sims.nba_raw_team_ratings"], "source.sports_sims.nba.xf_series_to_seed": ["model.sports_sims.nba_raw_xf_series_to_seed"], "source.sports_sims.nba.nba_results": ["model.sports_sims.nba_raw_results"], "source.sports_sims.nba.nba_elo": ["model.sports_sims.nba_elo_history"], "source.sports_sims.nfl.nfl_schedule": ["model.sports_sims.nfl_raw_schedule"], "source.sports_sims.nfl.nfl_team_ratings": ["model.sports_sims.nfl_raw_team_ratings"], "source.sports_sims.nfl.nfl_results": ["model.sports_sims.nfl_raw_results"], "source.sports_sims.ncaaf.ncaaf_schedule": [], "source.sports_sims.ncaaf.ncaaf_team_ratings": [], "source.sports_sims.ncaaf.ncaaf_results": [], "source.sports_sims.nba_dlt.games": ["model.sports_sims.nba_raw_results"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}